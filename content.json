{"meta":{"title":"Comicat's Blog","subtitle":"Find Something Funny","description":"comicat的部落格，程式技術、生活分享","author":"comicat","url":"https://blog.comicat.me"},"pages":[{"title":"404 Not Found","date":"2022-09-21T12:38:17.168Z","updated":"2022-09-21T12:38:17.168Z","comments":false,"path":"/404.html","permalink":"https://blog.comicat.me/404.html","excerpt":"","text":"404 Not Found"},{"title":"分類","date":"2022-09-21T12:38:17.188Z","updated":"2022-09-21T12:38:17.188Z","comments":false,"path":"categories/index.html","permalink":"https://blog.comicat.me/categories/index.html","excerpt":"","text":""},{"title":"標籤","date":"2022-09-21T12:38:17.188Z","updated":"2022-09-21T12:38:17.188Z","comments":false,"path":"tags/index.html","permalink":"https://blog.comicat.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用docker製作多版本php-cli指令","slug":"使用docker製作多版本php-cli指令","date":"2020-09-03T09:26:04.000Z","updated":"2022-09-21T12:38:17.188Z","comments":true,"path":"2020/09/03/使用docker製作多版本php-cli指令/","link":"","permalink":"https://blog.comicat.me/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/","excerpt":"因為工作剛好需要經手到一個骨灰級的php專案，clone and install後第一件事就是跑測試， 但是本地端的php版本是7.4，一跑下去本來沒錯誤的測試都過不了， 想起公司大神曾玩過的docker container tools，這次就來試一下吧~","text":"因為工作剛好需要經手到一個骨灰級的php專案，clone and install後第一件事就是跑測試， 但是本地端的php版本是7.4，一跑下去本來沒錯誤的測試都過不了， 想起公司大神曾玩過的docker container tools，這次就來試一下吧~ 建立php-cli image 首先下載使用php5.6-cli這個docker image。 1docker run -it php:5.6-cli bash 進container後執行php -v確認版本資訊。 我們測試使用phpunit需要安裝xdebug。查詢PHP支援的對應xdebug版號，https://xdebug.org/download/historical。這個image已經內建了pecl，pecl install xdebug-2.5.5，就可以安裝xdebug了 (不帶版號則會裝最新版)。 設定php.ini，並啟用xdebug 123456cd '/usr/local/etc/php/'cp php.ini-development php.ini# 依照xdebug安裝成功後的提供的資訊在php.ini中添加設定echo \"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\" &gt;&gt; php.iniphp -v 正確啟用後php的版本資訊中會看到with Xdebug v2.5.5的字樣了。 離開container，建立新的layer，並加上tag 1234# 使用剛剛操作的container-iddocker commit $&#123;container-id&#125;# 使用剛剛commit回傳的image-iddocker tag $&#123;image-id&#125; php56 建立alias指令 呼叫container幫我們執行php 1docker container run -it --rm php56 php -v 將當前目錄掛進container執行指令 1docker container run -it --rm -v $(pwd):&#x2F;source -w &#x2F;source php56 ls -al 建立alias在.bashrc或.zshrc中加入設定 1alias php56=\"docker container run -it --rm -v \\$(pwd):/source -w /source php56 php\" $(pwd)之前的\\一定要記得，不然alias會在一登入時就將其解析成固定的路徑。 當我們執行php56時，實際上就是呼叫container幫我們執行php了。","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"Docker","slug":"資訊技術/Docker","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Docker/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.comicat.me/tags/Docker/"}]},{"title":"Github的新彩蛋 - 打造自己專屬的Github Profile","slug":"Github的新彩蛋-打造自己專屬的Github-Profile","date":"2020-07-22T03:41:53.000Z","updated":"2022-09-21T12:38:17.172Z","comments":true,"path":"2020/07/22/Github的新彩蛋-打造自己專屬的Github-Profile/","link":"","permalink":"https://blog.comicat.me/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/","excerpt":"前陣子Github釋出了一個彩蛋新功能，在個人首頁提供了一個小區塊， 讓我們可以用Markdown語法「揮灑創意」，可以用於自由設計個人頁的封面資料。 像是我的Github個人首頁這樣的效果。 https://github.com/comicat-hu","text":"前陣子Github釋出了一個彩蛋新功能，在個人首頁提供了一個小區塊， 讓我們可以用Markdown語法「揮灑創意」，可以用於自由設計個人頁的封面資料。 像是我的Github個人首頁這樣的效果。 https://github.com/comicat-hu 啟用Github Profile要啟用這個區塊非常簡單，只要先建立一個同Github username的Repository，並在其中添加README.md這個檔案。 相信對於Github的資深使用者來說，寫README算是家常便飯的事了吧，在其中建立自己的內容就會自動在個人首頁顯示囉！ Profile產生器如果你懶得自己打語法，或是不知道怎麼設計，也已經有開發者釋出懶人產生器，想要的資訊填一填就可以有一份profile了。 這個網站也提供了，所見及所得的介面，可以自訂修改或貼上自己編寫的語法，並即時預覽，可以不用都照著他的模板生成。 https://arturssmirnovs.github.io/github-profile-readme-generator/ 來看看大家的Profilehttps://github.com/coderjojo/creative-profile-readme 這個repository收集了一些開發者們「別出心裁」設計的profile 挑了一些我覺得不錯的: 變成個人近況看板 結合Github Issue跟Github Action跟世界的人們來場西洋棋 個人技能看板 簡潔設計的名片風格 參考資源 https://github.com/arturssmirnovs/github-profile-readme-generator https://github.com/anuraghazra/github-readme-stats https://juejin.im/post/5f0d2e5e5188252e3426dbfe https://medium.com/starbugs/如何建立獨一無二的-github-profile-與三個很酷的設計及應用-ef1cbb4b42c1","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://blog.comicat.me/tags/Github/"}]},{"title":"PHP程式效能分析小工具Cachegrind","slug":"PHP程式效能分析小工具Cachegrind","date":"2019-10-20T07:31:54.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2019/10/20/PHP程式效能分析小工具Cachegrind/","link":"","permalink":"https://blog.comicat.me/2019/10/20/PHP%E7%A8%8B%E5%BC%8F%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%B7%A5%E5%85%B7Cachegrind/","excerpt":"借助XDebug Profiler記錄callstack，再用Cachegrind工具圖形化顯示，讓我們可以快速簡單地瞭解程式碼效能瓶頸，在追蹤程式碼時也十分好用。","text":"借助XDebug Profiler記錄callstack，再用Cachegrind工具圖形化顯示，讓我們可以快速簡單地瞭解程式碼效能瓶頸，在追蹤程式碼時也十分好用。 設定xdebug profiler首先需要在php.ini中啟用XDebug，並且填入以下設定 12345678;預設不啟用xdebug.profiler_enable&#x3D;0;可帶XDEBUG_PROFILE&#x3D;1參數透過GET或POST觸發xdebug.profiler_enable_trigger&#x3D;1;檔名格式xdebug.profiler_output_name&#x3D;callgrind.%H_%t.out;存放的資料夾，需要先開好並給它存取權限xdebug.profiler_output_dir&#x3D;&quot;D:\\xdebug_profiler_output\\&quot; 產生並載入記錄檔接著只要實際存取一下網頁，並且帶上XDEBUG_PROFILE=1參數，每個請求就會產生一筆記錄檔案在指定的位置了。 用Cachegrind載入後，就會自動顯示如首圖了。 耗時顯示可切換成百分比或1/1000000秒。 p.s ubuntu上的叫KCachegrind，windows上的叫QCachegrind 參考資料 https://xdebug.org/docs/profiler https://ithelp.ithome.com.tw/articles/10194661 https://blog.xuite.net/chingwei/blog/32217722-%E3%80%90%E7%B3%BB%E7%B5%B1%E3%80%91Profiling+PHP+with+Xdebug+%26+KCachegrind","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"}]},{"title":"Apache run multiple php version by port-based vHosts","slug":"Apache-run-multiple-php-version-by-port-based-vHosts","date":"2019-09-07T17:15:44.000Z","updated":"2022-09-21T12:38:17.168Z","comments":true,"path":"2019/09/07/Apache-run-multiple-php-version-by-port-based-vHosts/","link":"","permalink":"https://blog.comicat.me/2019/09/07/Apache-run-multiple-php-version-by-port-based-vHosts/","excerpt":"這篇記錄一下在windows 10 上設定Apache2.4的vHosts，透過不同的port來跑多版本的PHP。 像這樣: localhost:8056 (php5.6) localhost:8072 (php7.2) localhost:8073 (php7.3)","text":"這篇記錄一下在windows 10 上設定Apache2.4的vHosts，透過不同的port來跑多版本的PHP。 像這樣: localhost:8056 (php5.6) localhost:8072 (php7.2) localhost:8073 (php7.3) 資料夾配置這裡列一下我的資料夾配置，後面也會依這邊的路徑來配置Apache、PHP設定。 123456- D:&#x2F;web |_ &#x2F;Apache24 |_ &#x2F;php |_ &#x2F;56 |_ &#x2F;72 |_ &#x2F;73 下載Apache2.4下載ApacheHaus (Apache 2.4.x OpenSSL 1.1.1 VC15)，如果需要啟用TLSv1.3需要使用含OpenSSL 1.1.1以上的版本。 解壓縮Apache24資料夾 設定conf/httpd.conf SRVROOT Listen PORT (這邊我改成8080) 手動啟動bin/httpd測試，應可連上localhost:8080和localhost:443，顯示index.html預設頁面 建立Apache bin路徑到path環境變數 註冊服務 httpd -k install 啟動服務 httpd -k start 重啟服務 httpd -k restart httpd -S 下載PHP下載php (x64 TS版) https://windows.php.net/download/ https://windows.php.net/downloads/releases/archives/ (停止維護的在這裡) 分別解壓縮到php/73、php/72、php/56 (php7需要VC15、php5需要VC11) 下載VC11 複製php-development.ini到php.ini 建立預設的php環境 在apache conf/httpd.conf加入以下內容，重啟apache 1DirectoryIndex index.php index.html 123LoadModule php7_module \"D:/web/php/73/php7apache2_4.dll\"AddType application/x-httpd-php .phpPHPIniDir \"D:/web/php/73/\" 在htdocs建立phpinfo.php，連到localhost:8080，應該可以順利解析並且顯示phpinfo，並且看到版本為7.3 1&lt;?php phpinfo(); ?&gt; 啟用fcgi 下載mod_fcgid.so (https://www.apachehaus.com/cgi-bin/download.plx) 解壓縮到apache的modules目錄 httpd.conf加入設定 1LoadModule fcgid_module modules/mod_fcgid.so 1234AddHandler fcgid-script .fcgi .phpFcgidInitialEnv PHPRC \"D:/web/php/73\"FcgidWrapper \"D:/web/php/73/php-cgi.exe\" .php 啟用vHosts 拿掉註解 Include conf/extra/httpd-vhosts.conf 修改httpd-vhosts.conf 123456789101112131415161718192021222324252627282930313233Listen 8056Listen 8072Listen 8073&lt;Directory \"$&#123;SRVROOT&#125;/htdocs\"&gt; Options -Indexes +ExecCGI AllowOverride All Require all granted&lt;/Directory&gt;&lt;VirtualHost _default_:8056&gt; ErrorLog \"logs/php56-error.log\" CustomLog \"logs/php56-access.log\" common FcgidInitialEnv PHPRC \"D:/web/php/56\" FcgidWrapper \"D:/web/php/56/php-cgi.exe\" .php&lt;/VirtualHost&gt;&lt;VirtualHost _default_:8072&gt; ErrorLog \"logs/php72-error.log\" CustomLog \"logs/php72-access.log\" common FcgidInitialEnv PHPRC \"D:/web/php/72\" FcgidWrapper \"D:/web/php/72/php-cgi.exe\" .php&lt;/VirtualHost&gt;&lt;VirtualHost _default_:8073&gt; ErrorLog \"logs/php73-error.log\" CustomLog \"logs/php73-access.log\" common FcgidInitialEnv PHPRC \"D:/web/php/73\" FcgidWrapper \"D:/web/php/73/php-cgi.exe\" .php&lt;/VirtualHost&gt; 過程中如果設定檔有誤可能會持續遭遇ConnectionRefuse或403 Forbidden， 還有注意apache22跟apache24有些指令不同，例如資料夾權限在apache22的指令是Allow from all，在apache24則是Require all granted 參考資料 https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/httpd.conf https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/extra/httpd-vhosts.conf http://www.osyum.com/article/show/287/ https://shazi.info/ubuntu-16-04-%E5%AE%89%E8%A3%9D-apache2-mod_fcgid-mpm_worker-%E8%B7%91-php-7-x/ https://recwe.com/article/25","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Apache","slug":"Apache","permalink":"https://blog.comicat.me/tags/Apache/"}]},{"title":"PHP select mysql bit column return not correct value","slug":"PHP-select-mysql-bit-column-return-not-correct-value","date":"2019-05-25T02:59:56.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2019/05/25/PHP-select-mysql-bit-column-return-not-correct-value/","link":"","permalink":"https://blog.comicat.me/2019/05/25/PHP-select-mysql-bit-column-return-not-correct-value/","excerpt":"最近在一個PHP5.3的專案中遇到存取MySQL bit型態欄位取值總是拿到0的狀況， 不要問我為什麼還在PHP5.3，嘛~ 萬惡歷史淵源嘛~ 進入正題~ 狀況摘要經查發現， 取bit=1，php這邊得到 1string(1)&quot;\\001&quot; 取bit=0，php這邊得到 1string(1)&quot;\\000&quot;","text":"最近在一個PHP5.3的專案中遇到存取MySQL bit型態欄位取值總是拿到0的狀況， 不要問我為什麼還在PHP5.3，嘛~ 萬惡歷史淵源嘛~ 進入正題~ 狀況摘要經查發現， 取bit=1，php這邊得到 1string(1)&quot;\\001&quot; 取bit=0，php這邊得到 1string(1)&quot;\\000&quot; 以嘗試過用這幾種設定都無法解決 $pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false); ord() 原因php mysql driver版本的問題。 舊版的php預設使用libmysqlclient做為驅動，php5.3起支援mysqlnd，但編譯時需要指定，php5.4後預設使用mysqlnd， libmysqlclient無法取得mysql中的原始型態，在弱型別的處理中bit被不正確的強轉成string，而造成此bug， 使用mysqlnd則沒有這個問題，bit型態將會順利的以string 0/1回傳，若設定PDO::ATTR_EMULATE_PREPARES，則以int 0/1回傳， 目前在insert時並沒有遇到這個問題，都是select時，回傳值不正確。 解決辦法 環境面的解法: 升級mysql driver重新編譯php環境或換主機 DB面的解法: 避免使用bit型態，使用tinyint(1)，根據文件這兩者占用的空間是差不多的 程式面的暫時解: 特別針對select bit形態欄位時+0，SELECT (bit_column+0) AS bit_column 如何判斷環境使用何種mysql driver通常phpinfo(php -i)沒有查閱到mysqlnd這個字眼時，使用的就是舊的libmysqlclient 以下提供一段網路上找的的程式檢查，他是透過檢查mysqlnd特有的function來判斷使用的哪種driver 123456789101112131415161718192021222324$hasMySQL = false;$hasMySQLi = false;$withMySQLnd = false;$sentence='';if (function_exists('mysql_connect')) &#123; $hasMySQL = true; $sentence.= \"(Deprecated) MySQL &lt;b&gt;is installed&lt;/b&gt; \";&#125; else $sentence.= \"(Deprecated) MySQL &lt;b&gt;is not&lt;/b&gt; installed \";if (function_exists('mysqli_connect')) &#123; $hasMySQLi = true; $sentence.= \"and the new (improved) MySQL &lt;b&gt;is installed&lt;/b&gt;. \";&#125; else $sentence.= \"and the new (improved) MySQL &lt;b&gt;is not installed&lt;/b&gt;. \";if (function_exists('mysqli_fetch_all')) &#123; $withMySQLnd = true; $sentence.= \"This server is using MySQLnd as the driver.\";&#125; else $sentence.= \"This server is using libmysqlclient as the driver.\";echo $sentence; 參考資料​* https://stackoverflow.com/questions/10540483/pdostatement-mysql-inserting-value-0-into-a-bit1-field-results-in-1-written/10542145​* https://stackoverflow.com/questions/20079320/php-pdo-mysql-how-do-i-return-integer-and-numeric-columns-from-mysql-as-int​* https://stackoverflow.com/questions/15106985/mysql-select-bit1-shows-as-string3​* https://www.junorz.com/archives/683.html​* http://www.q2zy.com/php-pdo%E9%A9%B1%E5%8A%A8-mysqlnd%E6%8A%98%E8%85%BE%E8%AE%B0/​* https://www.php.net/manual/zh/mysqlinfo.library.choosing.php","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blog.comicat.me/tags/MySQL/"}]},{"title":"Javascript async loop","slug":"Javascript-async-loop","date":"2019-01-30T08:27:21.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2019/01/30/Javascript-async-loop/","link":"","permalink":"https://blog.comicat.me/2019/01/30/Javascript-async-loop/","excerpt":"Javascript 自ES7後支援潮潮的async-await語法，解決的許多不順眼的promise同步語法， 但是Array.prototype.forEach是沒有支援到async function的用法哦~ (天真的踩雷 底下給了一些程式片段範例:","text":"Javascript 自ES7後支援潮潮的async-await語法，解決的許多不順眼的promise同步語法， 但是Array.prototype.forEach是沒有支援到async function的用法哦~ (天真的踩雷 底下給了一些程式片段範例: 首先為了例子方便，我封裝了一個setTimeout，這個wait(ms)傳進要等待的時間，並且執行完後回傳一個promise，等等我們會用async-await來處理它。 12345function wait (ms) &#123; return new Promise(function (resolve, reject) &#123; setTimeout(resolve, ms); &#125;);&#125; forEach我們期望程式開始後每隔1000ms log出一個陣列值。 12345678910111213141516async function run () &#123; console.log('Start'); console.time('ExecuteTime'); var arr = ['apple', 'ball', 'cat', 'dog', 'egg']; arr.forEach(async function (item) &#123; console.log(item); await wait(1000); &#125;); console.log('End'); console.timeEnd('ExecuteTime'); // ExecuteTime: &lt; 5ms&#125;run(); 執行上面程式可以發現我們的wait完全沒等到，程式就結束了，總執行時間很短。 for-of於是我們將程式修改成下面這種寫法。 12345678910111213141516async function run () &#123; console.log('Start'); console.time('ExecuteTime'); var arr = ['apple', 'ball', 'cat', 'dog', 'egg']; for (var item of arr) &#123; console.log(item); await wait(1000); &#125; console.log('End'); console.timeEnd('ExecuteTime'); // ExecuteTime: 5xxx ms&#125;run(); 執行上面程式後，符合我們的期望每隔1秒輸出一個陣列值。 How to break in forEachNO. 在forEach裡沒辦法使用break，只能return;來跳過本次循環，有這種需求只能乖乖用for loop了。 或是參考底下連結提供的一些神奇解法。 Reference link https://blog.fundebug.com/2018/02/05/map_vs_foreach https://github.com/babel/babel/issues/909 http://jser.me/2014/04/02/%E5%A6%82%E4%BD%95%E5%9C%A8Array.forEach%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%87%8Cbreak.html https://stackoverflow.com/questions/2641347/short-circuit-array-foreach-like-calling-break","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"Javascript","slug":"資訊技術/Javascript","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Javascript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://blog.comicat.me/tags/Javascript/"}]},{"title":"Cloudflare+GitHub-Pages自訂網域連線設定","slug":"Cloudflare-GitHub-Pages自訂網域連線設定","date":"2018-09-28T05:18:27.000Z","updated":"2022-09-21T12:38:17.172Z","comments":true,"path":"2018/09/28/Cloudflare-GitHub-Pages自訂網域連線設定/","link":"","permalink":"https://blog.comicat.me/2018/09/28/Cloudflare-GitHub-Pages%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A/","excerpt":"","text":"以此站為例，我使用了hexo搭配Github-Pages來放置這個靜態網站。 建立Github-Pages的步驟很簡單，只要在專案設定中啟用並且將網站程式碼push上來就可以了。 首先我建了一個blog專案來使用，產生出的網址是http://comicat-hu.github.io/blog 接著在專案設定中填入custom domain並儲存，這時你的專案會自動新增一個commit來創建CNAME這個檔案，內容包含了你自訂的domain，若是要讓hexo在每次deploy時不會洗掉這個檔案，可以將其加入hexo專案的source資料夾下，_config.yml的url設定值也要記得一併修改。 再來因為我的domain先前已經給cloudflare代管(需要到網域管理商那邊將cloudflare NameServer設定進去)，並且啟用了免費的SSL服務，所以這邊要設定一下： 新增A record分別指到github，參考troubleshooting-custom-domains/#dns-configuration-errors 新增CNAME綁入自訂的subdomain，並指到yourdomain.github.io上 接者要等待一段時間才會生效哦","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"Blog","slug":"資訊技術/Blog","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Blog/"}],"tags":[{"name":"Deploy","slug":"Deploy","permalink":"https://blog.comicat.me/tags/Deploy/"},{"name":"Blog","slug":"Blog","permalink":"https://blog.comicat.me/tags/Blog/"},{"name":"GitHub-Pages","slug":"GitHub-Pages","permalink":"https://blog.comicat.me/tags/GitHub-Pages/"}]},{"title":"AC-Y18解題記錄","slug":"AC-Y18解題記錄","date":"2018-02-12T06:05:56.000Z","updated":"2022-09-21T12:38:17.168Z","comments":true,"path":"2018/02/12/AC-Y18解題記錄/","link":"","permalink":"https://blog.comicat.me/2018/02/12/AC-Y18%E8%A7%A3%E9%A1%8C%E8%A8%98%E9%8C%84/","excerpt":"演算法解題記錄","text":"演算法解題記錄 00Write a function: function solution(A); that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A. For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5. Given A = [1, 2, 3], the function should return 4.Given A = [-1, -3], the function should return 1. Assume that: N is an integer within the range [1..100,000]; each element of array A is an integer within the range [-1,000,000..1,000,000]. Complexity: expected worst-case time complexity is O(N); expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments). 00 JS參考解 time: O(N), space: O(1) 使用原輸入陣列來標記(index = value - 1) 123456789101112131415161718192021function solution(A) &#123; for (let i = 0; i &lt; A.length; i++) &#123; if (A[i] &gt; 0 &amp;&amp; A[i] &lt;= A.length &amp;&amp; A[i] !== A[A[i]-1]) &#123; // swap let temp = A[A[i]-1]; A[A[i]-1] = A[i]; A[i] = temp; i--; &#125; &#125; for(let i = 0; i &lt; A.length; i++) &#123; if(A[i] != i + 1) &#123; return i + 1; &#125; &#125; return A.length + 1;&#125;console.log(solution([1, 3, 6, 4, -1, 2])) // 5console.log(solution([1, 2, 3])) // 4console.log(solution([-1, -3])) // 1 Ref: https://leetcode.com/problems/first-missing-positive/discuss/17071/My-short-c++-solution-O(1)-space-and-O(n)-time 01An interval is a pair (A, B) of integers such that A &lt;= B. Two intervals (A, B) and (C, D) overlap if there exists an integer L such that A &lt;= L &lt;= B and C &lt;= L &lt;= D. Intervals that do not overlap are called disjoint. The union of intervals (A, B) and (C, D) is defined as: either a single interval (min(A, C), max(B, D)), when (A, B) and (C, D) overlap, or the intervals (A, B) and (C, D) themselves, when they are disjoint. Taking the union of two intervals is a commutative and associative operation, so itcan be extended to an arbitrary number of intervals. For example, consider the following eight intervals: 123( 1, 5) (12, 15) (42, 44)(70, 72) (36, 36) (-4, 2)(43, 69) (15, 24) Intervals (1, 5) and (-4, 2) overlap and their union is (-4, 5). Intervals (12, 15) and (15, 24) overlap and their union is (12, 24). Intervals (42, 44) and (43, 69) overlap and their union is (42, 69). Intervals (70, 72) and (36, 36) are disjoint and do not overlap with other intervals. The union of all eight intervals consists of the following five pairwise disjoint intervals: 12(-4, 5) (12, 24) (42, 69)(70, 72) (36, 36) Write a function: function solution(A, B); that, given two zero-indexed arrays A and B consisting of N elements each, returns the number of pairwise disjoint intervals constituting the union of N intervals described by arrays A and B. The K-th interval, where K is an integer within the range [0..(N - 1)], is defined as (A[K], B[K]). For example, given the following arrays A and B consisting of eight elements each: 123A[0] &#x3D; 1 A[1] &#x3D; 12 A[2] &#x3D; 42A[3] &#x3D; 70 A[4] &#x3D; 36 A[5] &#x3D; -4A[6] &#x3D; 43 A[7] &#x3D; 15 123B[0] &#x3D; 5 B[1] &#x3D; 15 B[2] &#x3D; 44B[3] &#x3D; 72 B[4] &#x3D; 36 B[5] &#x3D; 2B[6] &#x3D; 69 B[7] &#x3D; 24 the function should return 5, because the intervals described by these arrays correspond to the example above. Assume that: N is an integer within the range [0..100,000]; each element of arrays A, B is an integer within the range [-1,000,000,000..1,000,000,000]; A[K] &lt;= B[K] for integers K within the range [0..(N - 1)]. Complexity: expected worst-case time complexity is O(N*log(N)); expected worst-case space complexity is O(N), beyond input storage (not counting the storage required for input arguments). 01 JS參考解 依區間起始值，由小而大排序 排完之後會有個特性: 若第n的區間和n-1的區間不相交，那麼n+1的區間和第n-1的區間也不相交 若目前stack top的區間和當前區間不相交，就直接push 若目前stack top的區間和當前區間相交(只需考慮區間結束值)，就合併區間 12345678910111213141516171819202122232425262728293031function Interval(x, y) &#123; this.x = x; this.y = y;&#125;function solution(A, B) &#123; var intervals = []; for (let i = 0; i &lt; A.length; i++) &#123; intervals.push(new Interval(A[i], B[i])); &#125; intervals.sort((intervalA, intervalB) =&gt; intervalA.x - intervalB.x); var stack = []; stack.push(intervals[0]); for (let i = 1, j = 0; i &lt; intervals.length; i++) &#123; if (intervals[i].x &gt; stack[j].y) &#123; stack.push(intervals[i]); j++; &#125; else if (intervals[i].y &gt; stack[j].y) &#123; stack[j].y = intervals[i].y; &#125; &#125; return stack.length;&#125;var A = [1, 12, 42, 70, 36, -4, 43, 15];var B = [5, 15, 44, 72, 36, 2, 69, 24];console.log(solution(A, B)); // 5 Ref: https://www.geeksforgeeks.org/merging-intervals/ 03A chessboard consisting of N rows and M columns is given. Each square of the board is either empty or blocked. A knight is a chess piece that perform the following moves in one turn: two squares up and one square left; two squares up and one square right; one square up and two squares left; one square up and two squares right; one square down and two squares left; one square down and two squares right; two squares down and one square left; two squares down and one square right. The number of possible moves can be reduced if the knight would fall off the board or if the destination square is blocked. The board can be described by a zero-indexed matrix consisting of N rows and M columns of integers. A square of the board is empty if its corresponding matrix element has value 0 and blocked if its corresponding matrix element has value 1. For example, consider the following matrix A consisting of four rows and three columns: 1234A[0][0] &#x3D; 0 A[0][1] &#x3D; 0 A[0][2] &#x3D; 0A[1][0] &#x3D; 0 A[1][1] &#x3D; 0 A[1][2] &#x3D; 1A[2][0] &#x3D; 1 A[2][1] &#x3D; 0 A[2][2] &#x3D; 0A[3][0] &#x3D; 0 A[3][1] &#x3D; 0 A[3][2] &#x3D; 0 Consider a knight standing on the upper-left square. It requires seven turns to move to the lower-right square: in the first turn the knight moves from square (0, 0) to square (2, 1); in the second turn the knight moves from square (2, 1) to square (0, 2); in the third turn the knight moves from square (0, 2) to square (1, 0); in the fourth turn the knight moves from square (1, 0) to square (2, 2); in the fifth turn the knight moves from square (2, 2) to square (3, 0); in the sixth turn the knight moves from square (3, 0) to square (1, 1); in the seventh turn the knight moves from square (1, 1) to square (3, 2). Note that a shorter path of length three exists, but the knight cannot take it because some of the squares along this path are blocked. Write a function: function solution(A); that, given a zero-indexed matrix A consisting of N rows and M columns describing chessboard, returns the minimum number of turns that the knight requires to move from the upper-left square to the lower-right square. The function should return -1 if it is impossible for the knight to move from the upper-left square to the lower-right square. Assume that: N and M are integers within the range [1..1,000,000]; the number of elements in matrix A is within the range [1..1,000,000]; each element of matrix A is an integer that can have one of the following values: 0, 1; A[0][0] = A[N-1][M-1] = 0 For example, given matrix A consisting of four rows and three columns such that: 1234A[0][0] &#x3D; 0 A[0][1] &#x3D; 0 A[0][2] &#x3D; 0A[1][0] &#x3D; 0 A[1][1] &#x3D; 0 A[1][2] &#x3D; 1A[2][0] &#x3D; 1 A[2][1] &#x3D; 0 A[2][2] &#x3D; 0A[3][0] &#x3D; 0 A[3][1] &#x3D; 0 A[3][2] &#x3D; 0 the function should return 7, as explained in the example above. Complexity: expected worst-case time complexity is O(N*M); expected worst-case space complexity is O(N*M). 03 JS參考解 BFS，優先走到終點的就是最短路徑了 用queue存每步的所有情況 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function initRecord(N, M) &#123; let arr &#x3D; []; for (let i &#x3D; 0; i &lt; N; i++) &#123; arr.push([]); for (let j &#x3D; 0; j &lt; M; j++) &#123; arr[i].push(false); &#125; &#125; arr[0][0] &#x3D; true; return arr;&#125;function Move(x, y, step) &#123; this.x &#x3D; x; this.y &#x3D; y; this.step &#x3D; step;&#125;function solution(A) &#123; const N &#x3D; A.length; const M &#x3D; A[0].length; let record &#x3D; initRecord(N, M); let dir &#x3D; [ [2, -1], [2, 1], [1, -2], [1, 2], [-1, -2], [-1, 2], [-2, -1], [-2, 1] ]; let queue &#x3D; [new Move(0, 0, 0)]; while (queue.length &gt; 0) &#123; let now &#x3D; queue.shift(); if (now.x &#x3D;&#x3D; N - 1 &amp;&amp; now.y &#x3D;&#x3D; M - 1) &#123; return now.step; &#125; for (let i &#x3D; 0; i &lt; dir.length; i++) &#123; let mx &#x3D; dir[i][0] + now.x; let my &#x3D; dir[i][1] + now.y; if (mx &gt;&#x3D; 0 &amp;&amp; mx &lt; N &amp;&amp; my &gt;&#x3D; 0 &amp;&amp; my &lt; M &amp;&amp; (A[mx][my] !&#x3D; 1) &amp;&amp; (record[mx][my] &#x3D;&#x3D; false)) &#123; record[mx][my] &#x3D; true; queue.push(new Move(mx, my, now.step + 1)); &#125; &#125; &#125; return -1;&#125;var A &#x3D; [ [0, 0, 0], [0, 0, 1], [1, 0, 0], [0, 0, 0],];console.log(solution(A)); &#x2F;&#x2F; 7 Ref: https://www.geeksforgeeks.org/minimum-steps-reach-target-knight/","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"Algorithm","slug":"資訊技術/Algorithm","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.comicat.me/tags/Algorithm/"}]},{"title":"Auto deploy from GitHub using AWS CodeDeploy","slug":"Auto-deploy-from-GitHub-using-AWS-CodeDeploy","date":"2017-12-18T03:15:09.000Z","updated":"2022-09-21T12:38:17.168Z","comments":true,"path":"2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/","link":"","permalink":"https://blog.comicat.me/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/","excerpt":"以下步驟會透過aws web console操作。 本篇使用個人的專案為實驗，僅供參考。 流程摘要 建立IAM user, role, policy 建立EC2, 安裝codedeploy-agent 建立專案部署設定檔appspec.yml 建立code deploy application 手動透過code deploy部署一個GitHub專案 建立自動從GitHub通知部署的服務","text":"以下步驟會透過aws web console操作。 本篇使用個人的專案為實驗，僅供參考。 流程摘要 建立IAM user, role, policy 建立EC2, 安裝codedeploy-agent 建立專案部署設定檔appspec.yml 建立code deploy application 手動透過code deploy部署一個GitHub專案 建立自動從GitHub通知部署的服務 建立IAM user, role, policy 參考 http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html 如果要規範特定region存取，可以edit Trust Relationship中的service設定 建立EC2, 安裝codedeploy-agent 起一台amazon linux ami t2 micro，記得加個tag Name 參考 http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html 順便環境建置及設定 之後codedeploy會用root執行，所以環境設定時注意一下 建立專案部署設定檔appspec.yml 參考 http://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html，將檔案放在專案根目錄 YAML格式非常嚴謹，必須確保縮排及空格都要符合規範，不需要用的區塊要整個註解掉或移除 CodeDeploy會先將專案放置在某個暫存資料夾(source)再移到你所設定的目的地(destination) CodeDeploy會有幾個重要的階段 ApplicationStop -&gt; BeforeInstall -&gt; AfterInstall -&gt; ApplicationStart，可以在這些階段中設定要執行的script，install指的是複製專案到目的地的動作。 ApplicationStop : 在下載新的commit前會先跑stop，所以這時執行的是當前(舊版)的stop script，第一次部屬因為沒有舊版stop script所以沒有執行任何東西。 BeforeInstall : 在安裝前時期 AfterInstall : 在安裝後的時期 ApplicationStart : 啟動程序時期 建立code deploy application 到CodeDeploy點選，create application 參考 http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/applications-create.html 使用Tag Name選擇前面起的EC2 選擇前面設定的CodeDeployRole Advanced中可以設定部署失敗是否要rollback 手動透過code deploy部署一個GitHub專案 Create deployment Repository type選擇from !GitHub，輸入GitHub的代稱，如果登入的GitHub沒有連結aws過，會要求一個認證，點選即可。 輸入完整的Repository名稱(帳戶名稱/專案名稱)，這裡似乎只能用master branch 完整的commit ID 確認上面的流程都可以順利運作之後，再來加入自動通知部屬的服務，務必連續部署幾次查看，有時候在applicationStop時期會有exit 0的錯誤，目前尚不知道原因為何，但通常是跑script或初次部屬就失敗，這時候再推新版也無法成功，只能重建一個新的deploy application。(通常也會是因為applicationStop時其會執行舊版appspec和script有關，所以永遠離不開錯誤的script，進機器修改舊版暫存檔也許可以改善，但沒試過) 建立自動從GitHub通知部署的服務 auto deploy 可以直接參考這篇後半，https://crypt.codemancers.com/posts/2016-12-26-autodeploy-from-github-using-aws-codedeploy/ 建立IAM user的policy時，必須注意其中的APPLICATION_NAME和DEPLOYMENT_GROUP，要和我們建立的名稱一樣，不然github就存取不到了 產生一組IAM user的Access key，記得複製 到github帳號的settings -&gt; Developer settings -&gt; Personal access tokens產生一組token，並且勾選repo:status和repo_deployment，記得複製token 到專案的settings -&gt; Integrations &amp; services -&gt; Add service，總共要加入兩個服務AWS CodeDeploy EditDelete和GitHub Auto-Deployment，各別填上相應的資訊就是了，剛剛的access key, github token都是在這裡使用 接下來嘗試push commit，如果兩個服務都有順利運行就會有綠色勾勾，反之則會有驚嘆號的標示 github服務過了之後流程就會到codedeploy這邊， 登入後在CodeDeploy deployments頁面查看是否有部署動作中 點選deployment ID可以查看詳細的內容 在內容中點選view event可以查看部屬的各個流程情況，如果失敗可以知道是哪個流程，也會有一些logs可以看 如果logs仍然不夠清楚知道失敗的點，可能就必須要進ec2中查看了，可以參考這篇 http://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance 以上就是一個簡單的從github串連aws codedeploy的部署流程，並只部到一台機器上，在撰寫script時要非常注意，在這個地方我出錯非常多次。 issue 如果要搭配github branch可能需要用aws codepipeline 自動部屬似乎沒辦法設定overwrite模式(手動部屬可以)，所以會導致install流程時檔案重複而失敗，目前我是在install前先rm整個專案，留空給他重新部 AWS CodeDeploy 的 File already exists at location 理解 參考資料 Autodeploy from github using AWS CodeDeploy AWS CodeDeploy-Welcome Codedeploy-agent-operations-install-linux AWS-CodeDeploy-Github-File-Already-Exist Add Support for “Overwrite” instruction in appspec.yml “Files” section AWS 的 CodeDeploy 是如何做 「部署」的 Integrating AWS CodeDeploy with GitHub AWS CodeDeploy 會使用舊的 appspec.yml 進行 deploy 的問題","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"AWS","slug":"資訊技術/AWS","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/AWS/"}],"tags":[{"name":"AWS","slug":"AWS","permalink":"https://blog.comicat.me/tags/AWS/"},{"name":"Deploy","slug":"Deploy","permalink":"https://blog.comicat.me/tags/Deploy/"}]},{"title":"PHP - Redis","slug":"PHP-Redis","date":"2017-11-23T02:56:26.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/11/23/PHP-Redis/","link":"","permalink":"https://blog.comicat.me/2017/11/23/PHP-Redis/","excerpt":"Redis是一個BSD開源的key-value快取資料庫，可以保持資料的持久度，有支援多種的資料結構可以儲存","text":"Redis是一個BSD開源的key-value快取資料庫，可以保持資料的持久度，有支援多種的資料結構可以儲存 windows的執行檔可以從這裡找到 https://github.com/MicrosoftArchive/redis/releases 解壓縮之後可以使用指令redis-server redis.windows.conf來啟動一個本機的redis server，預設起在port 6379，沒有連線密碼 常用指令 redis-cli是操作的client interface redis-cli -h 127.0.0.1 連接到本機的redis，預設連port 6379，也可以連接到別的host，如果沒有設密碼驗證的話 get, set指令可以用來存放或讀取資料，當你打出指令的時候，redis-cli會很貼心的提示後面的參數要放什麼 info keyspace指令可以列出全部的redis db和其中的key數量 select可以切換到不同的index，如果沒有select預設會使用index 0 keys *列出所有key，星號可以用其他的pattern代替 使用PHP存取redis當然，會需要一個redis extension 連線123$redis = new Redis();$redis-&gt;connect(host, port); select db1$redis-&gt;select(index); get something1$result = $redis-&gt;get(key); set something1$redis-&gt;set(key, data, expire); get keys1$keys = $redis-&gt;keys('*'); 參考資料 http://www.runoob.com/redis/redis-tutorial.html https://github.com/phpredis/phpredis","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Storage","slug":"Storage","permalink":"https://blog.comicat.me/tags/Storage/"},{"name":"Redis","slug":"Redis","permalink":"https://blog.comicat.me/tags/Redis/"}]},{"title":"Google Chrome Puppeteer入門筆記","slug":"Google-Chrome-Puppeteer入門筆記","date":"2017-11-22T09:12:21.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/11/22/Google-Chrome-Puppeteer入門筆記/","link":"","permalink":"https://blog.comicat.me/2017/11/22/Google-Chrome-Puppeteer%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98/","excerpt":"Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome. 官方GitHub: https://github.com/GoogleChrome/puppeteer Puppeteer 最低支援到Node v6.4，但是官方提供的範例必須要使用Node v7.6以上，目前Node穩定版已經推到v8，所以我裝v8.8.1 在專案中npm i puppeteer就可以安裝 主要是基於chromium來模擬各種動作，","text":"Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome. 官方GitHub: https://github.com/GoogleChrome/puppeteer Puppeteer 最低支援到Node v6.4，但是官方提供的範例必須要使用Node v7.6以上，目前Node穩定版已經推到v8，所以我裝v8.8.1 在專案中npm i puppeteer就可以安裝 主要是基於chromium來模擬各種動作， 以下提供幾個功能程式片段: 截圖1234567891011121314151617181920212223const puppeteer = require(\"puppeteer\");var screenshot = async(url, filename) =&gt; &#123; // 啟動瀏覽器 const browser = await puppeteer.launch(&#123; headless: false &#125;); // 開新分頁 const page = await browser.newPage(); // 連接url await page.goto(url); // 設定可視區域大小 await page.setViewport(&#123; width: 1024, height: 768 &#125;); await page.screenshot(&#123; path: \"screenshot/\" + filename &#125;); browser.close();&#125;;screenshot(\"url\", \"screenshot.png\"); 爬資料12345678910111213141516171819202122const puppeteer = require(\"puppeteer\");var scrape = async(url, selector) =&gt; &#123; const browser = await puppeteer.launch(&#123; headless: false &#125;); const page = await browser.newPage(); await page.goto(url); const data = await page.evaluate((selector) =&gt; &#123; const dom = document.querySelector(selector); return dom ? dom.textContent : null; &#125;, selector); browser.close(); return data;&#125;;scrape(\"url\", \"selector\").then((data) =&gt; &#123; console.log(data);&#125;); Proxy1234const browser = await puppeteer.launch(&#123; headless: false, args: [ '--proxy-server=HOST:PORT' ]&#125;); 輸入表單(type)12await page.type('selector', data);await page.click('selector_submit'); 上傳檔案(Upload dialog)1234let filePaths = [filePath1, filePath2, ...];// 選取上傳檔案的元件let uploadElement = await page.$('selector');await uploadElement.uploadFile(...filePaths); issue部分網頁在headless模式遇到Error: Navigation Timeout Exceeded: 30000ms exceeded的話， 可以試試看不載入font, css, js, image等不需要的文件 https://github.com/GoogleChrome/puppeteer/issues/1913#issuecomment-361224733 參考文件 api-doc: https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md https://github.com/ebidel/try-puppeteer","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"NodeJS","slug":"資訊技術/NodeJS","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/NodeJS/"}],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://blog.comicat.me/tags/NodeJS/"},{"name":"Puppeteer","slug":"Puppeteer","permalink":"https://blog.comicat.me/tags/Puppeteer/"}]},{"title":"Yii framework - Memcache","slug":"Yii-framework-Memcache","date":"2017-10-26T10:35:22.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/26/Yii-framework-Memcache/","link":"","permalink":"https://blog.comicat.me/2017/10/26/Yii-framework-Memcache/","excerpt":"memcached是一套分散式的快取系統，但server間並不互相同步，而是由client端去做分散存取(hash計算)，存資料時hash算出要存的server，取資料時用相同的hash算法指到要讀的server 用key-value的方式儲存資料 memcache有LRU機制(Least Recently Used)，會在內部儲存空間不足時自動讓較少使用到的資料失效(expire)，讓新的資料可以覆蓋到該空間上","text":"memcached是一套分散式的快取系統，但server間並不互相同步，而是由client端去做分散存取(hash計算)，存資料時hash算出要存的server，取資料時用相同的hash算法指到要讀的server 用key-value的方式儲存資料 memcache有LRU機制(Least Recently Used)，會在內部儲存空間不足時自動讓較少使用到的資料失效(expire)，讓新的資料可以覆蓋到該空間上 http://qianshangding.iteye.com/blog/2259411 閱讀連結官網: memcached.org經典名著: memcached全面剖析.pdfwindows版執行檔: window-install-memcachedPHP memcache extension api: class.memcache.php Getting start官方沒有提供windows版的memcached，所以只好找別人編好的執行檔來跑， 我用x86 1.4.4版，打開啟動memcached.exe，預設就會在localhost:11211啟動了 memcached -help可以查看指令， memcached可以直接telnet登入，telnet 127.0.0.1 11211後，下stats指令可以看到一些memcache的狀態，也可以直接在上面操作存取資料 PHP memcache使用PHP操作memcache需要裝memcache extension，之前使用Yii時也用工具檢查過了，就不多說，用的是3.0.8版。 直接使用PHP來操作(也可以參考文末) 1234$memcache = new Memcache;$memcache-&gt;addServer('localhost');$memcache-&gt;set('a', 'apple');echo $memcache-&gt;get('a'); // apple addServer是將一個memcache server加入到MemcachePool，但實際上並不會連線，而是真正要執行須要連線的指令時才執行，所以該動作通常都不會出錯，回傳1 都沒有addServer到MemcachePool中就操作，會得到No servers added to memcache connection in警告 執行其它動作(像是get, set時)，如果memcache server沒有啟動會警告，然後是一堆亂碼我也不知道為啥..，不過錯誤代號通常會是(10060)或(10061)或無法連線，因為目標電腦拒絕連線。，然後似乎沒有一個比較好的api來檢測server是不是啟動中… 折衷的辦法，github找到有人是用connect()來判斷，所以稍微改一下是這樣 1234$isMemcacheAvaliable = @$memcache-&gt;connect('localhost');if (!$isMemcacheAvaliable) &#123; die('Memcache Not Avaliable.');&#125; connect()方法是直接去連某台memcache server，然後那台如果shutdown，依然會出1006x的警告，所以我們就用@把訊息弄掉，這時因為連接失敗所以$isMemcacheAvaliable false，就可以抓出failed的那台機器了 $memcache-&gt;getVersion();拿到的版本資訊是1.4.4-14-g9c660c0 在Yii裡面，如果有上述情況，頁面會直接噴掉去錯誤頁(500 server internel error)，有開debug模式會告訴你正是在urlManager嘗試要去存取cache時錯誤的。錯誤點在CMemCache::getValue()，使用memcache的get()那行，可以自行改善這個問題 在Yii config components中的配置12345678910111213141516171819'cache' =&gt; [ 'class' =&gt; 'CMemCache', 'useMemcached' =&gt; false, 'keyPrefix' =&gt; '', 'hashKey' =&gt; false, 'serializer' =&gt; false, 'servers' =&gt; [ [ 'host' =&gt; 'xxxx', 'port' =&gt; '11211', 'weight' =&gt; '50', ], [ 'host' =&gt; 'xxxx', 'port' =&gt; '11212', 'weight' =&gt; '50', ], ], ], useMemcached預設是關的 servers預設是空的，會預設用localhost keyPrefix(key加前綴字，預設是用Yii::app()-&gt;getId()的結果當前綴), hashKey(key做md5), serializer這三項是yii預設開啟的，要用原始的標準可以都關掉 serializer序列化資料 weight可以設定該server的權重，這對memcache在做hash計算去找server時會有影響 Yii 操作 memcacheYii::app()-&gt;getComponent(&#39;cache&#39;)或Yii::app()-&gt;cache取得CMemCache實體(extends CCache) CMemCache::getMemCache()取得Memcache實體(原始的那個，可以呼叫原生方法) 但yii在CCache中有實作get, set等方法，所以透過CMemCache實體呼叫get(), set()也可以存取資料(實際上也是去呼叫原生方法) flush()與delete()memcache中可以設定expire讓資料在特定時間”失效” flush()方法可以讓整個memcache中的資料都失效 delete()則是刪除某筆資料 兩者原理略有不同 Important note 如果使用了connect疑似會造成MemcachePool被清空(? addServer方法的參數有這些，一定要依照格式填寫!! 1bool Memcache::addServer ( string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]] ) Yii的memcache預設值在CMemCacheServerConfiguration類別中(同樣放在CMemCache) 12345678910111213public $host;public $port=11211;public $persistent=true;public $weight=1;public $timeout=15;public $retryInterval=15;public $status=true; 如果config有設就會用config的值取代掉， 很重要的一點是你存值時的設定都會影響到hash計算，所以取值時也要用一模一樣的設定，才能保證取的到值(如果只有連一台就沒差)，疑似連addServer的順序都會有影響，當然如果存值後增減server也可能會導致hash計算指不到正確的server!!!!!!! memcache getAvaliableServers 程式參考12345678910111213141516171819function getAvaliableServers($servers)&#123; $memcache = new Memcache; $avaliableServers = []; foreach ($servers as $server) &#123; $isMemcacheAvaliable = @$memcache-&gt;connect($server['host'], $server['port']); $memcache-&gt;close(); if ($isMemcacheAvaliable) &#123; array_push($avaliableServers, $server); &#125; &#125; return $avaliableServers;&#125;$avaliableServers = getAvaliableServers($servers);if (count($avaliableServers) === 0) &#123; die('Memcache Not Avaliable.');&#125; stats指令查看到的一些參數說明 pid: 該程式執行的PID uptime: 啟動後的總執行秒數 time: 當前的timestamp pointer_size: 32位元或64位元 curr_connection: 當前的開放的連接數 total_connection: 啟動後打開的總連接束 cmd_get: 執行get命令的總數 cmd_set: 執行set命令的總數 cmd_flush: 執行flush命令的總數 xxx_misses: 執行xxx命令未命中的總數 xxx_hits: 執行xxx命令命中次數 cas_badval: 使用擦拭次數(? bytes_read: 從網路讀取的總位元組數 bytes_written: 傳送的總位元組數 limit_maxbytes: 可儲存的最大位元組數 accepting_conns: 目前接受的連接數 threads: 執行緒數 conn_yields: 連線主動放棄的數量 bytes: 當前儲存資料佔的大小 curr_items: 當前儲存的項目數量 total_items: 啟動以來儲存的項目數量 evictions: 被LRU算法釋放掉的項目數量","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"},{"name":"Memcache","slug":"Memcache","permalink":"https://blog.comicat.me/tags/Memcache/"}]},{"title":"Yii framework - UrlManager","slug":"Yii-framework-UrlManager","date":"2017-10-20T10:24:35.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/20/Yii-framework-UrlManager/","link":"","permalink":"https://blog.comicat.me/2017/10/20/Yii-framework-UrlManager/","excerpt":"UrlManager主要用來解析URL route，有兩種格式可以設定 get: 用query string指定route(/?r=controllerID/actionID) path: 在URL中指定route(/controllerID/actionID)","text":"UrlManager主要用來解析URL route，有兩種格式可以設定 get: 用query string指定route(/?r=controllerID/actionID) path: 在URL中指定route(/controllerID/actionID) 在config中可以設定，沒有指定的話get是預設格式 12345678\"components\" =&gt; array( 'urlManager' =&gt; array( 'urlFormat' =&gt; 'path', 'rules' =&gt; array( // 格式化規則 ), ),), CWebApplication::processRequest()$route = $this-&gt;getUrlManager()-&gt;parseUrl($this-&gt;getRequest()); CApplication::getUrlManager()return $this-&gt;getComponent(&#39;urlManager&#39;); 在getComponent()，如果在應用程式中urlManager沒有被建立，這時會createComponent， 這邊插一下createComponent($config)，這邊傳入的config其實是從建立CWebApplication物件時configure()後的__componenetConfig中取出的對應內容(__componentConfig[&#39;urlManager&#39;])，這個陣列其中就包含了該id對應的class以及我們在config中設定的urlFormat, showScript, rules…等等。 createComponent()在YiiBase中定義，進去之後會依照class的名稱去import(Yii的import)檔案，new出對應的物件，並且foreach從傳入的config直接$object-&gt;$key=$value;(直接改物件的public參數或是call __set()) 最後回傳物件。 接下來會有個init()的過程(call CUrlManager::init())， 12parent::init();$this-&gt;processRules(); CUrlManager的父類別是CApplicationComponent，在這裡的init()有兩件事 attachBehavoirs (預設behaviors是空陣列) set _initialized = true (有個public getIsInitialized()方法可以調用) processRules() rules為設定或是urlFormat = ‘get’，直接return 先檢查cache中是否有已解析的route，有就回傳它 再來才是foreach解析每條rule 12foreach($this-&gt;rules as $pattern =&gt; $route) $this-&gt;_rules[] = $this-&gt;createUrlRule($route,$pattern); createUrlRule()中會先判斷使否有指定class，沒有的話會使用預設的CUrlRule($this-&gt;urlRuleClass)，然後依照傳入的route, pattern回傳CUrlRule實體。(CUrlRule定義在CUrlManager.php中) 將解析好的route存入cache rulerules可以直接以&#39;pattern&#39; =&gt; &#39;route&#39;的格式定義，或是&#39;pattern&#39; =&gt; [&#39;route&#39;]陣列中選填一些參數，urlSuffix, caseSensitive, defaultParams, matchValue rules中可以使用&lt;ParamName&gt;來包含一個參數，並且可以使用:加入regex，格式是這樣&lt;ParamName:ParamRegex&gt;，且該參數會直接套用到GET定義的屬性中。 e.g.: 將該controller指定為該位置的參數，並且要求符合文數字格式([A-Za-z0-9_]) &lt;controller:\\w+&gt; 拿之前的計算範例來改，math路徑下要求符合一個數字a，任意四種action，一個數字b。符合該規則的route會對應到相應的四種math/actionID，a,b 會直接被帶進GET對應的參數。 1'math/&lt;a:\\d+&gt;&lt;action:(add|div|mul|sub)&gt;&lt;b:\\d+&gt;' =&gt; 'math/&lt;action&gt;' 使用.htaccess隱藏index.php一般我們在url路徑中需要包含index.php(尤其是在urlFormat = path時)，但是這樣非常麻煩而且不友善 所以我們可以在index.php入口的同層路徑中加入.htaccess檔案 確認httpd.conf有LoadModule rewrite_module modules/mod_rewrite.so 確認httpd.conf須設定AllowOverride ALL，表示允許該檔案的設定可以被覆寫(要開對地方，xampp的話是在&lt;Directory &quot;C:/xampp/htdocs&quot;&gt;的那個設定裡) 12345678910111213# 啟用FollowSymLinksOptions +FollowSymLinksIndexIgnore *&#x2F;*# 啟用rewrite功能RewriteEngine on# 請求的檔案 資料夾都不存在RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-d# forward到index.php這隻檔案RewriteRule . index.php 參考資料 http://www.yiichina.com/doc/guide/1.1/topics.url http://blog.xiayf.cn/2014/11/12/read-yii-code-2/","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - CActiveForm Widget(實作篇)","slug":"Yii-framework-CActiveForm-Widget-實作篇","date":"2017-10-19T09:50:18.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/19/Yii-framework-CActiveForm-Widget-實作篇/","link":"","permalink":"https://blog.comicat.me/2017/10/19/Yii-framework-CActiveForm-Widget-%E5%AF%A6%E4%BD%9C%E7%AF%87/","excerpt":"這邊不會詳述關於CActiveForm(extends CWidget)的背後實作，不過可以大致說它是一個集成了各種表單常用的功能，並且封裝成一個物件的小工具，內部同樣包含了許多CHTML類別的調用 參考資料: http://www.yiichina.com/doc/api/1.1/CActiveForm 這邊我想直接使用CActiveForm造一個簡單的二元數字加減乘除(但要不同頁面)，","text":"這邊不會詳述關於CActiveForm(extends CWidget)的背後實作，不過可以大致說它是一個集成了各種表單常用的功能，並且封裝成一個物件的小工具，內部同樣包含了許多CHTML類別的調用 參考資料: http://www.yiichina.com/doc/api/1.1/CActiveForm 這邊我想直接使用CActiveForm造一個簡單的二元數字加減乘除(但要不同頁面)， 先簡述一下mvc架構 MathController extends CController: 這邊要負責導去不同的action，沒給action預設依然會進index MathForm extends CFormModel: 這邊建立關於傳入參數的資料模型，寫rules()驗證合法的數字格式 views 一個math layout用於整體html架構 一個index view首頁內容，可以連結到各個action頁面 一個math view建立CActiveForm Widget，並且可以呈現主要的輸出入結果和錯誤提示 MathAction extends CAction(component): 因為每個加減乘除action的run()都一樣，所以就開了一個component來放共同方法 action另外寫成class並extends MathAction，由MathController actions()統一處理 controllerID: math actionID: add, sub, mul, div MathController extends CController指定layouts\\math_layout.php為layout輸出檔，然後將加減乘除的各個action導去不同的路徑， 這裡的application是根據我們的config設定而來的別名，指的是protected資料夾 12345678910111213141516171819class MathController extends Controller&#123; public function actions() &#123; $this-&gt;layout = 'math_layout'; return [ 'add' =&gt; 'application.controllers.math.addAction', 'sub' =&gt; 'application.controllers.math.subAction', 'mul' =&gt; 'application.controllers.math.mulAction', 'div' =&gt; 'application.controllers.math.divAction', ]; &#125; public function actionIndex() &#123; $this-&gt;layout = 'math_layout'; $this-&gt;render('index'); &#125;&#125; MathForm extends CFormModel這裡定義a, b來存放輸入的兩個參數，並定義了驗證規則， 這個驗證規則會統一用在前端跟後端的驗證上(後面會提到) 123456789101112class MathForm extends CFormModel&#123; public $a; public $b; public function rules() &#123; return [ ['a, b', 'numerical'], ]; &#125;&#125; math view在這裡的$this指的是MathController實體，或用Yii::app()也可以拿到 $this-&gt;action-&gt;id;可以取得目前的actionID，實際上是$this-&gt;getAction()-&gt;getId(); $this-&gt;id;可以取得目前的controllerID，實際上是$this-&gt;getId(); 建立一個widget使用CActiveForm，啟用client驗證，設定要focus的欄位 建立兩個textField輸入框和一個submit button 123456789101112131415161718&lt;?php$form = $this-&gt;beginWidget('CActiveForm', array( 'id' =&gt; 'math-form', 'enableClientValidation' =&gt; true, 'focus' =&gt; array($model, 'a'),));&lt;div class=\"row submit\"&gt; &lt;?php echo $form-&gt;textField($model, 'a'); ?&gt; &lt;?php echo $sign;?&gt; &lt;?php echo $form-&gt;textField($model, 'b'); ?&gt; &lt;?php echo CHtml::submitButton('Submit'); ?&gt;&lt;/div&gt;&lt;?php echo $form-&gt;error($model,'a'); ?&gt;&lt;?php echo $form-&gt;error($model,'b'); ?&gt;&lt;?php $this-&gt;endWidget(); ?&gt; 而網頁中的一些動態功能則是會由CActiveForm去自動使用jQuery語法和yii自行定義的jQuery工具(jquery.yiiactiveform)來達成 呼叫error()讓它可以在前端驗證錯誤時丟出錯誤訊息，從網頁原始碼中可以看到它帶入了我們之前定義的要驗證numerical，一樣是透過CNumberValidator來生成驗證語法 1234567// because validator's allowEmpty = trueif(jQuery.trim(value)!='') &#123; if(!value.match(/^\\s*[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\s*$/)) &#123; messages.push(\"A must be a number.\"); &#125;&#125; MathAction extends CAction這裡要寫加減乘除共同的run()方法，負責 new MathForm model setAttributes()，把$_POST[&#39;MathForm&#39;]資料塞進model validate()後端驗證輸入資料 透過controller render塞資料給view然後呈現頁面 這裡的$this是各action實體 這render的內容會在math layout的$content塞入 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class MathAction extends CAction&#123; public function run($a = 0, $b = 0) &#123; $show = ''; $result = $this-&gt;calc($a, $b); $model = new MathForm; if (isset($_POST['MathForm'])) &#123; $model-&gt;setAttributes($_POST['MathForm']); if ($model-&gt;validate()) &#123; $a = $model-&gt;a; $b = $model-&gt;b; if (empty($model-&gt;a)) &#123; $a = 0; &#125; if (empty($model-&gt;b)) &#123; $b = 0; &#125; $result = $this-&gt;calc($a, $b); &#125; &#125; $sign = $this-&gt;getSign(); $show = \"$a $sign $b = $result &lt;br&gt;\"; return $this-&gt;getController()-&gt;render('math', ['model' =&gt; $model, 'show' =&gt; $show, 'sign' =&gt; $sign]); &#125; public function getSign() &#123; $signs = [ 'add' =&gt; '+', 'div' =&gt; '/', 'mul' =&gt; '*', 'sub' =&gt; '-', ]; $actionID = $this-&gt;controller-&gt;action-&gt;id; return $signs[$actionID]; &#125; public function calc($a, $b) &#123; return 0; &#125;&#125; 加減乘除action extends MathAction這裡沒幹麻，主要就是各種計算不同所以要覆寫calc()方法，回傳結果 12345678class addAction extends MathAction&#123; public function calc($a, $b) &#123; $result = $a + $b; return $result; &#125;&#125;","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Form","slug":"Yii-framework-Form","date":"2017-10-17T03:45:24.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/17/Yii-framework-Form/","link":"","permalink":"https://blog.comicat.me/2017/10/17/Yii-framework-Form/","excerpt":"使用Yii來建立一個登入表單 model建立在protected\\models下，config需要設定import 動作流程大概是這樣:","text":"使用Yii來建立一個登入表單 model建立在protected\\models下，config需要設定import 動作流程大概是這樣: 進入site/login 在actionLogin中create form data model，catch POST，render login page 1234567891011121314$model = new LoginForm;if (isset($_POST['LoginForm'])) &#123; // collection users data, use CModel setAttributes() $model-&gt;attributes = $_POST['LoginForm']; if ($model-&gt;validate()) &#123; // default to '/' $this-&gt;redirect(Yii::app()-&gt;user-&gt;returnUrl); &#125;&#125;$this-&gt;render('login', ['model' =&gt; $model]); 在LoginForm model中處理資料驗證，覆寫rules() 1234567891011121314public function rules()&#123; return [ // username and password are required // use CRequiredValidator ['username, password', 'required'], // rememberMe needs to be a boolean // use CBooleanValidator ['rememberMe', 'boolean'], // password needs to be authenticated // use method authenticate() ['password', 'authenticate'], ];&#125; 如果驗證都無誤，redirect到user-&gt;returnUrl，預設是’&#39;，可以setReturnUrl()修改 LoginForm model中有用到authenticate()，這個方法是要自己寫的， 用來驗證password的Validator 12345678public function authenticate($attribute, $params)&#123; $this-&gt;_identity = new UserIdentity($this-&gt;username, $this-&gt;password); if (!$this-&gt;_identity-&gt;authenticate()) &#123; $this-&gt;addError('password', 'Invalid Username or Password!'); &#125;&#125; 這邊用一個自訂的class UserIdentity extends CUserIdentity， 繼承自CUserIdentity的authenticate()是需要自行覆寫的，不然預設就是丟一個例外 CUserIdentity中也有預定義一些errorCode的常數可以用 1234567891011121314class UserIdentity extends CUserIdentity&#123; public function authenticate() &#123; if (strlen($this-&gt;password) &lt; 5) &#123; $this-&gt;errorCode = self::ERROR_PASSWORD_INVALID; &#125; else &#123; $this-&gt;errorCode = self::ERROR_NONE; &#125; return !$this-&gt;errorCode; &#125;&#125; 在view中可以使用yii helperCHtml::beginForm()或是widgetbeginWidget(&#39;CActiveForm&#39;)來建立表單，兩種略有不同 程式就直接參考form.view 可以看到建出來的input html是用陣列的形式填充輸入資料 1&lt;input name=\"LoginForm[username]\" id=\"LoginForm_username\" type=\"text\" /&gt; 所以在上面action中我們才能直接使用$_POST[&#39;LoginForm&#39;]取得整個form data並且填進data model中。","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Simple Workflow","slug":"Yii-framework-Simple-Workflow","date":"2017-10-16T09:42:18.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/16/Yii-framework-Simple-Workflow/","link":"","permalink":"https://blog.comicat.me/2017/10/16/Yii-framework-Simple-Workflow/","excerpt":"參考上圖，簡化一個最簡單的Yii workflow index.php整個網站的進入點，主要就是 require YiiBase核心 $app = Yii::createWebApplication($config)，建立一個CWebApplication物件 $app-&gt;run()啟動它","text":"參考上圖，簡化一個最簡單的Yii workflow index.php整個網站的進入點，主要就是 require YiiBase核心 $app = Yii::createWebApplication($config)，建立一個CWebApplication物件 $app-&gt;run()啟動它 Application這裡主要是run()中的processRequest() $route = $this-&gt;getUrlManager()-&gt;parseUrl($this-&gt;getRequest());，建立CHttpRequest物件(request)，建立CUrlManager物件(urlManager)，並且將request傳入urlManager的parseUrl()去處理，拿到controllerID/actionID $this-&gt;runController($route);，根據傳入的route去建立及啟動對應的controller和action Controller、Filters、Actions根據對應的controllerID/actionID分別進入各controller中後 先根據filters()中的return值來呼叫對應的過濾器做存取權限、參數驗證…等，可使用+,-來設定需要使用filter的action filter都通過之後啟動action，會先進入符合actionID的方法，如果沒有會再actions()中找外部的action Views在action中render()要輸出的內容，這時候render會引入layout，並將輸出內容放入$content變數中，包含在layout中echo","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Event","slug":"Yii-framework-Event","date":"2017-10-15T08:39:53.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/15/Yii-framework-Event/","link":"","permalink":"https://blog.comicat.me/2017/10/15/Yii-framework-Event/","excerpt":"下列資料供參考 http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html http://www.php1.cn/article/6396.html http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1 Event事件處理這裡的$this通常為CComponent的子類實例 定義事件，raiseEvent: 啟動事件，觸發CList中所有handler","text":"下列資料供參考 http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html http://www.php1.cn/article/6396.html http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1 Event事件處理這裡的$this通常為CComponent的子類實例 定義事件，raiseEvent: 啟動事件，觸發CList中所有handler 12345public function onFuck($event)&#123; echo 'raiseEvent - onFuck &lt;br&gt;'; $this-&gt;raiseEvent('onFuck', $event);&#125; 為事件加上某個event handler 12345678$handler = function () &#123; echo 'Fuck uuu &lt;br&gt;';&#125;;$this-&gt;getEventHandlers('onFuck')-&gt;add($handler);// detach// $this-&gt;detachEventHandler('onFuck', $handler); 在某處觸發事件 123456// hasEventHandler用來檢查event的CList(_e['onFuck'])是否有被加上event hanlderif ($this-&gt;hasEventHandler('onFuck')) &#123; // raiseEvent $this-&gt;onFuck(new CEvent($this));&#125; issue為事件加上eventHandler有很多寫法 目前還沒瞭解差異在哪 1$this-&gt;onClick = $handler; 1$this-&gt;onClick-&gt;add($handler); 1$this-&gt;attachEventHandler('onClick', $handler); 1$this-&gt;getEventHandlers('onClick')-&gt;add($handler); 12// 加在handler list指定位置，一般預設是放在最後$this-&gt;getEventHandlers('onClick')-&gt;insertAt(0, $handler); 實驗結果看起來上述所有用法都是一樣的結果 可以添加多個handler，也都可以detachEventHandler移除特定的handler 加入重複的hanlder一樣會在CList中累積增加，但detach只會移除一個 比較有趣的是最簡化的寫法$this-&gt;onClick = $handler;乍看之下重複assign好像會覆蓋，但其實不會，與其他效果相同 如果在某handler處理完後不想繼續後面的，可以在傳入handler的事件中設定$event-&gt;handled = true; class CEvent 被放在class CComponent的檔案中，這是一個比較奇怪的點","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - View","slug":"Yii-framework-View","date":"2017-10-13T07:57:51.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/13/Yii-framework-View/","link":"","permalink":"https://blog.comicat.me/2017/10/13/Yii-framework-View/","excerpt":"View單純呈現頁面結果，呼叫CController::render()傳入view id就可以渲染出該頁面。 render()預設會去存取protected/views/ControllerID資料夾。 通常網頁中會有些固定不變的元素(HTML主結構)，這時會拆分出來放在protected/views/layouts下， 而render()時預設會先輸出layouts下的main.php(如果有的話)，這時你要render的內容會被預設放在$content這個變數內，使用&lt;?php echo $content; ?&gt;輸出它","text":"View單純呈現頁面結果，呼叫CController::render()傳入view id就可以渲染出該頁面。 render()預設會去存取protected/views/ControllerID資料夾。 通常網頁中會有些固定不變的元素(HTML主結構)，這時會拆分出來放在protected/views/layouts下， 而render()時預設會先輸出layouts下的main.php(如果有的話)，這時你要render的內容會被預設放在$content這個變數內，使用&lt;?php echo $content; ?&gt;輸出它 1234567891011121314151617181920// CController::render()public function render($view,$data=null,$return=false)&#123; if($this-&gt;beforeRender($view)) &#123; $output=$this-&gt;renderPartial($view,$data,true); if(($layoutFile=$this-&gt;getLayoutFile($this-&gt;layout))!==false) $output=$this-&gt;renderFile($layoutFile,array('content'=&gt;$output),true); $this-&gt;afterRender($view,$output); $output=$this-&gt;processOutput($output); if($return) return $output; else echo $output; &#125;&#125; CWebApplication::layout可以更改預設輸出的layout檔，預設是 = ‘main’ 使用renderPartial()則不會預設輸出layout 在外部action render，要先取得controller物件 $this-&gt;getController()-&gt;render(); 或 $this-&gt;controller-&gt;render(); &lt;?php echo CHtml::encode($this-&gt;pageTitle); ?&gt;可以輸出網站的名稱，預設是config中設定的name加上-加上actionID加上controllerID(像是MyWeb - Hello Site)，但是index不會顯示actionID render()可以帶入要傳入view變數， 直接在render()的第二個參數帶入陣列，name就是要在view中存取的變數名 render(&#39;index&#39;, [name =&gt; $name]); in view: &lt;?php echo $name ?&gt;","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Controller","slug":"Yii-framework-Controller","date":"2017-10-06T03:59:32.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/06/Yii-framework-Controller/","link":"","permalink":"https://blog.comicat.me/2017/10/06/Yii-framework-Controller/","excerpt":"Controller處理使用者發出並經過經過應用呼叫的request ControllerController繼承自CController，但由於可能會有很多Controller，為了提高共用性，可在protected\\components中定義了class Controller extends CController，再由各種情境自行去定義class xxxController extends Controller並存放在protected\\controllers下。 controller執行時會呼叫相對應的action，action會與model溝通並將結果呈現在view上。","text":"Controller處理使用者發出並經過經過應用呼叫的request ControllerController繼承自CController，但由於可能會有很多Controller，為了提高共用性，可在protected\\components中定義了class Controller extends CController，再由各種情境自行去定義class xxxController extends Controller並存放在protected\\controllers下。 controller執行時會呼叫相對應的action，action會與model溝通並將結果呈現在view上。 預設(沒有指定route)的action是index(actionIndex)， CController::defaultAction = &#39;xxx&#39;可以設定預設action 名稱中的Controller後綴和action前綴都是必須的寫法規則! 123456789101112class SiteController extends Controller&#123; public function actionIndex() &#123; echo 'Action Index!'; &#125; public function actionHello() &#123; echo 'Action Hello!!'; &#125;&#125; Route使用者可以透過設定不同的route參數來存取特定的controller和action，參數名稱預設是使用r(CUrlManager::routeVar設定)，參數值由controller前綴詞和action的後綴詞加上/所組成，所以我們要存取上方範例程式中的兩個action，預設狀況的URL大概會長的像這樣site對應到SiteController index.php?r=site/index, index.php?r=site/hello 如果路由長這樣r=a/b/hello，則會自動對應路徑controllers/a下的BController，並呼叫其中的actionHello() 預設大小寫視為不同，但是可以設定CUrlManager::caseSensitive = false;讓大小寫視為相同。 另外參考:http://www.cnblogs.com/JosephLiu/archive/2011/12/26/2301771.html processRequest()前篇有提到，在CWebApplication啟動了應用後呼叫run()，其中包含執行了processRequest()，這時就是在將接到的request依照r參數的不同去建立出不同的controller。 在這裡會先判斷CWebApplication::catchAllRequest是否有被設定，這個通常是用來導向某固定頁面時使用(像是頁面維護中之類的)，正常狀態會建立CUrlManager、ChttpRequset物件，並且透過CUrlManager中的parseUrl方法，處理httpRequest，拿到需要的參數(r) 呼叫createController()傳入r參數，開始解析(用\\切)，將正確的controller id及action id區分開來，建立對應的controller 確認建立完成後，runController()，並且執行對應的action action參數action函數可以直接指定傳入參數，並且會自動從$_GET中綁入(命名需相同)， 函數中的參數如果沒有給預設值，然後又在request找不到對應的參數時，會出現例外錯誤。 傳入參數特別宣告為array的話，會自動將傳入的值轉成陣列形式(放在index 0) actions()actions()可以用來動態指定要執行的動作，也可以讓宣告的動作被重複利用， 將需要複用的動作獨立出來成class，繼承CAction，定義其中的run()方法(action要執行的內容) 在需要的controller中覆寫actions()，並且回傳action name與class action路徑的array-hash表(actions()是預定義在CController中的方法，預設回傳空陣列) 以實作一個簡易計算功能為例，像是我在controllers\\math下定義了兩隻不同的action，一隻做加法一隻做減法 12345678class addAction extends CAction&#123; public function run($a, $b) &#123; $sum = $a + $b; echo $sum; &#125;&#125; 12345678class subAction extends CAction&#123; public function run($a, $b) &#123; $diff = $a - $b; echo $diff; &#125;&#125; 這時我在不同的controller中只要這樣寫，就可以用控制器名稱/add&amp;a=10&amp;b=5和控制器名稱/sub&amp;a=10&amp;b=5來計算10+5和10-5了 1234567public function actions()&#123; return [ 'add' =&gt; 'application.controllers.math.addAction', 'sub' =&gt; 'application.controllers.math.subAction', ];&#125; – Filterfilter可以用來設定動作執行的過濾條件，可以直接在controller中定義一個名稱為filter前綴的方法，也可以另外自己定義一個filter物件(extends CFilter)， $filterChain是一個CFilterChain物件實體，包含了與該動作相關的filter list controller中的filter 12345public function filterTest($filterChain)&#123; // Do something filter $filterChain-&gt;run(); // 呼叫下一個filter執行&#125; 自定義filter class (驗證URL qurey中的參數a, b都是數字) 1234567891011121314151617181920212223class MathFilter extends CFilter&#123; // preFilter()會在action執行前被呼叫 protected function preFilter($filterChain) &#123; $request = Yii::app()-&gt;request; // 取得request物件 $a = $request-&gt;getQuery('a'); // 取出qurey參數值 $b = $request-&gt;getQuery('b'); // 回傳true表示繼續執行下個filter if (is_numeric($a) &amp;&amp; is_numeric($b)) &#123; return true; &#125; // 回傳false表示停止執行下個filter echo 'Invalid query params.'; return false; &#125; // postFilter()會在action執行後被呼叫 protected function postFilter() &#123; &#125;&#125; 在controller中使用filter，覆寫從CController繼承來的filters()方法，回傳一個陣列，包含filter name或路徑(array)，會依照回傳的陣列index的順序呼叫執行 filter可以使用+(只有), -(除外)來表示執行為特定的action過濾，不寫預設為全部的action都會呼叫過濾 1234567891011// 對add, sub, mul, div四個action預執行controllers\\filters下的MathFilter// 再對全部的action預執行filterTestpublic function filters()&#123; return [ [ 'application.controllers.filters.MathFilter + add, sub, mul, div', ], 'test', ];&#125; accessControl在之前文章中我們使用Gii生成的table CRUD controller中，有一個accessRules()，這是給filterAccessControl()(從CController繼承)所使用的，因此我們可以覆寫accessRules()來定義自己的權限控制(預設是空陣列) 123456public function filterAccessControl($filterChain)&#123; $filter = new CAccessControlFilter; $filter-&gt;setRule($this-&gt;accessRules()); $filter-&gt;filter($filterChain);&#125; 這段是table controller中的accessRules() 權限是由上而下逐條檢查的，有符合就不會繼續套用下去* : 表示所有使用者@ : 表示以驗證的使用者? : 表示匿名使用者 所以我們 允許所有使用者都可以執行action index和view 允許以驗證後的使用者才可以執行action create和update 只有admin可以執行action admin和delete 沒有套用到任何權限的使用者不允許任何操作(通常設定這個預防萬一) 當然不只可以設定actions和users參數，可以參考底下網址。 另外參考資料: accessRules() filters","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Entry Script & Basic Application","slug":"Yii-framework-Entry-Script-Basic-Application","date":"2017-10-03T03:41:19.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/03/Yii-framework-Entry-Script-Basic-Application/","link":"","permalink":"https://blog.comicat.me/2017/10/03/Yii-framework-Entry-Script-Basic-Application/","excerpt":"在Yii建出專案資料夾的最上層有個index.php當作應用程式的進入點。 index.php這裡面大概做了幾件事: 定義一些常數(設定值) define vs const require\\framework\\yii.php Yii::createWebApplication($config)-&gt;run();，傳入設定檔並建立一個WebApplication，然後啟動","text":"在Yii建出專案資料夾的最上層有個index.php當作應用程式的進入點。 index.php這裡面大概做了幾件事: 定義一些常數(設定值) define vs const require\\framework\\yii.php Yii::createWebApplication($config)-&gt;run();，傳入設定檔並建立一個WebApplication，然後啟動 framework\\yii.php這個檔案只做兩件事， 判斷Class YiiBase 是否存在，不存在就載入YiiBase.php 12if(!class_exists('YiiBase', false)) require(dirname(__FILE__).'/YiiBase.php'); 定義Class Yii extends YiiBase framework\\YiiBase.php 定義了Yii的一些常數預設值 定義Class YiiBase auto load Yii core classes require base\\interfaces.php 不建議更動及呼叫這個核心檔的東西，使用寫在yii.php的Class Yii比較好。 createWebApplication()就是在這時候被載入的。 Yii::createWebApplication() 接收設定檔，並回傳呼叫createApplication(&#39;CWebApplication&#39;, $config)的結果 Yii::createApplication() 接收要啟用的應用及設定檔，並且回傳依據名稱建立出來對應的應用物件，這裡會建立出一個CWebApplication物件。 – framework\\web\\CWebApplication.php 定義Class CWebApplication extends CApplication framework\\base\\CApplication.php 定義Class CApplication extends CModule CWebApplication物件使用了這裡的__construct()建立，並且從這裡繼承了run()方法。 Application life cycleCWebApplication建立(construct)時大概會發生一些事 呼叫preinit()(從CModule繼承而來)，預先初始化一些模組 呼叫initSystemHandlers()，初始化啟用yii的例外錯誤處理 呼叫registerCoreComponents()，註冊核心組件 coreMessages =&gt; CPhpMessageSource : 提供Yii的核心訊息翻譯，預設是en_us db =&gt; CDbConnection : 提供Database連線，使用時需要設定DSN(Data Source Name) messages =&gt; CPhpMessageSource : 提供Yii的應用程式訊息翻譯 errorHandler =&gt; CErrorHandler : 處理程式中未處理的PHP例外錯誤處理，依據錯誤類型調用適當的view顯示 securityManager =&gt; CSecurityManager : 提供資安相關功能，ex. hash, crypto…等 CStatePersister =&gt; statePersister : 提供全域的狀態維持功能 urlManager =&gt; CUrlManager : 提供URL相關功能 request =&gt; CHttpRequest : 提供http request相關功能 format =&gt; CFormatter : 提供數據顯示格式化功能 呼叫configure($config)(從CModule繼承而來)，載入剛剛傳進來的config 呼叫attachBehaviors($this-&gt;behaviors)(從CComponent繼承而來) 呼叫preloadComponents(從CModule繼承而來) 呼叫init()(從CModule繼承而來並在CWebApplication中有被覆寫) 建立後立即呼叫run() 等待觸發onBeginRequest事件 呼叫processRequest()，處理request、create controller、run controller 等待處發onEndRequest事件 CApplication中定義了abstract public function processRequest();，內容由各子類別自己去實作。 另外參考:http://www.cnblogs.com/JosephLiu/archive/2011/12/19/2292852.html CApplication::__construct() 這裡的$this是指CWebApplication物件 134行: 設定應用程式物件，這樣在應用環境中使用Yii::app()就可以取得該CWebApplication實例 137行: require config 139~145行: 設定basePath 146~159行: 設定了路徑的別名以利使用 161行: yii預留的方法，預設是沒有內容的，需要的話可以自行覆寫 163行: 初始化yii的Exception handler，預設應該是啟用的 164行: 註冊必須的核心模組，registerCoreComponents()最後其實呼叫到了繼承自CModule的setComponent()，將component的實體存入_components中 (???not sure) 166行: 將設定值轉成應用程式實體的屬性，configure()方法繼承自CModule，可以看到他其實是這樣設的$this-&gt;$key=$value;，在存取設定不存在的屬性時，會分別用到CModule中的__get()及CComponent中的__set() 167行: attach application behaviors，大概是個註冊事件集合的概念 168行: 將configure中從main.php中載入的preload component，存入_components中，完成初始化 170行: 呼叫init()，這個方法在CWebApplication中有被覆寫。先跑父層的init()，並且呼叫getRequest(‘request’)。getRequest()使用到CModule中的getComponent()，取得對應的request component實體並回傳。","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework - Gii CRUD","slug":"Yii-framework-Gii-CRUD","date":"2017-10-02T10:06:01.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/10/02/Yii-framework-Gii-CRUD/","link":"","permalink":"https://blog.comicat.me/2017/10/02/Yii-framework-Gii-CRUD/","excerpt":"在使用yiic webapp建立好的網站雛形上，操作Gii web code generator生成CRUD程式。 設定資料庫連線資訊yii framework使用PDO操作資料庫， 在protected\\config\\database.php中設定資料庫連線資訊，預設幫你連到sqlite，這邊我修改成連接到現有的MySQL","text":"在使用yiic webapp建立好的網站雛形上，操作Gii web code generator生成CRUD程式。 設定資料庫連線資訊yii framework使用PDO操作資料庫， 在protected\\config\\database.php中設定資料庫連線資訊，預設幫你連到sqlite，這邊我修改成連接到現有的MySQL 1234567return array( 'connectionString' =&gt; 'mysql:host=localhost;dbname=mydb', 'emulatePrepare' =&gt; true, 'username' =&gt; '*****', 'password' =&gt; '*****', 'charset' =&gt; 'utf8',); Enable Gii要使用Gii，先到protected\\config\\main.php中啟用modules gii(拿掉註解)，並且設個password 連上/index.php?r=gii，輸入密碼後就可以進入gii 介面 Generate Model進入Model Generator，如果連線設定正確的話可以順利進入，反之會有exception畫面， 建立一個table-myguest的model，預覽執行後會在protected\\models生成一個Myguests.php Generate View、Controller進入CRUD Generator，輸入Model Class name，自動新建下列檔案 完成後連上/index.php?r=myguests就可以看到讀取的資料結果 點選manage或進入/index.php?r=site/login，登入之後可到後台進行CUD操作 預設有”demo/demo”, “admin/admin”兩組帳號密碼可以使用，在\\protected\\components\\UserIdentity.php可以看到一些使用者驗證設定，但這邊先不要修改，因為admin這個帳號跟很多隻檔案連動。 登入成功後到index.php?r=myguests/admin，可以看到所有資料並且有操作的功能(操作功能會受限於MySQL登入帳號的權限，如果權限不夠操作後會有alert錯誤) 新增單筆資料(Create) 點選放大鏡查看單筆資料(Read) 點選鉛筆修改單筆資料(Update) 點選刪除單筆資料(Delete)，會跳Alert詢問是否刪除","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"Yii framework安裝","slug":"Yii-framework安裝","date":"2017-09-30T08:30:21.000Z","updated":"2022-09-21T12:38:17.184Z","comments":true,"path":"2017/09/30/Yii-framework安裝/","link":"","permalink":"https://blog.comicat.me/2017/09/30/Yii-framework%E5%AE%89%E8%A3%9D/","excerpt":"因專案需求安裝Yii 1.1 (PHP &gt; 5.1)，在windows上直接下載zip Yii v1.1.19 Download: http://www.yiiframework.com/download/中文參考: http://www.yiichina.com/","text":"因專案需求安裝Yii 1.1 (PHP &gt; 5.1)，在windows上直接下載zip Yii v1.1.19 Download: http://www.yiiframework.com/download/中文參考: http://www.yiichina.com/ Step 解壓縮檔案到自行建立的yii資料夾，我這邊是直接把資料夾放在xampp/htdocs下 連上主機/yii/requirements/可以看到yii提供的伺服器設定檢查，包含PHP版本支援度和php.ini設定、安裝的extension…等。 yii/framework下有yiic指令檔可以執行，可以設定系統環境變數 執行yiic 自動建立一個yii web開啟cmd，cd到要放web的資料夾，執行yiic webapp myweb，自動建立一個網頁應用在myweb資料夾 連線到主機/myweb/，可以看到建立好的範例網站 cd 到建立的web資料夾下(index.php那層)，yiic shell可以進入yii cli模式， 參考: MVC設計模式與Yii Framework簡介","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Yii1.x","slug":"Yii1-x","permalink":"https://blog.comicat.me/tags/Yii1-x/"}]},{"title":"PHP-MongoDB入門使用","slug":"PHP-MongoDB入門使用","date":"2017-09-30T07:02:37.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/09/30/PHP-MongoDB入門使用/","link":"","permalink":"https://blog.comicat.me/2017/09/30/PHP-MongoDB%E5%85%A5%E9%96%80%E4%BD%BF%E7%94%A8/","excerpt":"需要安裝PHP mongo extension 安裝參考: http://www.w3big.com/zh-TW/mongodb/mongodb-install-php-driver.html","text":"需要安裝PHP mongo extension 安裝參考: http://www.w3big.com/zh-TW/mongodb/mongodb-install-php-driver.html connect mongo預設會連接到mongodb://localhost:27017 1$mongo = new MongoClient(); use dbdb不存在會自動產生一個新的，建立一個叫myDB的資料庫 1$db = $mongo-&gt;myDB; show dbs取得所有db的資訊與統計(Array)，空db不會列出來 1$dbs = $mongo-&gt;listDBs(); 最後還有一個totalSize標示出總大小 create collection建立一個叫users的集合 1$collection = $db-&gt;createCollection('users'); show collections取得所有$db中的集合資訊(Array) 1$db-&gt;listCollections(); insert data在集合中插入一筆資料，$data是一個Array 1$collection-&gt;insert($data); find data取得一個MongoCursor Object，必須使用迴圈讀取 1234$cursor = $collection-&gt;find();foreach ($cursor as $data) &#123; print_r($data);&#125; update data把所有id = 1的資料的age更新成25 1$collection-&gt;update(array('id' =&gt; 1), array('$set' =&gt; array('age' =&gt; 25))); remove data1$collection-&gt;remove(); insert() vs save()在mongo shell中直接輸入指令不加括號可以看到執行的函數內容。 insert()是直接插入資料，效率較好 save()會先判斷是否有重複，如果資料存在就呼叫update()，反之insert()","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Storage","slug":"Storage","permalink":"https://blog.comicat.me/tags/Storage/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://blog.comicat.me/tags/MongoDB/"}]},{"title":"XAMPP-MySQL入門使用","slug":"XAMPP-MySQL入門使用","date":"2017-09-25T06:39:09.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/09/25/XAMPP-MySQL入門使用/","link":"","permalink":"https://blog.comicat.me/2017/09/25/XAMPP-MySQL%E5%85%A5%E9%96%80%E4%BD%BF%E7%94%A8/","excerpt":"XAMPP內的MySQL是MariaDB。 How to useXAMPP也內建有資料庫管理工具PhpMyAdmin，啟動MySQL後，在你的主機/phpmyadmin路徑下可以開啟它。","text":"XAMPP內的MySQL是MariaDB。 How to useXAMPP也內建有資料庫管理工具PhpMyAdmin，啟動MySQL後，在你的主機/phpmyadmin路徑下可以開啟它。 當然你也可以用shell登入，不過指令有點多，這邊就先不採用 預設phpmyadmin會使用root直接登入，所以我們來看一點權限設定的部分 XAMPP 5.6.15 修改 MySQL 密碼與 PhpMyAdmin 設定 刪除匿名登入 設定root密碼 修改phpmyadmin設定檔(config.inc.php) 新增操作使用者(避免使用root存取DB) 這樣我們有了root密碼和另一個使用者(寫程式時帳密就變成必填)，而在我們開啟phpmyadmin這時會自動帶入我們剛才設定的config去登入(config預設還是root) 或可以不要在config設密碼然後修改$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;] = &#39;http&#39;;，就可以在開啟phpmyadmin頁面時卡一個使用者登入了 (首頁logo下方有登出可以按) 參考文章: 【教學】Windows下的架站工具 – XAMPP (MYSQL篇) http://140.129.118.16/~richwang/102-2-Courses/DBA/playerinfo-102-2.html (shell) MariaDB的版本資訊 MySQL家族版本圖 MySQL default engine MySQL 5.1之前預設是: MyISAM MySQL 5.5之後預設是: InnoDB (中間的版本好像跳掉了???) MyISAM屬於Table-level-lock，當資料表正在異動時，會整表lock住不能讀取 InnoDB屬於Row-level-lock，當資料表正在異動時，只會lock住有異動的row，其它資料仍然有機會可以讀取 InnoDB還支援了ACID transaction功能 Atomicity(原子性，不可分割性) Consistency(一致性) Isolation(隔離性) Durability(持久性) 參考: MySQL 中，MyISAM 與 InnoDB 帶來的差異 START TRANSACTION(BEGIN)(InnoDB) 預設狀況下，SQL語句都會被立即執行並且提交結果 可以SELECT @@AUTOCOMMIT;查詢這個參數，預設為1 START TRANSACTION;或BEGIN;可以開啟一個交易區塊，表示在COMMIT;指令執行前的SQL執行結果都不會被立即提交出去 意思是當你在中間做新增、刪除、修改…等，在別的連線中都還不會存取到你的結果(但有一些指令會強制造成交易中斷)， 交易中ROLLBACK;指令會讓交易取消，並且回到交易前的狀態。 SET AUTOCOMMIT = 0;這時候自動提交的功能被關閉，所以即使不開啟交易也是會像上面的狀況一樣，必須等到COMMIT;才會將結果提交出去。 查詢autocommit參數 = 1，開啟交易區塊，並且插入一筆資料(3, &#39;Jimmy&#39;)，從另一個連線查看並沒有結果(還沒COMMIT) 參考: http://xyz.cinc.biz/2013/05/mysql-transaction.html https://blog.longwin.com.tw/2006/03/innodb_transaction_2006/ import file to MySQL原先使用phpmyadmin操作csv匯入，但時間實在是太久了(平均一個檔30MB) 後來直接使用shell操作比較有效。 先建好db, table, 各欄位 附上匯入檔案指令(utf8編碼) 1LOAD DATA LOCAL INFILE '檔案路徑名稱' INTO TABLE 完整表格名稱 CHARACTER SET utf8 FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\n';","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Storage","slug":"Storage","permalink":"https://blog.comicat.me/tags/Storage/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blog.comicat.me/tags/MySQL/"},{"name":"XAMPP","slug":"XAMPP","permalink":"https://blog.comicat.me/tags/XAMPP/"}]},{"title":"PHP OOP簡記","slug":"PHP-OOP簡記","date":"2017-09-22T02:33:49.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/09/22/PHP-OOP簡記/","link":"","permalink":"https://blog.comicat.me/2017/09/22/PHP-OOP%E7%B0%A1%E8%A8%98/","excerpt":"OOP三大用法簡介 $this , self, parent __construct() 和 __destruct() 物件複製 abstract 和 interface trait namespace , use , as 用法 spl_autoload_register()","text":"OOP三大用法簡介 $this , self, parent __construct() 和 __destruct() 物件複製 abstract 和 interface trait namespace , use , as 用法 spl_autoload_register() 另外找到還不錯的系列文章 iT邦幫忙: PHP物件導向 https://old-oomusou.goodjack.tw/php/php-namespace/ http://ithelp.ithome.com.tw/users/20000108/ironman/690?page=1 OOP 三大用法簡介 封裝(Encapsulation) : 將功能相近的變數(屬性)、函式(方法)使用類別(class)包裝，使用public、private、protected關鍵字宣告，區分變數及函式的存取權限。 public : 開放物件本身及外部程式使用 private : 限定物件本身使用(通常私有成員會在命名前加上_區別) protected : 限定物件本身及繼承類別使用 繼承(Inheritance) : 類別可以使用extends來繼承父類別的屬性及方法。(PHP不能多重繼承) 123456789101112131415161718class Transportation&#123; public $cost = 100; private $_hasDriver = true; public function run() &#123; echo 'Go!'; &#125;&#125;class Car extends Transportation&#123;&#125;$myCar = new Car();$myCar-&gt;run(); // Go! 繼承後子類別擁有父類別的所有屬性和方法，但可以被重載(overloading) 多型(Polymorphism) : 基於同一個class或interface可以去定義不同的class並實作 $this , self, parent $this在物件實體化時指向物件主體，使用-&gt; self指向類別本身，通常會用在存取靜態成員，使用:: parent指向父類別，存取父類別的成員，使用:: 參考: http://www.howzhi.com/group/php/discuss/10022 __construct() 和 __destruct() __construct()中定義物件實體化時要做的事，基本原則會用來預設屬性值或預執行函式 __destruct()用於定義物件銷毀前做的事，一般在程式結束前物件會被自動銷毀 12345678910111213141516171819202122class Demo&#123; public $hello = 'Hello World' . \"\\n\"; public function __construct() &#123; echo 'run __construct()' . \"\\n\"; &#125; public function __destruct() &#123; echo 'run __destruct()' . \"\\n\"; &#125; public function hello() &#123; echo $this-&gt;hello; &#125;&#125;$demo = new Demo();$demo-&gt;hello(); Output: 123run __construct()Hello Worldrun __destruct() 使用同類別名稱也可以定義建構式，但PHP5後通常不會這麼使用也不建議 123456class Demo&#123; public function Demo() &#123; &#125;&#125; 這類由雙底線開頭的方法，稱為magic method，系統會在特定的時機調用這些方法。可以參考: PHP的語言特性 : magic methods PHP手冊 magic methods 物件複製先上類別定義 12345678class A&#123; public $count = 1; public function __clone() &#123; $this-&gt;count ++; &#125;&#125; 方式1，直接assign(reference) 12345678$a = new A();$b = $a;var_dump($a);var_dump($b);var_dump($a === $b); Output: 1234567891011class A#1 (1) &#123; public $count &#x3D;&gt; int(1)&#125;class A#1 (1) &#123; public $count &#x3D;&gt; int(1)&#125;bool(true) 這時$b完全參照$a，而且兩邊會一起變動，如果$b-&gt;count = 99改了count值，$a-&gt;count也等於99 方式2，使用clone(shallow copy) 12345678$a = new A();$b = clone $a;var_dump($a);var_dump($b);var_dump($a === $b); Output: 1234567891011class A#1 (1) &#123; public $count &#x3D;&gt; int(1)&#125;class A#2 (1) &#123; public $count &#x3D;&gt; int(2)&#125;bool(false) 結果有些不一樣了，當使用clone複製完後，系統會自動去執行__clone()這個magic method，而且修改count值並不會改變另一邊 不過當物件的屬性值是參考或是物件時，仍然會是以參考的形式複製 我們把class宣告改一下 123456789101112131415161718192021222324252627282930313233class A&#123; public $count = 1; public $obj; public function __construct() &#123; $this-&gt;obj = new B(); &#125; public function __clone() &#123; $this-&gt;count ++; &#125;&#125;class B&#123; public $say = 'yes';&#125;$a = new A();$b = clone $a;var_dump($a);var_dump($b);$b-&gt;obj-&gt;say = 'no';var_dump($a);var_dump($b); Output: 123456789101112131415161718192021222324252627282930313233343536373839class A#1 (2) &#123; public $count &#x3D;&gt; int(1) public $obj &#x3D;&gt; class B#2 (1) &#123; public $say &#x3D;&gt; string(3) &quot;yes&quot; &#125;&#125;class A#3 (2) &#123; public $count &#x3D;&gt; int(2) public $obj &#x3D;&gt; class B#2 (1) &#123; public $say &#x3D;&gt; string(3) &quot;yes&quot; &#125;&#125;class A#1 (2) &#123; public $count &#x3D;&gt; int(1) public $obj &#x3D;&gt; class B#2 (1) &#123; public $say &#x3D;&gt; string(2) &quot;no&quot; &#125;&#125;class A#3 (2) &#123; public $count &#x3D;&gt; int(2) public $obj &#x3D;&gt; class B#2 (1) &#123; public $say &#x3D;&gt; string(2) &quot;no&quot; &#125;&#125; 可以發現我們改了$b-&gt;obj-&gt;say，連$a那邊的也被改了 解決辦法這時我們只要在__clone()中加上$this-&gt;obj = clone $this-&gt;obj;，把該物件另外再複製一份，就可以獨立兩邊的值了。 abstract 和 interface先上程式碼 1234567891011121314151617181920212223242526272829303132333435interface Action&#123; public function run(); public function fast();&#125;abstract class Animal implements Action&#123; public function run() &#123; $this-&gt;fast(); &#125;&#125;class Dog extends Animal&#123; public function fast() &#123; echo 'very fast.'; &#125;&#125;class Cat extends Animal&#123; public function fast() &#123; echo 'very slow.'; &#125;&#125;$myDog = new Dog();$myCat = new Cat();$myDog-&gt;run(); // very fast.$myCat-&gt;run(); // very slow. interface(介面): 定義必須被實作的方法。上面我們宣告了Action介面，並定義實現Action的所有類別都必須實作run()跟fast()兩個方法。 abstract class(抽象類別): 定義一個不可被實體化的類別，表示一種型態、一個上層的分類概念。這裡我們宣告了一個Animal抽象類別，並且用implements關鍵字表示要依照Action介面來實現。 這邊問題來了，但在Animal中我們並沒有依照Action實作fast()方法，而為什麼不會報錯呢? 是因為我們宣告成abstract，所以在這裡Animal並不會被實作，也不能被實作，自然也不用去實現，它就是個抽象虛擬的定義…(覺得很難表達…) 當然也可以由每種動物各自去實現Action，但是這樣就沒有層級的概念了，而且在這邊每種動物的run()方法是一樣的。 extends(繼承): 這裡我們宣告Dog和Cat類別，都繼承Animal抽象類別，包含實現Action的方法和run()方法都繼承下來了，而因為這邊是實際的類別，所以必須依照interface Action的定義去實作出還沒被實作的fast()方法。 最後我們實體化出$myDog和$myCat物件，並且呼叫其中的run()方法。 output: very fast.very slow. trait(特徵) PHP不能多重繼承，但是PHP5.4後加入了trait可以用來達成類似多重繼承的效果。 trait使用方式跟class很像。 延續上面那個程式， 這邊我們宣告一個trait Play，裡面有個run()方法。 1234567trait Play&#123; public function run() &#123; echo 'run and play with people'; &#125;&#125; 然後我們在class Cat中使用它use Play;，這時Cat類別已經同時繼承了Animal又擁有了Play的內容， 屬性覆蓋的順序為: 類別 -&gt; trait -&gt; 父類別 這時$myCat-&gt;run();的結果會變成run and play with people，因為在Cat類別中我們沒有實作run()方法，所以這時候呼叫會先採用Play中的run()。 也許trait的方法在每個類別中又需要不一樣，那也可以宣告成abstract抽象方法，讓每個類別去實作不同的方法。 參考: 逐步提昇PHP技術能力 - PHP的語言特性: Traits namespace , use , as 用法 namespace 主要可以用於解決class, interface, function, constant在不同套件重複名稱的問題，將其階層式的管理起來。 use關鍵字可用來使用需要的namespace as關鍵字可用來為namespace指定別名 12345678910111213namespace Namespace1;class Boy&#123; public function __construct($name) &#123; $this-&gt;name = $name; &#125; public function go() &#123; echo 'Go NS1! ' . $this-&gt;name . \"!!\\n\"; &#125;&#125; 12345678910111213namespace Namespace2;class Boy&#123; public function __construct($name) &#123; $this-&gt;name = $name; &#125; public function go() &#123; echo 'Go NS2! ' . $this-&gt;name . \"!!\\n\"; &#125;&#125; 然後我們把資料夾檔案整理成這樣 spl_autoload_register()在use_namespace.php中使用spl_autoload_register()自動去載入需要的class， PHP事實上會將類別名稱套用上完整的命名空間， 所以我們在apl_auto_register()中的$class實際上會拿到Namespace1\\Boy和Namespace2\\Boy 1234567891011121314spl_autoload_register( function ($class) &#123; include_once 'vendors\\\\' . $class . '.php'; &#125;);use Namespace1 as NS1;use Namespace2 as NS2;$boy1 = new NS1\\Boy('Comi');$boy2 = new NS2\\Boy('Comi');$boy1-&gt;go(); // Go NS1! Comi!!$boy2-&gt;go(); // Go NS2! Comi!! 範例程式碼參考https://github.com/comicat-hu/php-oop-test","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"OOP","slug":"OOP","permalink":"https://blog.comicat.me/tags/OOP/"}]},{"title":"w3school-PHP練習筆記-MySQL","slug":"w3school-PHP練習筆記-MySQL","date":"2017-09-21T10:03:35.000Z","updated":"2022-09-21T12:38:17.188Z","comments":true,"path":"2017/09/21/w3school-PHP練習筆記-MySQL/","link":"","permalink":"https://blog.comicat.me/2017/09/21/w3school-PHP%E7%B7%B4%E7%BF%92%E7%AD%86%E8%A8%98-MySQL/","excerpt":"https://www.w3schools.com/php/php_mysql_intro.asp MySQL Database MySQL Connect MySQL Create DB MySQL Create Table MySQL Insert Data MySQL Get Last ID MySQL Insert Multiple MySQL Prepared MySQL Select Data MySQL Delete Data MySQL Update Data MySQL Limit Data","text":"https://www.w3schools.com/php/php_mysql_intro.asp MySQL Database MySQL Connect MySQL Create DB MySQL Create Table MySQL Insert Data MySQL Get Last ID MySQL Insert Multiple MySQL Prepared MySQL Select Data MySQL Delete Data MySQL Update Data MySQL Limit Data SQLSQL(Structured Query Language)，ANSI標準，可以用來操作存取資料庫系統 語法參考: 就挑自己喜歡的看吧，因為有時候不一定哪邊的解說比較好懂https://www.w3schools.com/sql/sql_syntax.asphttp://www.w3school.com.cn/sql/sql_syntax.asphttp://www.1keydata.com/tw/sql/sql.html 這邊會使用XAMPP中的MySQL(MariaDB)還有PDO(PHP Data Object)來操作 Connect先上連接範例 1234567891011121314151617181920212223try &#123; $config = include_once 'config.php';&#125; catch (Exception $e) &#123; echo 'Missing config.php'; exit;&#125;$servername = $config['servername'];$username = $config['username'];$password = $config['password'];$dbname = $config['dbname'];$dsn = \"mysql:host=$servername;dbname=$dbname;\";try &#123; $db = new PDO($dsn, $username, $password); // set the PDO error mode to exception $db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); echo \"Connected successfully\";&#125; catch (PDOException $e) &#123; echo \"Connection failed: \" . $e-&gt;getMessage();&#125; 保持良好的習慣將設定檔另外獨立一個檔案 使用try catch攔截錯誤訊息，PDO有自己的例外處理PDOException可以使用 PDO物件中必填的是$dsn(Data Source Name)這個參數，host填入資料庫伺服器的位置，通常還會填入$dbname來表示要USE db(雖然w3schools說沒填會丟例外，不過實際上並沒有，推測就像是我們連進MySQL server但沒下USE指令的狀況) 使用者名稱跟帳號是選填，但是我們在#3582中的設定，將資料庫設成需要帳號跟密碼才能登入，所以這邊需要填寫 程式結束會自動close連線，或是把PDO物件指向null，ex.$conn = null Create DB先連線資料庫，然後 12$sql = 'CREATE DATABASE mydb'; // 建立SQL語句$db-&gt;exec($sql); // 執行SQL語句 就是這麼簡單。 如果建立重複的資料庫，會收到例外訊息SQLSTATE[HY000]: General error: 1007 Can&#39;t create database &#39;mydb&#39;; database exists Use DB建立完資料庫記得，$db-&gt;exec(&#39;USE mydb;&#39;);，否則不會自動切換到你建立的資料庫。 如果一開始連線就沒有指定DB，那接下來對資料表的操作都會收到例外訊息SQLSTATE[3D000]: Invalid catalog name: 1046 No database selected Insert Data使用SQL語句INSERT INTO table (欄位1, 欄位2,...) VALUES(值1, 值2,...) Get Last ID$db-&gt;lastInsertId();: 回傳最後插入的row id或序列值，對應到SQL語句的LAST_INSERT_ID() 不過這在使用上會和想像得結果不太一樣就是了， 像是，交易中如果rollback了，lastInsertId不會是交易前的狀態。 Insert Multiple使用 $db-&gt;beginTransaction(); 開啟一段交易區塊 $db-&gt;commit(); 提交結果 $db-&gt;rollback(); 回溯結果，這個通常會被放在例外的catch處理中執行 Prepared使用Prepare可以預先解析SQL語句，在大量重複類型的句語可以省下解析時間， 節省傳輸語句的資料量 並且有效防止SQL Injection的狀況發生 SQL prepare用法可以參考:prepared-statement 設定預執行語句PREPAER statement_name FROM &#39;SQL語句&#39;; 參數使用? 設定變數SET @var_name = value;或SET @var_name := value;，多變數可以用逗號隔開 使用預執行語句EXECUTE statement_name USING @var_name;，這時就會把變數依序帶預執行語句的?中 設定的變數和預執行語句都是獨立在每個連線裡的，close後都會被清除。 在PDO中的使用方式首先建立一個PDO Statement: $statement = $db-&gt;prepare()， 預留的變數位置，可以使用:開頭的命名，或是直接用?代表。 $statement = $db-&gt;prepare(&quot;INSERT INTO myguests (firstname, lastname, email) VALUES (:firstname, :lastname, :email)&quot;); $statement2 = $db-&gt;prepare(&quot;INSERT INTO myguests (firstname, lastname, email) VALUES (?, ?, ?)&quot;); 再來可以使用PDO Statement中的bindParam將參數帶進去 (使用冒號的綁定方法) 123$statement1-&gt;bindParam(':firstname', $firstname);$statement1-&gt;bindParam(':lastname', $lastname);$statement1-&gt;bindParam(':email', $email); 或 (使用問號的綁定方法，第一個變成位置index，從一開始) 123$statement2-&gt;bindParam(1, $firstname);$statement2-&gt;bindParam(2, $lastname);$statement2-&gt;bindParam(3, $email); bindParam()函數可以選填第三個參數: data_type和第四個參數: length ex. $statement2-&gt;bindParam(1, $firstname, POD::PARAM_STR, 10);，表示接受$firstname為字串並且長度限制10，並且帶入到第一個位置的問號。 最後使用PDO Statement的execute()執行它$statement1-&gt;execute(); bindParam()的回傳值是bool(true|false)，表示綁成功或失敗 參考https://www.w3schools.com/php/php_mysql_prepared_statements.asphttp://php.net/manual/zh/pdo.prepare.phphttp://php.net/manual/zh/pdostatement.bindparam.php exec() v.s. query()PDO有兩種常見的即時處理SQL語句的函數 $db-&gt;exec(SQL); 通常用於不需要接收結果的語句，會傳回受影響的行總數(DELETE UPDATE INSERT CREATE…等) $db-&gt;query(SQL); 通常用於需要接收結果的語句(SELECT…等) Select Data可以使用query()或是prepare()+execute()來處理查詢，並且使用fetch()來獲取一筆資料 12345$sql = \"SELECT * FROM myguests\";$result = $db-&gt;query($sql);$result-&gt;setFetchMode(PDO::FETCH_ASSOC);$result-&gt;fetch(); 或 12345$statement = $db-&gt;prepare(\"SELECT * FROM myguests\");$statement-&gt;execute();$statement-&gt;setFetchMode(PDO::FETCH_ASSOC);$statement-&gt;fetch(); setFetchMode()可以設定讀取資料的格式，預設為PDO::FETCH_BOTH，拿到的資料會是索引和欄位名稱混合 12345678910111213Array( [id] &#x3D;&gt; 1 [0] &#x3D;&gt; 1 [firstname] &#x3D;&gt; John [1] &#x3D;&gt; John [lastname] &#x3D;&gt; Doe [2] &#x3D;&gt; Doe [email] &#x3D;&gt; john@example.com [3] &#x3D;&gt; john@example.com [reg_date] &#x3D;&gt; 2017-09-21 16:42:09 [4] &#x3D;&gt; 2017-09-21 16:42:09) 設定為PDO::FETCH_ASSOC，只會留下欄位名稱 12345678Array( [id] &#x3D;&gt; 1 [firstname] &#x3D;&gt; John [lastname] &#x3D;&gt; Doe [email] &#x3D;&gt; john@example.com [reg_date] &#x3D;&gt; 2017-09-21 16:42:09) fetch(): 可以讀取一筆資料，讀取完自動指向下一筆 fetchAll(): 可以讀取全部資料 fetchColumn(index): 可以讀取特定欄位的資料，index填入欄位的索引順序，預設讀取index = 0，讀取完自動指向下一筆 Delete Data12$sql = \"DELETE FROM myguests WHERE id = 2\";echo $db-&gt;exec($sql); Update Data12345$sql = \"UPDATE myguests SET lastname='Doeeeee' WHERE id = 1\";$statement = $db-&gt;prepare($sql);$statement-&gt;execute();echo $statement-&gt;rowCount(); // 影響總行數 Limit DataSQL語句 SELECT * FROM myguests LIMIT 10 OFFSET 5 跳過5筆後讀取10筆資料 簡寫SELECT * FROM myguests LIMIT 5, 10 (兩個數字會倒過來) 練習範例codehttps://github.com/comicat-hu/php-mysql","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"Storage","slug":"Storage","permalink":"https://blog.comicat.me/tags/Storage/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blog.comicat.me/tags/MySQL/"},{"name":"w3schools","slug":"w3schools","permalink":"https://blog.comicat.me/tags/w3schools/"}]},{"title":"Try PHPUnit","slug":"Try-PHPUnit","date":"2017-09-19T06:12:53.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/09/19/Try-PHPUnit/","link":"","permalink":"https://blog.comicat.me/2017/09/19/Try-PHPUnit/","excerpt":"PHPUnit 安裝新的PHPUnitxampp 安裝後裡面有附PHPUnit(3.7.21)， 如果path設定沒錯的話，在終端機下phpunit --version可以查詢版號。 到​https://phpunit.de/index.html下載，這邊我們下載PHPUnit5.7版(因為至少有支援到我們使用的PHP5.6) 載下來後是一個phpunit-5.7.21.phar檔案，把它丟到xampp/php資料夾下。 修改xampp/php/phpunit.bat的:RUN &quot;%PHPBIN%&quot;後的路徑檔名，改成剛剛載下來的檔案名(phpunit-5.7.21.phar) phpunit --version 這時就可以看到新的PHPUnit版號了","text":"PHPUnit 安裝新的PHPUnitxampp 安裝後裡面有附PHPUnit(3.7.21)， 如果path設定沒錯的話，在終端機下phpunit --version可以查詢版號。 到​https://phpunit.de/index.html下載，這邊我們下載PHPUnit5.7版(因為至少有支援到我們使用的PHP5.6) 載下來後是一個phpunit-5.7.21.phar檔案，把它丟到xampp/php資料夾下。 修改xampp/php/phpunit.bat的:RUN &quot;%PHPBIN%&quot;後的路徑檔名，改成剛剛載下來的檔案名(phpunit-5.7.21.phar) phpunit --version 這時就可以看到新的PHPUnit版號了 簡單的測試範例 在lib_test.php撰寫test case 1234567891011121314151617181920212223&lt;?phpuse PHPUnit\\Framework\\TestCase;require_once 'lib.php';class InputTest extends TestCase&#123; public function testNormal() &#123; $this-&gt;assertEquals('a', convertInput('a')); $this-&gt;assertEquals('abc', convertInput('abc')); $this-&gt;assertEquals('aaa', convertInput('aaa')); $this-&gt;assertEquals('0', convertInput('0')); &#125; public function testSpace() &#123; $this-&gt;assertEquals('', convertInput(' ')); $this-&gt;assertEquals('', convertInput(' ')); $this-&gt;assertEquals('', convertInput(\"\\0\")); &#125;&#125; lib.php的內容是一個簡單的轉換資料的function 123456789&lt;?phpfunction convertInput($data)&#123; $data = trim($data); // Remove more space $data = stripcslashes($data); // Remove \"\\\" $data = htmlspecialchars($data); // HTML special chars encode return $data;&#125; 執行phpunit lib_test.php結果 在vscode執行phpunit 安裝PHPUnit extension 設定&quot;phpunit.exePath&quot;: &quot;C:\\\\xampp\\\\php\\\\phpunit.bat&quot; 使用方式可參考vscode-phpunit 執行狀況如下圖: 紅線上方為測試全部通過 紅線下方有一個案例失敗 composer install phpunitinstallation.composer 安裝composercomposer --version確認可以執行查看版本 我裝在全域路徑(windows的路徑是預設在C:\\Users\\使用者名稱\\AppData\\Roaming\\Composer)，composer會自動把套件裝去那composer global require phpunit/phpunit ^5.7 記得把這個指令集路徑C:\\Users\\使用者名稱\\AppData\\Roaming\\Composer\\vendor\\bin加入到環境變數中 可以透過composer來管理這些套件，使用pear方式安裝的方法很多都已經不可行了，套件官方可能也不維護該頻道 備註phpunit官方建議安裝的php-invoker需要相依PHP extension pcntl， 但這個extension根據網路上眾多說法是完全不能在windows環境使用， 所以composer在安裝時檢查會失敗。 如果仍要安裝可以加上--ignore-platform-reqs，讓composer忽略檢查條件 參考: https://github.com/composer/composer/issues/4584 test private/protected functionhttp://php.net/manual/en/class.reflectionclass.phphttps://stackoverflow.com/questions/249664/best-practices-to-test-protected-methods-with-phpunit 123456789101112131415161718192021222324/** * 取得 SomeClass 這隻class的特定方法，設定存取權限 * @param string $name 方法的名稱 * @return ReflectionMethod */private function getMethod($name) &#123; $class = new \\ReflectionClass('SomeClass'); $method = $class-&gt;getMethod($name); $method-&gt;setAccessible(true); return $method;&#125;/** * 呼叫權限受限的方法時被執行 * @param string $methodName 自動填入方法名稱 * @param array $args 自動填入呼叫方法的參數 * @return mixed 該方法的執行結果 */public function __call($methodName, $args)&#123; $method = $this-&gt;getMethod($methodName); $result = $method-&gt;invokeArgs($this-&gt;api, $args); return $result;&#125; 範例: 當我$this-&gt;getCache()時，因為getCache在ApplyAnalysisToJob中是private方法， 所以存取被拒絕，進入__call()，啟動getMethod()，透過ReflectionClass回傳可存取的ReflectionMethod物件， 用ReflectionMethod::invokeArgs()帶入參數，執行該實體方法，得到結果。 code coverage原程式的測試覆蓋率 在phpunit.xml裡的filter區塊加入白名單設定，並且設定addUncoveredFilesFromWhitelist=&quot;true&quot; 將要產生覆蓋率報告的資料夾或檔案引入 1234&lt;whitelist addUncoveredFilesFromWhitelist=\"true\"&gt; &lt;directory suffix=\".php\"&gt;path\\to\\dir&lt;/directory&gt; &lt;file&gt;path\\to\\file&lt;/file&gt;&lt;/whitelist&gt; 這段設定表示加入一個資料夾(內符合suffix=”.php”的檔案)，和兩個單檔，所以產出的報告會包含這些檔案的執行覆蓋率 透過這份覆蓋率報告可以得知，可能會有測試案例不滿足function中每行程式的情況，會有if, for沒有跑到之類的，表示測試案例不夠完整","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"PHPUnit","slug":"PHPUnit","permalink":"https://blog.comicat.me/tags/PHPUnit/"},{"name":"Unit-Test","slug":"Unit-Test","permalink":"https://blog.comicat.me/tags/Unit-Test/"}]},{"title":"w3school-PHP練習筆記-2","slug":"w3school-PHP練習筆記-2","date":"2017-09-18T02:08:04.000Z","updated":"2022-09-21T12:38:17.188Z","comments":true,"path":"2017/09/18/w3school-PHP練習筆記-2/","link":"","permalink":"https://blog.comicat.me/2017/09/18/w3school-PHP%E7%B7%B4%E7%BF%92%E7%AD%86%E8%A8%98-2/","excerpt":"PHP Cookies PHP Sessions PHP Filters PHP Filters Advanced PHP Error Handling PHP Exception","text":"PHP Cookies PHP Sessions PHP Filters PHP Filters Advanced PHP Error Handling PHP Exception PHP Cookiesphp setcookie setcookie(name, value, expire, path, domain, secure, httponly); name: cookie名稱，必填 value: cookie值，可以透過$_COOKIE[&#39;name&#39;]取得 expire: 該筆cookie消失時間(timestamp)，設0的話瀏覽器關閉才消失 path: 該筆cookie的有效路徑 domain: 該筆cookie的有效網域 secure: 只能在https使用(true/false) httponly: 只能透過http訪問(true/false) 必須在產生輸出前設定(包含html標記前)，如果在此之前就產生輸出，setcookie()就會失敗，return bool(false) PHP Session 使用前必須執呼叫session_start();，PHP會自動在cookie中建立一串PHPSESSID的字串 使用$_SESSION來直接存取session session_start()裡面可以帶入陣列參數: &#39;cookie_lifetime&#39; =&gt; 86400 覆蓋cookie的消失時間設定 &#39;read_and_close&#39; =&gt; true 讀取後立即關閉session PHP Filters 用來驗證資料(Validate)或清除資料中不合法的數據(Sanitize) 輸出filter_list() 可以列出所有PHP支援的filters filter_var($str, filter) PHP Sanitize filters PHP Filter Advanced filter_var()的第三個參數可以填入一些設定參數 當然，不要太相信filter的結果，PHP filter_var底下也已經有很多人提供奇怪的測資，而被驗證合法的。 PHP Error Handling 用die()函數，輸出錯誤訊息並且停止腳本 自訂錯誤訊息 123456function myError($errno, $errstr)&#123; echo \"&lt;b&gt;Error: &lt;/b&gt; [$errno] $errstr\";&#125;set_error_handler('myError'); // 設定錯誤訊息函式 trigger_error($errMsg); 直接觸發錯誤訊息 mail log 嘗試去php.ini和sendmail.ini設定了smtp=ssl://smtp.gmail.com, smtp_port, openssl等設定，執行完畢沒有錯誤訊息, 但沒收到信, 有空再研究。參考 PHP Exception throw new Exception() 拋出新的例外狀況 自訂一個例外狀況: 從Exception繼承class下來改寫 1234567891011121314151617/** * Self exception class */class MyException extends Exception&#123; /** * Process error message * * @return string $errorMsg Error message **/ public function errorMessage() &#123; $errorMsg = 'Error on line' . $this-&gt;getline() . ' in ' . $this-&gt;getFile() . ':&lt;b&gt;' . $this-&gt;getMessage() . '&lt;/b&gt;'; return $errorMsg; &#125;&#125; 調用自訂的例外狀況，並傳入錯誤訊息 12345try &#123; throw new MyException('OOOOOOOOOOOOOOPS!');&#125; catch (MyException $e) &#123; echo $e-&gt;errorMessage();&#125; (上面是原生的，下面是使用myException的輸出結果)","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"w3schools","slug":"w3schools","permalink":"https://blog.comicat.me/tags/w3schools/"}]},{"title":"w3school PHP練習筆記-1","slug":"w3school-PHP練習筆記-1","date":"2017-09-02T10:20:05.000Z","updated":"2022-09-21T12:38:17.188Z","comments":true,"path":"2017/09/02/w3school-PHP練習筆記-1/","link":"","permalink":"https://blog.comicat.me/2017/09/02/w3school-PHP%E7%B7%B4%E7%BF%92%E7%AD%86%E8%A8%98-1/","excerpt":"https://www.w3schools.com/php/php_forms.asp PHP Forms PHP Advanced MySQL Database PHP - AJAX PHP Forms - 全 PHP Advanced PHP Arrays Multi PHP Date and Time PHP Include PHP File Handling PHP File Open/Read PHP File Create/Write PHP File Upload","text":"https://www.w3schools.com/php/php_forms.asp PHP Forms PHP Advanced MySQL Database PHP - AJAX PHP Forms - 全 PHP Advanced PHP Arrays Multi PHP Date and Time PHP Include PHP File Handling PHP File Open/Read PHP File Create/Write PHP File Upload include vs requireinclude與require同是引入檔案 實驗在include及require不存在的檔案之後echo “Hello” 使用include引入時，如果檔案不存在或錯誤發生，會出現警告訊息，但程式仍然會繼續執行。 圖中可以看到下面的Hello仍然有輸出 使用require引入時，如果檔案不存在或錯誤發生，會出現錯誤訊息，程式會立即中斷執行。 錯誤之後就沒有輸出了 include_once 及 require_once同以上效果，多加了能避免重複引用的狀況。 PHP Forms重點摘要Form Form Handling $_POST和$_GET可以取得form submit的資料，型態是array Form Validation $_SERVER[&quot;REQUEST_METHOD&quot;]可以取得request method，型態是string大寫 $_SERVER[&quot;PHP_SELF&quot;]可以取得目前動作的檔案路徑 使用htmlspecialchars()將輸入的html特殊字轉換，避免注入攻擊 &amp; 轉成 &amp;amp; &quot; 轉成 &amp;quot; &#39; 轉成 &amp;#039; &lt; 轉成 &amp;lt; &gt; 轉成 &amp;gt; 使用trim()去除不必要的空白字元，預設會去除頭尾空白字元 不加第二個參數，預設還會去除字串中的” “, “\\t”, “\\n”, “\\r”, “\\0”, “\\x0B” 使用stripslashes()去除反斜線 Form Required &amp; Validation E-mail and URL 檢查必要欄位(如果使用HTML設定屬性required只能限制input有值，如果輸入一堆空白字元仍然會通過檢查) 用上面Validation中的函數處理完輸入資料後，使用empty()檢查不得為空值。 使用preg_match() 用regular expression檢查輸入(測試前輸入參數都會先轉string) php preg_match() 使用filter_var() 用內建的特殊規則檢查輸入，這邊範例是用FILTER_VALIDATE_EMAIL(驗證email) php filter_var() 關於empty()一些問題以及比較其他檢查函數可以參考isset-vs-empty-vs-is_null Form Complete 表單送出之後，input欄位中的值會不見，依需求可以將表單的值再回填 用以下方式處理迴圈123foreach ($variable as $key =&gt; &amp;$value) &#123; //code...&#125; 如果在迴圈結束後沒有unset($value)會發生記憶體位置指向不正確，而導致之後取值可能發生問題，var_dump()結果會看到&amp;記號，標示出該型態為一個指向(類似指標的概念?? 如果非必要也許直接用明確的陣列存取方式會穩定一些。 PHP變數範圍PHP的變數作用範圍(Scope)通常都只有小區域，尤其是當一個變數需要跨function內外處理的時候更需要注意。一般變數宣告後，可以在自身、include和require的檔案中作用，但不包括function內部。 function內外的變數是分開的 1234567891011$a = 5;$b = 7;function add()&#123; $a ++; echo $a + $b; // null&#125;add();var_dump($a, $b); // int(5) int(7) 輸出會出現警告訊息，因為$a和$b在add()內未定義值，於是結果會是null。 傳值進去function 1234567891011$a = 5;$b = 7;function add($a, $b)&#123; $a ++; echo $a + $b; // 13&#125;add($a, $b);var_dump($a, $b); //int(5) int(7) 這時我們定義兩個參數$a, $b給add()，並且把外面的$a, $b透過參數傳進add()內，得到$a + $b結果為13，但外頭的$a, $b仍然維持原值。 傳參考進去function 1234567891011$a = 5;$b = 7;function add(&amp;$a, &amp;$b)&#123; $a ++; echo $a + $b; // 13&#125;add($a, $b);var_dump($a, $b); //int(6) int(7) 這時add()內的對於變數的操作，則會直接影響到外面(因為參考同一個變數操作)，外面的$a, $b值被更新。 使用global宣告 123456789101112$a = 5;$b = 7;function add()&#123; global $a, $b; $a ++; echo $a + $b; // 13&#125;add();var_dump($a, $b); //int(6) int(7) global關鍵字表示這裡宣告的變數將會參考外部全域的變數，是直接指向外部變數去操作，所以內外連動。 使用預設的$GLOBALS陣列來存取 1234567891011$a = 5;$b = 7;function addGlobal()&#123; $GLOBALS['a'] ++; echo $GLOBALS['a'] + $GLOBALS['b']; // 13&#125;addGlobal();var_dump($a, $b); //int(6) int(7) $GLOBALS裡存放了許多預設的全域變數，包括用global宣告過的變數，而使用$GLOBALS[‘a’]也會自動與$a做連動，不管是存取更動了哪一方的值，都相當於修改了兩邊。(等同於上面global用法) static宣告 使用static靜態宣告的變數，將會在程式執行前就分配記憶體空間，並且在程式執行結束後才釋放，並且不會因為多次呼叫而重置內容。 12345678function add()&#123; static $a = 0; $a ++; echo $a;&#125;add(); // 1add(); // 2 PHP Advanced 重點摘要 Array Multi 多維陣列的存取 把多維陣列分類進表格及清單中 Date and Time date()取得伺服器當前日期，time()取得伺服器當前時間，預設為GMT+0，第一個參數都接格式，第二個參數接timestamp date_default_timezone_set(&quot;Asia/Taipei&quot;) 將時區設定為台北時間。(也可以到php.ini中直接更改date.timezone的設定) 時間日期格式php date mktime(時,分,秒,日,月,年) 自定義時間 strtotime($str) 把$str字串轉成timestamp，$str大致上可以接受英文格式的日期時間，+-符號等組成 php strtotime() 使用strtotime()的第二個參數來計算相對時間區間 File Handling 用readfile()讀取txt檔案，顯示檔案內文並回傳字數 File Open/Read 使用@fopen(url, &quot;r&quot;) or die(&quot;Error!&quot;);開啟檔案。 fopen()成功會回傳一個resource，錯誤的話回傳bool(false) @符號是一個錯誤運算符，它能隱藏系統出現的錯誤訊息，它只能被加在表達式前面(有拿到回傳值) die()函數用於退出程式，並且輸出填入的錯誤字串 fread(file resource, filesize(url)); 讀取檔案，回傳檔案內容(string)，第二個參數指定要讀取的長度，這邊直接用檔案長度為參數 fclose(file resource); 關閉檔案釋放資源。 fgets(file resource); 單行讀取 feof(); 回傳是否檔案結尾 fgetc(); 單一個字元讀取 File Create/Write fwrite(file resource, string) 寫入檔案，第三個參數可以帶入最大寫入長度 @ or die()用法解釋 關於fopen() mode參數設定覆寫意指，清空原來的內容並從起始位置開始寫入。(一開檔就先清除) r : 唯讀，指標指向檔案起始位置(從頭覆蓋) w : 唯寫，指標指向檔案起始位置(覆寫)，如果檔案不存在會新增一個 a : 唯寫，指標指像檔案結束位置(新增)，如果檔案不存在會新增一個 x : 唯寫，直接新增檔案，如果檔案已經存在回傳false並有錯誤訊息 r+ : 可讀可寫，指標指向檔案起始位置(從頭覆蓋) w+ : 可讀可寫，指標指向檔案起始位置(覆寫)，如果檔案不存在會新增一個 a+ : 可讀可寫，指標指像檔案結束位置(新增)，如果檔案不存在會新增一個 x+ : 可讀可寫，直接新增檔案，如果檔案已經存在回傳false並有錯誤訊息 File File Upload 確認php.ini中的設定file_uploads=On (upload_max_filesize可以限制上傳檔案大小，同時post_max_size必須大於upload_max_filesize，memory_limit &gt; post_max_size) 設定form method=”post”，設定enctype=”multipart/form-data” 設定input type=”file”，預設會出現如圖中紅框內的樣式，選擇檔案會跳出檔案對話窗 上傳之後的檔案資訊可以透過$_FILES[&quot;input name&quot;]取得(裡面會包含name, type, tmp_name, error, size) basename(path)函數可用於取得路徑中檔案的名稱 pathinfo(path, option) option不填預設是回傳array(“dirname” =&gt; “”, “basename” =&gt; “”, “extension” =&gt; “”) option = PATHINFO_DIRNAME，回傳string(dirname) option = PATHINFO_BASENAME，回傳string(basename) option = PATHINFO_EXTENSION，回傳string(extension name) 上傳的檔案會被放到xampp/tmp資料夾下，並且有一個系統產生的tmp_name 可以透過move_uploaded_file(tmp_name, target path) 來移動，target path要是一個完整包含檔案名稱的路徑 file_exists(path) 檢查檔案是否存在 getimagesize(path)可以取得關於圖片的一些資訊，如果不是回傳false 0 存放寬度 1 存放高度 2 存放圖片類型(1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM) 3 存放大小資訊(string) bits 存放顏色的位元數 channels 存放圖片的通道值，RGB圖檔是3 mime 存放圖片的MIME 關於html form enctype屬性這個屬性在method=”post”時才有效，用於指定送出表單時對資料的編碼格式。 enctype有以下三種設定值: application/x-www-form-urlencoded : 預設值，會將空白編碼為”+”，特殊字元轉換為ASCII HEX multipart/form-data : 不進行編碼，通常用於form上傳檔案時使用 text/plain : 只有空白會編碼成”+”","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"},{"name":"w3schools","slug":"w3schools","permalink":"https://blog.comicat.me/tags/w3schools/"}]},{"title":"PHP5 Codecademy課程學習","slug":"PHP5-Codecademy課程學習","date":"2017-08-29T07:54:06.000Z","updated":"2022-09-21T12:38:17.180Z","comments":true,"path":"2017/08/29/PHP5-Codecademy課程學習/","link":"","permalink":"https://blog.comicat.me/2017/08/29/PHP5-Codecademy%E8%AA%B2%E7%A8%8B%E5%AD%B8%E7%BF%92/","excerpt":"Learn Url: https://www.codecademy.com/learn/php","text":"Learn Url: https://www.codecademy.com/learn/php 適逢Codecademy整理課程，這版的課程使用的是比較舊的php版本(5.3.10-1ubuntu3.1)，而且Codecademy也已經計畫更新並在主頁下架該課程首頁，不過新版的似乎還沒上架，所以這個url可能會404。 目前還是可以直接連進課程內容練習Introduction to PHP (已失效) p.s. Codecademy比較偏向語法快速上手，但是對於php的介紹比較少。 建議php初學者可以閱讀官方文件，先瞭解一些基本的php特性，對於基本語法的介紹也更臻完整。PHP文件: http://php.net/docs.php 邊看文件邊整理的一些PHP入門需知(持續更新): php-note PHP CodeSniffer可以幫助你檢查程式碼是否有符合PSR的規範。 使用XAMPP安裝PHP CodeSniffer套件 因為使用XAMPP裝的PHP已經有pear套件了，所以就不用再裝。打開XAMPP shell輸入指令pear install PHP_CodeSniffer安裝完成畫面 在VSCode中可以安裝phpcs套件來引入PHP CodeSniffer使用。一些設定在phpcs的說明頁中可以查詢。 php-cs-fixer修正程式碼符合PSR-2PHP-CS-Fixer 我這邊是直接載phar檔。vscode中安裝php-cs-fixer extension，設定php-cs-fixer.executablePath指到剛載下來的檔案。F1 search : php-cs-fixer: fix this file 使用 課程重點摘要Ch1 Introduction to PHP PHP程式碼撰寫在&lt;?php ?&gt;中，並且附檔名須為.php echo 可以顯示字串在螢幕上，字串連接使用 ‘.’，ex: &quot;Hello&quot; . &quot;World!&quot; 變數使用$開頭命名(這是用法不是風格規範)，程是句尾加; Ch2 Conditionals and Control Flow 這邊的內容不太照PSR規範來寫 正常的PSR寫法應該為: 1234567if ($expr1) &#123; // if body&#125; elseif ($expr2) &#123; // elseif body&#125; else &#123; // else body;&#125; elseif 和 else if 的差異: php elseif使用else if 在 : endif 的寫法下會導致解析錯誤，花括號寫法則沒有差異。 Ch3 Control Flow: Switch switch的case一定要加break; case可以多重使用。 Ch4 Arrays php5.4版後，array可以有兩種宣告方式，$arr = array(); 或 $arr = [];，不過在這個課程只支援前者。 使用[]或{}都可以存取array的值，unset()可以用來清除特定值或整個變數。 Ch5 For Loops in PHP 使用foreach存取陣列 123foreach ($langs as $lang) &#123; echo \"&lt;li&gt;$lang&lt;/li&gt;\";&#125; Ch6 While Loops in PHP 記得do while的結尾要加; Ch7 Functions, Part I strlen($str) 回傳$str字串長度 substr($str, $begin, $length) 回傳從$str字串的$begin位置取$length長度的子字串 strtoupper($str) 轉大寫，strtolower($str) 轉小寫 strpos($str1, $str2) 回傳$str2在$str1中的位置(int), 如果沒有找到回傳bool(false) round($num [, $p]) 回傳$num四捨五入到小數點第$p位的值($p值預設為0) rand() 隨機回傳一個0 ~ RAND_MAX的整數，rand($min, $max) 隨機回傳一個$min ~ $max的整數(PHP4.2+ 不需要再使用種子亂數，已經自動內含了) array_push($arr, $v1 [, $v2......]) 將$v1及之後的參數值push進$arr中，回傳完成後的陣列長度 count($arr) 回傳$arr陣列長度(註1) sort($arr) 將$arr升冪排序，rsort($arr) 將$arr降冪排序 join($str, $arr) 使用$str1連接$arr每個值，回傳字串 explode($str1, $str2) 使用$str1當斷點分割$str2，回傳陣列 str_split($str [, $length]) 將$str分成每個$length長度，預設為1，回傳陣列 Ch8 Functions, Part II 自訂function傳入及傳出參數 Ch9 Objects in PHP 使用class定義類別 使用function __construct() 定義建構子 使用new創建物件 使用-&gt;存取物件屬性及方法 使用$this定義物件自身的屬性值 Ch10 Object-Oriented PHP property_exists($obj, $str) 檢查$obj物件中的屬性是否存在 method_exists($obj, $str) 檢查$obj物件中的方法是否存在 extends可以讓子類別繼承父類別的所有屬性和方法(不支援多重繼承) 父類別中使用final宣告的方法不能被覆寫 在類別定義中parent::可以用來呼叫父層的屬性或方法 在類別定義外使用 ClassName:: 可以用來呼叫類別中的靜態變數、常數、靜態方法(issue1) Ch11 Advanced Arrays 使用key-value方式存取array 使用foreach($arr as $value) 使用foreach($arr as $key =&gt; $value) issue1雖然class中的function沒有宣告成static的話，理當是不能在new instance前被呼叫但是不知道為什麼可以…，官方手冊是說這種用法會給warning，不過PHP7之後這種呼叫方式會逐漸被棄用移除。PHP OOP static 註1在PHP4.2之後，count()函數有新增一個mode參數count($arr, mode) mode參數不填寫預設為0，表示不遞回計算個數，意指只計算第一層的元素個數 12345678$arr = [ [1,2], 3, 4, [5,6,7,[8]],];echo count($arr); // 4 mode參數設成1或COUNT_RECURSIVE，表示遞迴計算元素個數，意指加總所有層的元素個數 12345678$arr = [ [1,2], 3, 4, [5,6,7,[8]],];echo count($arr, 1); // 11 $arr在第一層的有4個元素，$arr在第二層的有6個元素，$arr在第三層的有1個元素， 故4 + 6 + 1 = 11 echo vs print() vs print_r() 比較表 | echo | print() | print_r()———|———|———-|——— 型態 | 語句 | 函數 | 函數 接受參數 | 多個 | 一個 | 多個 參數型態 | string, number | string, number | mixed 回傳值 | 無 | int(1) | bool(true/false) print_r() 如果加上第二個參數true，則不會輸出而是return函數處理完的值。 isset() vs empty() vs is_null()先上手冊說明isset()官方說明empty()官方說明is_null()官方說明 isset(): 檢查變數是否存在且不為null (可帶多個參數) empty(): 檢查變數值是否為空 is_null(): 檢查變數值是否為null 實驗結果(PHP 5.6.31) 為統一輸出避免顯示被自動轉型，所以我用var_dump()來處理輸出 輸出執行下方程式碼 1234echo var_dump($var);echo var_dump(isset($var));echo var_dump(empty($var));echo var_dump(is_null($var)); 不宣告$var $var出現未定義變數警告訊息，並回傳NULL isset()回傳bool(false) empty()回傳bool(true) is_null()出現未定義變數警告訊息，並回傳bool(true) 宣告$var = null; $var輸出得到NULL isset()回傳bool(false) empty()回傳bool(true) is_null()回傳bool(true) 宣告$var = 0; $var輸出得到int(0) isset()回傳bool(true) empty()回傳bool(true) is_null()回傳bool(false) 宣告$var = “0”; $var輸出得到string(1) “0” isset()回傳bool(true) empty()回傳bool(true) is_null()回傳bool(false) 宣告$var = “”; $var輸出得到string(0) “” isset()回傳bool(true) empty()回傳bool(true) is_null()回傳bool(false) 宣告$var = 1; $var輸出得到int(1) isset()回傳bool(true) empty()回傳bool(false) is_null()回傳bool(false) 結論 isset()只要變數存在不為null都會回傳true empty()會把null, 0, “0”, 空字串, 空陣列…等空集合的值都視為空值，回傳true is_null()只在變數不存在或值為null時，回傳true 參考php.ini重要設定","categories":[{"name":"資訊技術","slug":"資訊技術","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"},{"name":"PHP","slug":"資訊技術/PHP","permalink":"https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://blog.comicat.me/tags/PHP/"}]}]}