<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Comicat&#39;s Blog</title>
  
  <subtitle>Find Something Funny</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.comicat.me/"/>
  <updated>2022-11-28T09:22:51.205Z</updated>
  <id>https://blog.comicat.me/</id>
  
  <author>
    <name>comicat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用docker製作多版本php-cli指令</title>
    <link href="https://blog.comicat.me/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/"/>
    <id>https://blog.comicat.me/2020/09/03/使用docker製作多版本php-cli指令/</id>
    <published>2020-09-03T09:26:04.000Z</published>
    <updated>2022-11-28T09:22:51.205Z</updated>
    
    <content type="html"><![CDATA[<p>因為工作剛好需要經手到一個骨灰級的php專案，clone and install後第一件事就是跑測試，</p><p>但是本地端的php版本是7.4，一跑下去本來沒錯誤的測試都過不了，</p><p>想起公司大神曾玩過的docker container tools，這次就來試一下吧~</p><a id="more"></a><h2 id="建立php-cli-image"><a href="#建立php-cli-image" class="headerlink" title="建立php-cli image"></a>建立php-cli image</h2><ul><li><p>首先下載使用php5.6-cli這個docker image。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it php:5.6-cli bash</span><br></pre></td></tr></table></figure></li><li><p>進container後執行<code>php -v</code>確認版本資訊。</p><img src="/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/phpcli_init_version_info.png" class="" title="phpcli_init_version_info"></li><li><p>我們測試使用phpunit需要安裝xdebug。<br>查詢PHP支援的對應xdebug版號，<a href="https://xdebug.org/download/historical" target="_blank" rel="noopener">https://xdebug.org/download/historical</a>。<br>這個image已經內建了pecl，<code>pecl install xdebug-2.5.5</code>，就可以安裝xdebug了 (不帶版號則會裝最新版)。</p><img src="/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/xdebug_install_success.png" class="" title="xdebug_install_success"></li><li><p>設定php.ini，並啟用xdebug</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">'/usr/local/etc/php/'</span></span><br><span class="line">cp  php.ini-development php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依照xdebug安裝成功後的提供的資訊在php.ini中添加設定</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so"</span> &gt;&gt; php.ini</span><br><span class="line">php -v</span><br></pre></td></tr></table></figure><p>正確啟用後php的版本資訊中會看到<code>with Xdebug v2.5.5</code>的字樣了。</p><img src="/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/xdebug_settings_success.png" class="" title="xdebug_settings_success"></li><li><p>離開container，建立新的layer，並加上tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用剛剛操作的container-id</span></span><br><span class="line">docker commit <span class="variable">$&#123;container-id&#125;</span></span><br><span class="line"><span class="comment"># 使用剛剛commit回傳的image-id</span></span><br><span class="line">docker tag <span class="variable">$&#123;image-id&#125;</span> php56</span><br></pre></td></tr></table></figure></li></ul><h2 id="建立alias指令"><a href="#建立alias指令" class="headerlink" title="建立alias指令"></a>建立alias指令</h2><ul><li><p>呼叫container幫我們執行php</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it --rm php56 php -v</span><br></pre></td></tr></table></figure></li><li><p>將當前目錄掛進container執行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it --rm -v $(pwd):&#x2F;source -w &#x2F;source php56 ls -al</span><br></pre></td></tr></table></figure></li><li><p>建立alias<br>在.bashrc或.zshrc中加入設定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> php56=<span class="string">"docker container run -it --rm -v \$(pwd):/source -w /source php56 php"</span></span><br></pre></td></tr></table></figure><p><code>$(pwd)</code>之前的<code>\</code>一定要記得，不然alias會在一登入時就將其解析成固定的路徑。</p></li></ul><p>當我們執行<code>php56</code>時，實際上就是呼叫container幫我們執行php了。</p><img src="/2020/09/03/%E4%BD%BF%E7%94%A8docker%E8%A3%BD%E4%BD%9C%E5%A4%9A%E7%89%88%E6%9C%ACphp-cli%E6%8C%87%E4%BB%A4/run_php56_cli.png" class="" title="run_php56_cli">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因為工作剛好需要經手到一個骨灰級的php專案，clone and install後第一件事就是跑測試，&lt;/p&gt;
&lt;p&gt;但是本地端的php版本是7.4，一跑下去本來沒錯誤的測試都過不了，&lt;/p&gt;
&lt;p&gt;想起公司大神曾玩過的docker container tools，這次就來試一下吧~&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="Docker" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Docker/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Docker" scheme="https://blog.comicat.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Github的新彩蛋 - 打造自己專屬的Github Profile</title>
    <link href="https://blog.comicat.me/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/"/>
    <id>https://blog.comicat.me/2020/07/22/Github的新彩蛋-打造自己專屬的Github-Profile/</id>
    <published>2020-07-22T03:41:53.000Z</published>
    <updated>2022-11-28T09:22:51.185Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子Github釋出了一個彩蛋新功能，在個人首頁提供了一個小區塊，</p><p>讓我們可以用Markdown語法「揮灑創意」，可以用於自由設計個人頁的封面資料。</p><p>像是我的Github個人首頁這樣的效果。 <a href="https://github.com/comicat-hu" target="_blank" rel="noopener">https://github.com/comicat-hu</a></p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/comicat-hu_profile.PNG" class="" title="comicat-hu_profile"><a id="more"></a><h2 id="啟用Github-Profile"><a href="#啟用Github-Profile" class="headerlink" title="啟用Github Profile"></a>啟用Github Profile</h2><p>要啟用這個區塊非常簡單，只要先建立一個同Github username的Repository，並在其中添加<code>README.md</code>這個檔案。</p><p>相信對於Github的資深使用者來說，寫README算是家常便飯的事了吧，在其中建立自己的內容就會自動在個人首頁顯示囉！</p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/new_profile_repository.PNG" class="" title="new_profile_repository"><h2 id="Profile產生器"><a href="#Profile產生器" class="headerlink" title="Profile產生器"></a>Profile產生器</h2><p>如果你懶得自己打語法，或是不知道怎麼設計，也已經有開發者釋出懶人產生器，想要的資訊填一填就可以有一份profile了。</p><p>這個網站也提供了，所見及所得的介面，可以自訂修改或貼上自己編寫的語法，並即時預覽，可以不用都照著他的模板生成。</p><p><a href="https://arturssmirnovs.github.io/github-profile-readme-generator/" target="_blank" rel="noopener">https://arturssmirnovs.github.io/github-profile-readme-generator/</a></p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/profile_generator.PNG" class="" title="profile_generator"><h2 id="來看看大家的Profile"><a href="#來看看大家的Profile" class="headerlink" title="來看看大家的Profile"></a>來看看大家的Profile</h2><p><a href="https://github.com/coderjojo/creative-profile-readme" target="_blank" rel="noopener">https://github.com/coderjojo/creative-profile-readme</a></p><p>這個repository收集了一些開發者們「別出心裁」設計的profile</p><p>挑了一些我覺得不錯的:</p><ul><li><p>變成個人近況看板</p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/profile_refs_01.PNG" class="" title="profile_refs_01"></li><li><p>結合Github Issue跟Github Action跟世界的人們來場西洋棋</p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/profile_refs_02.PNG" class="" title="profile_refs_02"></li><li><p>個人技能看板</p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/profile_refs_03.PNG" class="" title="profile_refs_03"></li><li><p>簡潔設計的名片風格</p><img src="/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/profile_refs_04.PNG" class="" title="profile_refs_04"></li></ul><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ul><li><a href="https://github.com/arturssmirnovs/github-profile-readme-generator" target="_blank" rel="noopener">https://github.com/arturssmirnovs/github-profile-readme-generator</a></li><li><a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">https://github.com/anuraghazra/github-readme-stats</a></li><li><a href="https://juejin.im/post/5f0d2e5e5188252e3426dbfe" target="_blank" rel="noopener">https://juejin.im/post/5f0d2e5e5188252e3426dbfe</a></li><li><a href="https://medium.com/starbugs/如何建立獨一無二的-github-profile-與三個很酷的設計及應用-ef1cbb4b42c1" target="_blank" rel="noopener">https://medium.com/starbugs/如何建立獨一無二的-github-profile-與三個很酷的設計及應用-ef1cbb4b42c1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前陣子Github釋出了一個彩蛋新功能，在個人首頁提供了一個小區塊，&lt;/p&gt;
&lt;p&gt;讓我們可以用Markdown語法「揮灑創意」，可以用於自由設計個人頁的封面資料。&lt;/p&gt;
&lt;p&gt;像是我的Github個人首頁這樣的效果。 &lt;a href=&quot;https://github.com/comicat-hu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/comicat-hu&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/2020/07/22/Github%E7%9A%84%E6%96%B0%E5%BD%A9%E8%9B%8B-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E5%B0%88%E5%B1%AC%E7%9A%84Github-Profile/comicat-hu_profile.PNG&quot; class=&quot;&quot; title=&quot;comicat-hu_profile&quot;&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Github" scheme="https://blog.comicat.me/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>PHP程式效能分析小工具Cachegrind</title>
    <link href="https://blog.comicat.me/2019/10/20/PHP%E7%A8%8B%E5%BC%8F%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%B7%A5%E5%85%B7Cachegrind/"/>
    <id>https://blog.comicat.me/2019/10/20/PHP程式效能分析小工具Cachegrind/</id>
    <published>2019-10-20T07:31:54.000Z</published>
    <updated>2022-11-28T09:22:51.193Z</updated>
    
    <content type="html"><![CDATA[<p>借助XDebug Profiler記錄callstack，再用Cachegrind工具圖形化顯示，讓我們可以快速簡單地瞭解程式碼效能瓶頸，在追蹤程式碼時也十分好用。</p><img src="/2019/10/20/PHP%E7%A8%8B%E5%BC%8F%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%B7%A5%E5%85%B7Cachegrind/qcachegring%E4%BB%8B%E9%9D%A2%E5%8F%83%E8%80%83.png" class="" title="qcachegring介面參考"><a id="more"></a><h2 id="設定xdebug-profiler"><a href="#設定xdebug-profiler" class="headerlink" title="設定xdebug profiler"></a>設定xdebug profiler</h2><p>首先需要在php.ini中啟用XDebug，並且填入以下設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;預設不啟用</span><br><span class="line">xdebug.profiler_enable&#x3D;0</span><br><span class="line">;可帶XDEBUG_PROFILE&#x3D;1參數透過GET或POST觸發</span><br><span class="line">xdebug.profiler_enable_trigger&#x3D;1</span><br><span class="line">;檔名格式</span><br><span class="line">xdebug.profiler_output_name&#x3D;callgrind.%H_%t.out</span><br><span class="line">;存放的資料夾，需要先開好並給它存取權限</span><br><span class="line">xdebug.profiler_output_dir&#x3D;&quot;D:\xdebug_profiler_output\&quot;</span><br></pre></td></tr></table></figure><h2 id="產生並載入記錄檔"><a href="#產生並載入記錄檔" class="headerlink" title="產生並載入記錄檔"></a>產生並載入記錄檔</h2><p>接著只要實際存取一下網頁，並且帶上<code>XDEBUG_PROFILE=1</code>參數，每個請求就會產生一筆記錄檔案在指定的位置了。</p><p>用Cachegrind載入後，就會自動顯示如首圖了。</p><p>耗時顯示可切換成百分比或1/1000000秒。</p><p>p.s ubuntu上的叫KCachegrind，windows上的叫QCachegrind</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://xdebug.org/docs/profiler" target="_blank" rel="noopener">https://xdebug.org/docs/profiler</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10194661" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10194661</a></li><li><a href="https://blog.xuite.net/chingwei/blog/32217722-%E3%80%90%E7%B3%BB%E7%B5%B1%E3%80%91Profiling+PHP+with+Xdebug+%26+KCachegrind" target="_blank" rel="noopener">https://blog.xuite.net/chingwei/blog/32217722-%E3%80%90%E7%B3%BB%E7%B5%B1%E3%80%91Profiling+PHP+with+Xdebug+%26+KCachegrind</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借助XDebug Profiler記錄callstack，再用Cachegrind工具圖形化顯示，讓我們可以快速簡單地瞭解程式碼效能瓶頸，在追蹤程式碼時也十分好用。&lt;/p&gt;
&lt;img src=&quot;/2019/10/20/PHP%E7%A8%8B%E5%BC%8F%E6%95%88%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%B7%A5%E5%85%B7Cachegrind/qcachegring%E4%BB%8B%E9%9D%A2%E5%8F%83%E8%80%83.png&quot; class=&quot;&quot; title=&quot;qcachegring介面參考&quot;&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Apache run multiple php version by port-based vHosts</title>
    <link href="https://blog.comicat.me/2019/09/08/Apache-run-multiple-php-version-by-port-based-vHosts/"/>
    <id>https://blog.comicat.me/2019/09/08/Apache-run-multiple-php-version-by-port-based-vHosts/</id>
    <published>2019-09-07T17:15:44.000Z</published>
    <updated>2022-11-28T09:22:51.177Z</updated>
    
    <content type="html"><![CDATA[<p>這篇記錄一下在windows 10 上設定Apache2.4的vHosts，透過不同的port來跑多版本的PHP。</p><p>像這樣:</p><ul><li>localhost:8056 (php5.6)</li><li>localhost:8072 (php7.2)</li><li>localhost:8073 (php7.3)</li></ul><a id="more"></a><h2 id="資料夾配置"><a href="#資料夾配置" class="headerlink" title="資料夾配置"></a>資料夾配置</h2><p>這裡列一下我的資料夾配置，後面也會依這邊的路徑來配置Apache、PHP設定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- D:&#x2F;web</span><br><span class="line">    |_ &#x2F;Apache24</span><br><span class="line">    |_ &#x2F;php</span><br><span class="line">        |_ &#x2F;56</span><br><span class="line">        |_ &#x2F;72</span><br><span class="line">        |_ &#x2F;73</span><br></pre></td></tr></table></figure><h2 id="下載Apache2-4"><a href="#下載Apache2-4" class="headerlink" title="下載Apache2.4"></a>下載Apache2.4</h2><p>下載ApacheHaus (Apache 2.4.x OpenSSL 1.1.1 VC15)，如果需要啟用TLSv1.3需要使用含OpenSSL 1.1.1以上的版本。</p><ul><li>解壓縮Apache24資料夾</li><li>設定conf/httpd.conf<ul><li>SRVROOT</li><li>Listen PORT (這邊我改成8080)</li></ul></li><li>手動啟動bin/httpd測試，應可連上localhost:8080和localhost:443，顯示index.html預設頁面</li><li>建立Apache bin路徑到path環境變數</li><li>註冊服務 httpd -k install</li><li>啟動服務 httpd -k start</li><li>重啟服務 httpd -k restart</li><li>httpd -S</li></ul><h2 id="下載PHP"><a href="#下載PHP" class="headerlink" title="下載PHP"></a>下載PHP</h2><h3 id="下載php-x64-TS版"><a href="#下載php-x64-TS版" class="headerlink" title="下載php (x64 TS版)"></a>下載php (x64 TS版)</h3><ul><li><a href="https://windows.php.net/download/" target="_blank" rel="noopener">https://windows.php.net/download/</a></li><li><a href="https://windows.php.net/downloads/releases/archives/" target="_blank" rel="noopener">https://windows.php.net/downloads/releases/archives/</a>  (停止維護的在這裡)</li><li>分別解壓縮到php/73、php/72、php/56 (php7需要VC15、php5需要VC11) <a href="https://www.microsoft.com/zh-tw/download/details.aspx?id=30679" target="_blank" rel="noopener">下載VC11</a></li><li>複製php-development.ini到php.ini</li></ul><h3 id="建立預設的php環境"><a href="#建立預設的php環境" class="headerlink" title="建立預設的php環境"></a>建立預設的php環境</h3><ul><li><p>在apache conf/httpd.conf加入以下內容，重啟apache</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex index.php index.html</span><br></pre></td></tr></table></figure>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module "D:/web/php/73/php7apache2_4.dll"</span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line">PHPIniDir "D:/web/php/73/"</span><br></pre></td></tr></table></figure></li><li><p>在htdocs建立phpinfo.php，連到localhost:8080，應該可以順利解析並且顯示phpinfo，並且看到版本為7.3</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="啟用fcgi"><a href="#啟用fcgi" class="headerlink" title="啟用fcgi"></a>啟用fcgi</h3><ul><li><p>下載mod_fcgid.so (<a href="https://www.apachehaus.com/cgi-bin/download.plx" target="_blank" rel="noopener">https://www.apachehaus.com/cgi-bin/download.plx</a>)</p></li><li><p>解壓縮到apache的modules目錄</p></li><li><p>httpd.conf加入設定</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule fcgid_module modules/mod_fcgid.so</span><br></pre></td></tr></table></figure>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AddHandler fcgid-script .fcgi .php</span><br><span class="line"></span><br><span class="line">FcgidInitialEnv PHPRC "D:/web/php/73"</span><br><span class="line">FcgidWrapper "D:/web/php/73/php-cgi.exe" .php</span><br></pre></td></tr></table></figure></li></ul><h3 id="啟用vHosts"><a href="#啟用vHosts" class="headerlink" title="啟用vHosts"></a>啟用vHosts</h3><ul><li><p>拿掉註解 <code>Include conf/extra/httpd-vhosts.conf</code></p></li><li><p>修改httpd-vhosts.conf</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Listen 8056</span><br><span class="line">Listen 8072</span><br><span class="line">Listen 8073</span><br><span class="line"></span><br><span class="line">&lt;Directory "$&#123;SRVROOT&#125;/htdocs"&gt;</span><br><span class="line">    Options -Indexes +ExecCGI</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:8056&gt;</span><br><span class="line">    ErrorLog "logs/php56-error.log"</span><br><span class="line">    CustomLog "logs/php56-access.log" common</span><br><span class="line"></span><br><span class="line">    FcgidInitialEnv PHPRC "D:/web/php/56"</span><br><span class="line">    FcgidWrapper "D:/web/php/56/php-cgi.exe" .php</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:8072&gt;</span><br><span class="line">    ErrorLog "logs/php72-error.log"</span><br><span class="line">    CustomLog "logs/php72-access.log" common</span><br><span class="line"></span><br><span class="line">    FcgidInitialEnv PHPRC "D:/web/php/72"</span><br><span class="line">    FcgidWrapper "D:/web/php/72/php-cgi.exe" .php</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:8073&gt;</span><br><span class="line">    ErrorLog "logs/php73-error.log"</span><br><span class="line">    CustomLog "logs/php73-access.log" common</span><br><span class="line"></span><br><span class="line">    FcgidInitialEnv PHPRC "D:/web/php/73"</span><br><span class="line">    FcgidWrapper "D:/web/php/73/php-cgi.exe" .php</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></li></ul><p>過程中如果設定檔有誤可能會持續遭遇ConnectionRefuse或403 Forbidden，</p><p>還有注意apache22跟apache24有些指令不同，例如資料夾權限在apache22的指令是<code>Allow from all</code>，在apache24則是<code>Require all granted</code></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/httpd.conf" target="_blank" rel="noopener">https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/httpd.conf</a></li><li><a href="https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/extra/httpd-vhosts.conf" target="_blank" rel="noopener">https://github.com/pniaps/win-apache-php/blob/master/Apache-2.4-win64/conf/extra/httpd-vhosts.conf</a></li><li><a href="http://www.osyum.com/article/show/287/" target="_blank" rel="noopener">http://www.osyum.com/article/show/287/</a></li><li><a href="https://shazi.info/ubuntu-16-04-%E5%AE%89%E8%A3%9D-apache2-mod_fcgid-mpm_worker-%E8%B7%91-php-7-x/" target="_blank" rel="noopener">https://shazi.info/ubuntu-16-04-%E5%AE%89%E8%A3%9D-apache2-mod_fcgid-mpm_worker-%E8%B7%91-php-7-x/</a></li><li><a href="https://recwe.com/article/25" target="_blank" rel="noopener">https://recwe.com/article/25</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇記錄一下在windows 10 上設定Apache2.4的vHosts，透過不同的port來跑多版本的PHP。&lt;/p&gt;
&lt;p&gt;像這樣:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localhost:8056 (php5.6)&lt;/li&gt;
&lt;li&gt;localhost:8072 (php7.2)&lt;/li&gt;
&lt;li&gt;localhost:8073 (php7.3)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Apache" scheme="https://blog.comicat.me/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>PHP select mysql bit column return not correct value</title>
    <link href="https://blog.comicat.me/2019/05/25/PHP-select-mysql-bit-column-return-not-correct-value/"/>
    <id>https://blog.comicat.me/2019/05/25/PHP-select-mysql-bit-column-return-not-correct-value/</id>
    <published>2019-05-25T02:59:56.000Z</published>
    <updated>2022-11-28T09:22:51.193Z</updated>
    
    <content type="html"><![CDATA[<p>最近在一個PHP5.3的專案中遇到存取MySQL bit型態欄位取值總是拿到0的狀況，</p><p>不要問我為什麼還在PHP5.3，嘛~ 萬惡歷史淵源嘛~ 進入正題~</p><h2 id="狀況摘要"><a href="#狀況摘要" class="headerlink" title="狀況摘要"></a>狀況摘要</h2><p>經查發現，</p><p>取bit=1，php這邊得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(1)&quot;\001&quot;</span><br></pre></td></tr></table></figure><p>取bit=0，php這邊得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string(1)&quot;\000&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>以嘗試過用這幾種設定都無法解決</p><ul><li><code>$pdo-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES, false);</code></li><li><code>ord()</code></li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>php mysql driver版本的問題。</p><p><strong>舊版的php預設使用libmysqlclient做為驅動，php5.3起支援mysqlnd，但編譯時需要指定，php5.4後預設使用mysqlnd</strong>，</p><p><strong>libmysqlclient無法取得mysql中的原始型態，在弱型別的處理中bit被不正確的強轉成string</strong>，而造成此bug，</p><p>使用mysqlnd則沒有這個問題，bit型態將會順利的以string 0/1回傳，若設定<code>PDO::ATTR_EMULATE_PREPARES</code>，則以int 0/1回傳，</p><p>目前在insert時並沒有遇到這個問題，都是select時，回傳值不正確。</p><h2 id="解決辦法"><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2><ul><li><p>環境面的解法: 升級mysql driver重新編譯php環境或換主機</p></li><li><p>DB面的解法: 避免使用bit型態，使用tinyint(1)，根據文件這兩者占用的空間是差不多的</p></li><li><p>程式面的暫時解: 特別針對select bit形態欄位時+0，<code>SELECT (bit_column+0) AS bit_column</code></p></li></ul><h2 id="如何判斷環境使用何種mysql-driver"><a href="#如何判斷環境使用何種mysql-driver" class="headerlink" title="如何判斷環境使用何種mysql driver"></a>如何判斷環境使用何種mysql driver</h2><p>通常phpinfo(php -i)沒有查閱到mysqlnd這個字眼時，使用的就是舊的libmysqlclient</p><p>以下提供一段網路上找的的程式檢查，他是透過檢查mysqlnd特有的function來判斷使用的哪種driver</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$hasMySQL = <span class="keyword">false</span>;</span><br><span class="line">$hasMySQLi = <span class="keyword">false</span>;</span><br><span class="line">$withMySQLnd = <span class="keyword">false</span>;</span><br><span class="line">$sentence=<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'mysql_connect'</span>)) &#123;</span><br><span class="line">    $hasMySQL = <span class="keyword">true</span>;</span><br><span class="line">    $sentence.= <span class="string">"(Deprecated) MySQL &lt;b&gt;is installed&lt;/b&gt; "</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    $sentence.= <span class="string">"(Deprecated) MySQL &lt;b&gt;is not&lt;/b&gt; installed "</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'mysqli_connect'</span>)) &#123;</span><br><span class="line">    $hasMySQLi = <span class="keyword">true</span>;</span><br><span class="line">    $sentence.= <span class="string">"and the new (improved) MySQL &lt;b&gt;is installed&lt;/b&gt;. "</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    $sentence.= <span class="string">"and the new (improved) MySQL &lt;b&gt;is not installed&lt;/b&gt;. "</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'mysqli_fetch_all'</span>)) &#123;</span><br><span class="line">    $withMySQLnd = <span class="keyword">true</span>;</span><br><span class="line">    $sentence.= <span class="string">"This server is using MySQLnd as the driver."</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    $sentence.= <span class="string">"This server is using libmysqlclient as the driver."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $sentence;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>​* <a href="https://stackoverflow.com/questions/10540483/pdostatement-mysql-inserting-value-0-into-a-bit1-field-results-in-1-written/10542145" target="_blank" rel="noopener">https://stackoverflow.com/questions/10540483/pdostatement-mysql-inserting-value-0-into-a-bit1-field-results-in-1-written/10542145</a><br>​* <a href="https://stackoverflow.com/questions/20079320/php-pdo-mysql-how-do-i-return-integer-and-numeric-columns-from-mysql-as-int" target="_blank" rel="noopener">https://stackoverflow.com/questions/20079320/php-pdo-mysql-how-do-i-return-integer-and-numeric-columns-from-mysql-as-int</a><br>​* <a href="https://stackoverflow.com/questions/15106985/mysql-select-bit1-shows-as-string3" target="_blank" rel="noopener">https://stackoverflow.com/questions/15106985/mysql-select-bit1-shows-as-string3</a><br>​* <a href="https://www.junorz.com/archives/683.html" target="_blank" rel="noopener">https://www.junorz.com/archives/683.html</a><br>​* <a href="http://www.q2zy.com/php-pdo%E9%A9%B1%E5%8A%A8-mysqlnd%E6%8A%98%E8%85%BE%E8%AE%B0/" target="_blank" rel="noopener">http://www.q2zy.com/php-pdo%E9%A9%B1%E5%8A%A8-mysqlnd%E6%8A%98%E8%85%BE%E8%AE%B0/</a><br>​* <a href="https://www.php.net/manual/zh/mysqlinfo.library.choosing.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/mysqlinfo.library.choosing.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在一個PHP5.3的專案中遇到存取MySQL bit型態欄位取值總是拿到0的狀況，&lt;/p&gt;
&lt;p&gt;不要問我為什麼還在PHP5.3，嘛~ 萬惡歷史淵源嘛~ 進入正題~&lt;/p&gt;
&lt;h2 id=&quot;狀況摘要&quot;&gt;&lt;a href=&quot;#狀況摘要&quot; class=&quot;headerlink&quot; title=&quot;狀況摘要&quot;&gt;&lt;/a&gt;狀況摘要&lt;/h2&gt;&lt;p&gt;經查發現，&lt;/p&gt;
&lt;p&gt;取bit=1，php這邊得到&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string(1)&amp;quot;\001&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;取bit=0，php這邊得到&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string(1)&amp;quot;\000&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="MySQL" scheme="https://blog.comicat.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Javascript async loop</title>
    <link href="https://blog.comicat.me/2019/01/30/Javascript-async-loop/"/>
    <id>https://blog.comicat.me/2019/01/30/Javascript-async-loop/</id>
    <published>2019-01-30T08:27:21.000Z</published>
    <updated>2022-11-28T09:22:51.193Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript 自ES7後支援潮潮的async-await語法，解決的許多不順眼的promise同步語法，</p><p>但是<code>Array.prototype.forEach</code>是沒有支援到async function的用法哦~ (天真的踩雷</p><p>底下給了一些程式片段範例:</p><a id="more"></a><p>首先為了例子方便，我封裝了一個setTimeout，這個wait(ms)傳進要等待的時間，並且執行完後回傳一個promise，等等我們會用async-await來處理它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span> (<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>我們期望程式開始後每隔1000ms log出一個陣列值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start'</span>);</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'ExecuteTime'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'ball'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'egg'</span>];</span><br><span class="line"></span><br><span class="line">    arr.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item);</span><br><span class="line">        <span class="keyword">await</span> wait(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'End'</span>);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'ExecuteTime'</span>); <span class="comment">// ExecuteTime: &lt; 5ms</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>執行上面程式可以發現我們的wait完全沒等到，程式就結束了，總執行時間很短。</p><h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><p>於是我們將程式修改成下面這種寫法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Start'</span>);</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'ExecuteTime'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'ball'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'egg'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item);</span><br><span class="line">        <span class="keyword">await</span> wait(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'End'</span>);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'ExecuteTime'</span>); <span class="comment">// ExecuteTime: 5xxx ms</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>執行上面程式後，符合我們的期望每隔1秒輸出一個陣列值。</p><h2 id="How-to-break-in-forEach"><a href="#How-to-break-in-forEach" class="headerlink" title="How to break in forEach"></a>How to break in forEach</h2><p>NO.</p><p>在forEach裡沒辦法使用<code>break</code>，只能<code>return;</code>來跳過本次循環，有這種需求只能乖乖用for loop了。</p><p>或是參考底下連結提供的一些神奇解法。</p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><ul><li><a href="https://blog.fundebug.com/2018/02/05/map_vs_foreach" target="_blank" rel="noopener">https://blog.fundebug.com/2018/02/05/map_vs_foreach</a></li><li><a href="https://github.com/babel/babel/issues/909" target="_blank" rel="noopener">https://github.com/babel/babel/issues/909</a></li><li><a href="http://jser.me/2014/04/02/%E5%A6%82%E4%BD%95%E5%9C%A8Array.forEach%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%87%8Cbreak.html" target="_blank" rel="noopener">http://jser.me/2014/04/02/%E5%A6%82%E4%BD%95%E5%9C%A8Array.forEach%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%87%8Cbreak.html</a></li><li><a href="https://stackoverflow.com/questions/2641347/short-circuit-array-foreach-like-calling-break" target="_blank" rel="noopener">https://stackoverflow.com/questions/2641347/short-circuit-array-foreach-like-calling-break</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript 自ES7後支援潮潮的async-await語法，解決的許多不順眼的promise同步語法，&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;Array.prototype.forEach&lt;/code&gt;是沒有支援到async function的用法哦~ (天真的踩雷&lt;/p&gt;
&lt;p&gt;底下給了一些程式片段範例:&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="Javascript" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://blog.comicat.me/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare+GitHub-Pages自訂網域連線設定</title>
    <link href="https://blog.comicat.me/2018/09/28/Cloudflare-GitHub-Pages%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A/"/>
    <id>https://blog.comicat.me/2018/09/28/Cloudflare-GitHub-Pages自訂網域連線設定/</id>
    <published>2018-09-28T05:18:27.000Z</published>
    <updated>2022-11-28T09:22:51.185Z</updated>
    
    <content type="html"><![CDATA[<p>以此站為例，我使用了<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>搭配Github-Pages來放置這個靜態網站。</p><p>建立Github-Pages的步驟很簡單，只要在專案設定中啟用並且將網站程式碼push上來就可以了。</p><p>首先我建了一個blog專案來使用，產生出的網址是<a href="http://comicat-hu.github.io/blog" target="_blank" rel="noopener">http://comicat-hu.github.io/blog</a></p><p>接著在專案設定中填入custom domain並儲存，這時你的專案會自動新增一個commit來創建<code>CNAME</code>這個檔案，內容包含了你自訂的domain，若是要讓hexo在每次deploy時不會洗掉這個檔案，可以將其加入hexo專案的source資料夾下，_config.yml的url設定值也要記得一併修改。</p><p>再來因為我的domain先前已經給cloudflare代管(需要到網域管理商那邊將cloudflare NameServer設定進去)，並且啟用了免費的SSL服務，所以這邊要設定一下：</p><ul><li>新增A record分別指到github，參考<a href="https://help.github.com/articles/troubleshooting-custom-domains/#dns-configuration-errors" target="_blank" rel="noopener">troubleshooting-custom-domains/#dns-configuration-errors</a></li><li>新增CNAME綁入自訂的subdomain，並指到yourdomain.github.io上</li><li>接者要等待一段時間才會生效哦</li></ul><img src="/2018/09/28/Cloudflare-GitHub-Pages%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A/use_cloudflare_to_github_page.PNG" class="" title="cloudflare DNS 設定">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以此站為例，我使用了&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;搭配Github-Pages來放置這個靜態網站。&lt;/p&gt;
&lt;p&gt;建立Github-Pages的
      
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="Blog" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Blog/"/>
    
    
      <category term="Deploy" scheme="https://blog.comicat.me/tags/Deploy/"/>
    
      <category term="Blog" scheme="https://blog.comicat.me/tags/Blog/"/>
    
      <category term="GitHub-Pages" scheme="https://blog.comicat.me/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>AC-Y18解題記錄</title>
    <link href="https://blog.comicat.me/2018/02/12/AC-Y18%E8%A7%A3%E9%A1%8C%E8%A8%98%E9%8C%84/"/>
    <id>https://blog.comicat.me/2018/02/12/AC-Y18解題記錄/</id>
    <published>2018-02-12T06:05:56.000Z</published>
    <updated>2022-11-28T09:22:51.177Z</updated>
    
    <content type="html"><![CDATA[<p>演算法解題記錄</p><a id="more"></a><h2 id="00-JS參考解"><a href="#00-JS參考解" class="headerlink" title="00 JS參考解"></a>00 JS參考解</h2><ul><li>time: O(N), space: O(1)</li><li>使用原輸入陣列來標記(index = value - 1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &gt; <span class="number">0</span> &amp;&amp; A[i] &lt;= A.length &amp;&amp; A[i] !== A[A[i]<span class="number">-1</span>]) &#123;</span><br><span class="line">            <span class="comment">// swap</span></span><br><span class="line">            <span class="keyword">let</span> temp = A[A[i]<span class="number">-1</span>];</span><br><span class="line">            A[A[i]<span class="number">-1</span>] = A[i];</span><br><span class="line">            A[i] = temp;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A.length + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(solution([<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>])) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(solution([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(solution([<span class="number">-1</span>, <span class="number">-3</span>])) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>Ref: <a href="https://leetcode.com/problems/first-missing-positive/discuss/17071/My-short-c++-solution-O(1)-space-and-O(n)-time" target="_blank" rel="noopener">https://leetcode.com/problems/first-missing-positive/discuss/17071/My-short-c++-solution-O(1)-space-and-O(n)-time</a></li></ul><hr><h2 id="01-JS參考解"><a href="#01-JS參考解" class="headerlink" title="01 JS參考解"></a>01 JS參考解</h2><ul><li>依區間起始值，由小而大排序</li><li>排完之後會有個特性: 若第n的區間和n-1的區間不相交，那麼n+1的區間和第n-1的區間也不相交</li><li>若目前stack top的區間和當前區間不相交，就直接push</li><li>若目前stack top的區間和當前區間相交(只需考慮區間結束值)，就合併區間</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Interval</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">A, B</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> intervals = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        intervals.push(<span class="keyword">new</span> Interval(A[i], B[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">intervalA, intervalB</span>) =&gt;</span> intervalA.x - intervalB.x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> stack = [];</span><br><span class="line">    stack.push(intervals[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals[i].x &gt; stack[j].y) &#123;</span><br><span class="line">            stack.push(intervals[i]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intervals[i].y &gt; stack[j].y) &#123;</span><br><span class="line">            stack[j].y = intervals[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">42</span>, <span class="number">70</span>, <span class="number">36</span>, <span class="number">-4</span>, <span class="number">43</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> B = [<span class="number">5</span>, <span class="number">15</span>, <span class="number">44</span>, <span class="number">72</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">69</span>, <span class="number">24</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(solution(A, B)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>Ref: <a href="https://www.geeksforgeeks.org/merging-intervals/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/merging-intervals/</a></p><hr><h2 id="03-JS參考解"><a href="#03-JS參考解" class="headerlink" title="03 JS參考解"></a>03 JS參考解</h2><ul><li>BFS，優先走到終點的就是最短路徑了</li><li>用queue存每步的所有情況</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">function initRecord(N, M) &#123;</span><br><span class="line">    let arr &#x3D; [];</span><br><span class="line">    for (let i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">        arr.push([]);</span><br><span class="line">        for (let j &#x3D; 0; j &lt; M; j++) &#123;</span><br><span class="line">            arr[i].push(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[0][0] &#x3D; true;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Move(x, y, step) &#123;</span><br><span class="line">    this.x &#x3D; x;</span><br><span class="line">    this.y &#x3D; y;</span><br><span class="line">    this.step &#x3D; step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function solution(A) &#123;</span><br><span class="line">    const N &#x3D; A.length;</span><br><span class="line">    const M &#x3D; A[0].length;</span><br><span class="line">    let record &#x3D; initRecord(N, M);</span><br><span class="line">    let dir &#x3D; [</span><br><span class="line">        [2, -1],</span><br><span class="line">        [2, 1],</span><br><span class="line">        [1, -2],</span><br><span class="line">        [1, 2],</span><br><span class="line">        [-1, -2],</span><br><span class="line">        [-1, 2],</span><br><span class="line">        [-2, -1],</span><br><span class="line">        [-2, 1]</span><br><span class="line">    ];</span><br><span class="line">    let queue &#x3D; [new Move(0, 0, 0)];</span><br><span class="line">    while (queue.length &gt; 0) &#123;</span><br><span class="line">        let now &#x3D; queue.shift();</span><br><span class="line">        if (now.x &#x3D;&#x3D; N - 1 &amp;&amp; now.y &#x3D;&#x3D; M - 1) &#123;</span><br><span class="line">            return now.step;</span><br><span class="line">        &#125;</span><br><span class="line">        for (let i &#x3D; 0; i &lt; dir.length; i++) &#123;</span><br><span class="line">            let mx &#x3D; dir[i][0] + now.x;</span><br><span class="line">            let my &#x3D; dir[i][1] + now.y;</span><br><span class="line">            if (mx &gt;&#x3D; 0 &amp;&amp; mx &lt; N &amp;&amp; my &gt;&#x3D; 0 &amp;&amp; my &lt; M &amp;&amp; (A[mx][my] !&#x3D; 1) &amp;&amp; (record[mx][my] &#x3D;&#x3D; false)) &#123;</span><br><span class="line">                record[mx][my] &#x3D; true;</span><br><span class="line">                queue.push(new Move(mx, my, now.step + 1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var A &#x3D; [</span><br><span class="line">    [0, 0, 0],</span><br><span class="line">    [0, 0, 1],</span><br><span class="line">    [1, 0, 0],</span><br><span class="line">    [0, 0, 0],</span><br><span class="line">];</span><br><span class="line">console.log(solution(A)); &#x2F;&#x2F; 7</span><br></pre></td></tr></table></figure><p>Ref: <a href="https://www.geeksforgeeks.org/minimum-steps-reach-target-knight/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/minimum-steps-reach-target-knight/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;演算法解題記錄&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="Algorithm" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://blog.comicat.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Auto deploy from GitHub using AWS CodeDeploy</title>
    <link href="https://blog.comicat.me/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/"/>
    <id>https://blog.comicat.me/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/</id>
    <published>2017-12-18T03:15:09.000Z</published>
    <updated>2022-11-28T09:22:51.177Z</updated>
    
    <content type="html"><![CDATA[<p>以下步驟會透過aws web console操作。</p><p>本篇使用個人的專案為實驗，僅供參考。</p><h2 id="流程摘要"><a href="#流程摘要" class="headerlink" title="流程摘要"></a>流程摘要</h2><ul><li>建立IAM user, role, policy</li><li>建立EC2, 安裝codedeploy-agent</li><li>建立專案部署設定檔<code>appspec.yml</code></li><li>建立code deploy application</li><li>手動透過code deploy部署一個GitHub專案</li><li>建立自動從GitHub通知部署的服務</li></ul><a id="more"></a><h2 id="建立IAM-user-role-policy"><a href="#建立IAM-user-role-policy" class="headerlink" title="建立IAM user, role, policy"></a>建立IAM user, role, policy</h2><ul><li>參考 <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html</a></li><li>如果要規範特定region存取，可以edit Trust Relationship中的service設定</li></ul><img src="/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/create-role.PNG" class="" title="create-role"><h2 id="建立EC2-安裝codedeploy-agent"><a href="#建立EC2-安裝codedeploy-agent" class="headerlink" title="建立EC2, 安裝codedeploy-agent"></a>建立EC2, 安裝codedeploy-agent</h2><ul><li>起一台amazon linux ami t2 micro，記得加個tag Name</li><li>參考 <a href="http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html</a></li><li>順便環境建置及設定</li><li>之後codedeploy會用root執行，所以環境設定時注意一下</li></ul><h2 id="建立專案部署設定檔appspec-yml"><a href="#建立專案部署設定檔appspec-yml" class="headerlink" title="建立專案部署設定檔appspec.yml"></a>建立專案部署設定檔appspec.yml</h2><ul><li>參考 <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html</a>，將檔案放在專案根目錄</li><li>YAML格式非常嚴謹，必須確保縮排及空格都要符合規範，不需要用的區塊要整個註解掉或移除</li><li>CodeDeploy會先將專案放置在某個暫存資料夾(source)再移到你所設定的目的地(destination)</li><li>CodeDeploy會有幾個重要的階段 <code>ApplicationStop -&gt; BeforeInstall -&gt; AfterInstall -&gt;  ApplicationStart</code>，可以在這些階段中設定要執行的script，install指的是複製專案到目的地的動作。<ul><li><code>ApplicationStop</code> : 在下載新的commit前會先跑stop，所以這時執行的是當前(舊版)的stop script，第一次部屬因為沒有舊版stop script所以沒有執行任何東西。</li><li><code>BeforeInstall</code> : 在安裝前時期</li><li><code>AfterInstall</code> : 在安裝後的時期</li><li><code>ApplicationStart</code> : 啟動程序時期</li></ul></li></ul><h2 id="建立code-deploy-application"><a href="#建立code-deploy-application" class="headerlink" title="建立code deploy application"></a>建立code deploy application</h2><ul><li>到CodeDeploy點選，create application</li><li>參考 <a href="http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/applications-create.html" target="_blank" rel="noopener">http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/applications-create.html</a></li><li>使用Tag Name選擇前面起的EC2</li><li>選擇前面設定的CodeDeployRole</li><li>Advanced中可以設定部署失敗是否要rollback</li></ul><img src="/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/create_application.png" class="" title="create_application"><h2 id="手動透過code-deploy部署一個GitHub專案"><a href="#手動透過code-deploy部署一個GitHub專案" class="headerlink" title="手動透過code deploy部署一個GitHub專案"></a>手動透過code deploy部署一個GitHub專案</h2><ul><li>Create deployment</li><li>Repository type選擇from !GitHub，輸入GitHub的代稱，如果登入的GitHub沒有連結aws過，會要求一個認證，點選即可。</li><li>輸入完整的Repository名稱(帳戶名稱/專案名稱)，這裡似乎只能用master branch</li><li>完整的commit ID</li></ul><p>確認上面的流程都可以順利運作之後，再來加入自動通知部屬的服務，務必連續部署幾次查看，有時候在applicationStop時期會有exit 0的錯誤，目前尚不知道原因為何，但通常是跑script或初次部屬就失敗，這時候再推新版也無法成功，只能重建一個新的deploy application。(通常也會是因為applicationStop時其會執行舊版appspec和script有關，所以永遠離不開錯誤的script，進機器修改舊版暫存檔也許可以改善，但沒試過)</p><h2 id="建立自動從GitHub通知部署的服務"><a href="#建立自動從GitHub通知部署的服務" class="headerlink" title="建立自動從GitHub通知部署的服務"></a>建立自動從GitHub通知部署的服務</h2><ul><li>auto deploy 可以直接參考這篇後半，<a href="https://crypt.codemancers.com/posts/2016-12-26-autodeploy-from-github-using-aws-codedeploy/" target="_blank" rel="noopener">https://crypt.codemancers.com/posts/2016-12-26-autodeploy-from-github-using-aws-codedeploy/</a></li><li>建立IAM user的policy時，必須注意其中的<code>APPLICATION_NAME</code>和<code>DEPLOYMENT_GROUP</code>，要和我們建立的名稱一樣，不然github就存取不到了</li><li>產生一組IAM user的Access key，記得複製</li><li>到github帳號的<code>settings -&gt; Developer settings -&gt; Personal access tokens</code>產生一組token，並且勾選<code>repo:status</code>和<code>repo_deployment</code>，記得複製token</li><li>到專案的<code>settings -&gt; Integrations &amp; services -&gt; Add service</code>，總共要加入兩個服務<code>AWS CodeDeploy EditDelete</code>和<code>GitHub Auto-Deployment</code>，各別填上相應的資訊就是了，剛剛的access key, github token都是在這裡使用</li></ul><p>接下來嘗試push commit，如果兩個服務都有順利運行就會有綠色勾勾，反之則會有驚嘆號的標示</p><img src="/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/service.PNG" class="" title="service"><p>github服務過了之後流程就會到codedeploy這邊，</p><p>登入後在CodeDeploy deployments頁面查看是否有部署動作中</p><ul><li>點選<code>deployment ID</code>可以查看詳細的內容</li><li>在內容中點選<code>view event</code>可以查看部屬的各個流程情況，如果失敗可以知道是哪個流程，也會有一些logs可以看<img src="/2017/12/18/Auto-deploy-from-GitHub-using-AWS-CodeDeploy/view_event.PNG" class="" title="view_event"></li><li>如果logs仍然不夠清楚知道失敗的點，可能就必須要進ec2中查看了，可以參考這篇 <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance" target="_blank" rel="noopener">http://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-view-logs.html#deployments-view-logs-instance</a></li></ul><p>以上就是一個簡單的從github串連aws codedeploy的部署流程，並只部到一台機器上，在撰寫script時要非常注意，在這個地方我出錯非常多次。</p><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><ul><li>如果要搭配github branch可能需要用aws codepipeline</li><li>自動部屬似乎沒辦法設定overwrite模式(手動部屬可以)，所以會導致install流程時檔案重複而失敗，目前我是在install前先rm整個專案，留空給他重新部 <a href="https://shazi.info/aws-codedeploy-%E7%9A%84-file-already-exists-at-location-%E7%90%86%E8%A7%A3/" target="_blank" rel="noopener">AWS CodeDeploy 的 File already exists at location 理解</a></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://crypt.codemancers.com/posts/2016-12-26-autodeploy-from-github-using-aws-codedeploy/" target="_blank" rel="noopener">Autodeploy from github using AWS CodeDeploy</a></li><li><a href="http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/welcome.html" target="_blank" rel="noopener">AWS CodeDeploy-Welcome</a></li><li><a href="http://docs.aws.amazon.com/zh_cn/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html" target="_blank" rel="noopener">Codedeploy-agent-operations-install-linux</a></li><li><a href="https://stackoverflow.com/questions/34951797/aws-codedeploy-github-file-already-exist" target="_blank" rel="noopener">AWS-CodeDeploy-Github-File-Already-Exist</a></li><li><a href="https://github.com/aws/aws-codedeploy-agent/issues/14" target="_blank" rel="noopener">Add Support for “Overwrite” instruction in appspec.yml “Files” section</a></li><li><a href="https://www.nosa.me/2014/11/13/aws-%E7%9A%84-codedeploy-%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A-%E3%80%8C%E9%83%A8%E7%BD%B2%E3%80%8D%E7%9A%84/" target="_blank" rel="noopener">AWS 的 CodeDeploy 是如何做 「部署」的</a></li><li><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/integrations-partners-github.html" target="_blank" rel="noopener">Integrating AWS CodeDeploy with GitHub</a></li><li><a href="https://shazi.info/aws-codedeploy-%E6%9C%83%E4%BD%BF%E7%94%A8%E8%88%8A%E7%9A%84-appspec-yml-%E9%80%B2%E8%A1%8C-deploy-%E7%9A%84%E5%95%8F%E9%A1%8C/" target="_blank" rel="noopener">AWS CodeDeploy 會使用舊的 appspec.yml 進行 deploy 的問題</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下步驟會透過aws web console操作。&lt;/p&gt;
&lt;p&gt;本篇使用個人的專案為實驗，僅供參考。&lt;/p&gt;
&lt;h2 id=&quot;流程摘要&quot;&gt;&lt;a href=&quot;#流程摘要&quot; class=&quot;headerlink&quot; title=&quot;流程摘要&quot;&gt;&lt;/a&gt;流程摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;建立IAM user, role, policy&lt;/li&gt;
&lt;li&gt;建立EC2, 安裝codedeploy-agent&lt;/li&gt;
&lt;li&gt;建立專案部署設定檔&lt;code&gt;appspec.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建立code deploy application&lt;/li&gt;
&lt;li&gt;手動透過code deploy部署一個GitHub專案&lt;/li&gt;
&lt;li&gt;建立自動從GitHub通知部署的服務&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="AWS" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/AWS/"/>
    
    
      <category term="AWS" scheme="https://blog.comicat.me/tags/AWS/"/>
    
      <category term="Deploy" scheme="https://blog.comicat.me/tags/Deploy/"/>
    
  </entry>
  
  <entry>
    <title>PHP - Redis</title>
    <link href="https://blog.comicat.me/2017/11/23/PHP-Redis/"/>
    <id>https://blog.comicat.me/2017/11/23/PHP-Redis/</id>
    <published>2017-11-23T02:56:26.000Z</published>
    <updated>2022-11-28T09:22:51.193Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一個BSD開源的key-value快取資料庫，可以保持資料的持久度，有支援多種的資料結構可以儲存</p><a id="more"></a><p>windows的執行檔可以從這裡找到</p><p><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></p><p>解壓縮之後可以使用指令<code>redis-server redis.windows.conf</code>來啟動一個本機的redis server，預設起在port 6379，沒有連線密碼</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li><code>redis-cli</code>是操作的client interface</li><li><code>redis-cli -h 127.0.0.1</code> 連接到本機的redis，預設連port 6379，也可以連接到別的host，如果沒有設密碼驗證的話</li><li><code>get</code>, <code>set</code>指令可以用來存放或讀取資料，當你打出指令的時候，redis-cli會很貼心的提示後面的參數要放什麼</li><li><code>info keyspace</code>指令可以列出全部的redis db和其中的key數量</li><li><code>select</code>可以切換到不同的index，如果沒有select預設會使用index 0</li><li><code>keys *</code>列出所有key，星號可以用其他的pattern代替</li></ul><h2 id="使用PHP存取redis"><a href="#使用PHP存取redis" class="headerlink" title="使用PHP存取redis"></a>使用PHP存取redis</h2><p>當然，會需要一個redis extension</p><h3 id="連線"><a href="#連線" class="headerlink" title="連線"></a>連線</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line"></span><br><span class="line">$redis-&gt;connect(host, port);</span><br></pre></td></tr></table></figure><h3 id="select-db"><a href="#select-db" class="headerlink" title="select db"></a>select db</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$redis-&gt;select(index);</span><br></pre></td></tr></table></figure><h3 id="get-something"><a href="#get-something" class="headerlink" title="get something"></a>get something</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = $redis-&gt;get(key);</span><br></pre></td></tr></table></figure><h3 id="set-something"><a href="#set-something" class="headerlink" title="set something"></a>set something</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$redis-&gt;set(key, data, expire);</span><br></pre></td></tr></table></figure><h3 id="get-keys"><a href="#get-keys" class="headerlink" title="get keys"></a>get keys</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$keys = $redis-&gt;keys(<span class="string">'*'</span>);</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a></li><li><a href="https://github.com/phpredis/phpredis" target="_blank" rel="noopener">https://github.com/phpredis/phpredis</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis是一個BSD開源的key-value快取資料庫，可以保持資料的持久度，有支援多種的資料結構可以儲存&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Storage" scheme="https://blog.comicat.me/tags/Storage/"/>
    
      <category term="Redis" scheme="https://blog.comicat.me/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Google Chrome Puppeteer入門筆記</title>
    <link href="https://blog.comicat.me/2017/11/22/Google-Chrome-Puppeteer%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98/"/>
    <id>https://blog.comicat.me/2017/11/22/Google-Chrome-Puppeteer入門筆記/</id>
    <published>2017-11-22T09:12:21.000Z</published>
    <updated>2022-11-28T09:22:51.193Z</updated>
    
    <content type="html"><![CDATA[<p>Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome.</p><p>官方GitHub: <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer</a></p><p>Puppeteer 最低支援到Node v6.4，但是官方提供的範例必須要使用Node v7.6以上，目前Node穩定版已經推到v8，所以我裝v8.8.1</p><p>在專案中<code>npm i puppeteer</code>就可以安裝</p><p>主要是基於chromium來模擬各種動作，</p><a id="more"></a><p>以下提供幾個功能程式片段:</p><h2 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> screenshot = <span class="keyword">async</span>(url, filename) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 啟動瀏覽器</span></span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">        headless: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 開新分頁</span></span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="comment">// 連接url</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(url);</span><br><span class="line">    <span class="comment">// 設定可視區域大小</span></span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">        width: <span class="number">1024</span>,</span><br><span class="line">        height: <span class="number">768</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;</span><br><span class="line">        path: <span class="string">"screenshot/"</span> + filename</span><br><span class="line">    &#125;);</span><br><span class="line">    browser.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">screenshot(<span class="string">"url"</span>, <span class="string">"screenshot.png"</span>);</span><br></pre></td></tr></table></figure><h2 id="爬資料"><a href="#爬資料" class="headerlink" title="爬資料"></a>爬資料</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scrape = <span class="keyword">async</span>(url, selector) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">        headless: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(url);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> page.evaluate(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">        <span class="keyword">return</span> dom ? dom.textContent : <span class="literal">null</span>;</span><br><span class="line">    &#125;, selector);</span><br><span class="line"></span><br><span class="line">    browser.close();</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">scrape(<span class="string">"url"</span>, <span class="string">"selector"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    headless: <span class="literal">false</span>,</span><br><span class="line">    args: [ <span class="string">'--proxy-server=HOST:PORT'</span> ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="輸入表單-type"><a href="#輸入表單-type" class="headerlink" title="輸入表單(type)"></a>輸入表單(type)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.type(<span class="string">'selector'</span>, data);</span><br><span class="line"><span class="keyword">await</span> page.click(<span class="string">'selector_submit'</span>);</span><br></pre></td></tr></table></figure><h2 id="上傳檔案-Upload-dialog"><a href="#上傳檔案-Upload-dialog" class="headerlink" title="上傳檔案(Upload dialog)"></a>上傳檔案(Upload dialog)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filePaths = [filePath1, filePath2, ...];</span><br><span class="line"><span class="comment">// 選取上傳檔案的元件</span></span><br><span class="line"><span class="keyword">let</span> uploadElement = <span class="keyword">await</span> page.$(<span class="string">'selector'</span>);</span><br><span class="line"><span class="keyword">await</span> uploadElement.uploadFile(...filePaths);</span><br></pre></td></tr></table></figure><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>部分網頁在headless模式遇到<code>Error: Navigation Timeout Exceeded: 30000ms exceeded</code>的話，</p><p>可以試試看不載入font, css, js, image等不需要的文件</p><p><a href="https://github.com/GoogleChrome/puppeteer/issues/1913#issuecomment-361224733" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer/issues/1913#issuecomment-361224733</a></p><h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul><li>api-doc: <a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md" target="_blank" rel="noopener">https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md</a></li><li><a href="https://github.com/ebidel/try-puppeteer" target="_blank" rel="noopener">https://github.com/ebidel/try-puppeteer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome.&lt;/p&gt;
&lt;p&gt;官方GitHub: &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/GoogleChrome/puppeteer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Puppeteer 最低支援到Node v6.4，但是官方提供的範例必須要使用Node v7.6以上，目前Node穩定版已經推到v8，所以我裝v8.8.1&lt;/p&gt;
&lt;p&gt;在專案中&lt;code&gt;npm i puppeteer&lt;/code&gt;就可以安裝&lt;/p&gt;
&lt;p&gt;主要是基於chromium來模擬各種動作，&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="NodeJS" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="https://blog.comicat.me/tags/NodeJS/"/>
    
      <category term="Puppeteer" scheme="https://blog.comicat.me/tags/Puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Memcache</title>
    <link href="https://blog.comicat.me/2017/10/26/Yii-framework-Memcache/"/>
    <id>https://blog.comicat.me/2017/10/26/Yii-framework-Memcache/</id>
    <published>2017-10-26T10:35:22.000Z</published>
    <updated>2022-11-28T09:22:51.201Z</updated>
    
    <content type="html"><![CDATA[<p>memcached是一套分散式的快取系統，但server間並不互相同步，而是由client端去做分散存取(hash計算)，存資料時hash算出要存的server，取資料時用相同的hash算法指到要讀的server</p><p>用key-value的方式儲存資料</p><p>memcache有LRU機制(Least Recently Used)，會在內部儲存空間不足時自動讓較少使用到的資料失效(expire)，讓新的資料可以覆蓋到該空間上</p><a id="more"></a><p><a href="http://qianshangding.iteye.com/blog/2259411" target="_blank" rel="noopener">http://qianshangding.iteye.com/blog/2259411</a></p><h2 id="閱讀連結"><a href="#閱讀連結" class="headerlink" title="閱讀連結"></a>閱讀連結</h2><p>官網: <a href="http://memcached.org/" target="_blank" rel="noopener">memcached.org</a><br>經典名著: <a href="http://docs.linuxtone.org/ebooks/NOSQL/memcached/memcached%E5%85%A8%E9%9D%A2%E5%89%96%E6%9E%90.pdf" target="_blank" rel="noopener">memcached全面剖析.pdf</a><br>windows版執行檔: <a href="http://www.runoob.com/memcached/window-install-memcached.html" target="_blank" rel="noopener">window-install-memcached</a><br>PHP memcache extension api: <a href="http://php.net/manual/en/class.memcache.php" target="_blank" rel="noopener">class.memcache.php</a></p><h2 id="Getting-start"><a href="#Getting-start" class="headerlink" title="Getting start"></a>Getting start</h2><p>官方沒有提供windows版的memcached，所以只好找別人編好的執行檔來跑，</p><p>我用x86 1.4.4版，打開啟動memcached.exe，預設就會在localhost:11211啟動了</p><p><code>memcached -help</code>可以查看指令，</p><p>memcached可以直接telnet登入，<code>telnet 127.0.0.1 11211</code>後，下<code>stats</code>指令可以看到一些memcache的狀態，也可以直接在上面操作存取資料</p><img src="/2017/10/26/Yii-framework-Memcache/memcache_stats.PNG" class="" title="memcache_stats"><h2 id="PHP-memcache"><a href="#PHP-memcache" class="headerlink" title="PHP memcache"></a>PHP memcache</h2><p>使用PHP操作memcache需要裝memcache extension，之前使用Yii時也用工具檢查過了，就不多說，用的是3.0.8版。</p><p>直接使用PHP來操作(也可以參考文末)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$memcache = <span class="keyword">new</span> Memcache;</span><br><span class="line">$memcache-&gt;addServer(<span class="string">'localhost'</span>);</span><br><span class="line">$memcache-&gt;set(<span class="string">'a'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="keyword">echo</span> $memcache-&gt;get(<span class="string">'a'</span>); <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><p>addServer是將一個memcache server加入到MemcachePool，但實際上並不會連線，而是真正要執行須要連線的指令時才執行，所以該動作通常都不會出錯，回傳1</p><p>都沒有addServer到MemcachePool中就操作，會得到<code>No servers added to memcache connection in</code>警告</p><p>執行其它動作(像是get, set時)，如果memcache server沒有啟動會警告，然後是一堆亂碼我也不知道為啥..，不過錯誤代號通常會是(10060)或(10061)或<code>無法連線，因為目標電腦拒絕連線。</code>，然後似乎沒有一個比較好的api來檢測server是不是啟動中…</p><p>折衷的辦法，github找到有人是用connect()來判斷，所以稍微改一下是這樣</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$isMemcacheAvaliable = @$memcache-&gt;connect(<span class="string">'localhost'</span>);</span><br><span class="line"><span class="keyword">if</span> (!$isMemcacheAvaliable) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Memcache Not Avaliable.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>connect()方法是直接去連某台memcache server，然後那台如果shutdown，依然會出1006x的警告，所以我們就用<code>@</code>把訊息弄掉，這時因為連接失敗所以<code>$isMemcacheAvaliable</code> false，就可以抓出failed的那台機器了</p><p><code>$memcache-&gt;getVersion();</code>拿到的版本資訊是<code>1.4.4-14-g9c660c0</code></p><p>在Yii裡面，如果有上述情況，頁面會直接噴掉去錯誤頁(500 server internel error)，有開debug模式會告訴你正是在urlManager嘗試要去存取cache時錯誤的。錯誤點在<code>CMemCache::getValue()</code>，使用memcache的get()那行，可以自行改善這個問題</p><h2 id="在Yii-config-components中的配置"><a href="#在Yii-config-components中的配置" class="headerlink" title="在Yii config components中的配置"></a>在Yii config components中的配置</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'cache'</span> =&gt; [</span><br><span class="line">            <span class="string">'class'</span> =&gt; <span class="string">'CMemCache'</span>,</span><br><span class="line">            <span class="string">'useMemcached'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'keyPrefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">            <span class="string">'hashKey'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'serializer'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">'servers'</span> =&gt; [</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'host'</span> =&gt; <span class="string">'xxxx'</span>,</span><br><span class="line">                    <span class="string">'port'</span> =&gt; <span class="string">'11211'</span>,</span><br><span class="line">                    <span class="string">'weight'</span> =&gt; <span class="string">'50'</span>,</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">'host'</span> =&gt; <span class="string">'xxxx'</span>,</span><br><span class="line">                    <span class="string">'port'</span> =&gt; <span class="string">'11212'</span>,</span><br><span class="line">                    <span class="string">'weight'</span> =&gt; <span class="string">'50'</span>,</span><br><span class="line">                ],</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><ul><li>useMemcached預設是關的</li><li>servers預設是空的，會預設用localhost</li><li>keyPrefix(key加前綴字，預設是用<code>Yii::app()-&gt;getId()</code>的結果當前綴), hashKey(key做md5), serializer這三項是yii預設開啟的，要用原始的標準可以都關掉</li><li>serializer序列化資料</li><li>weight可以設定該server的權重，這對memcache在做hash計算去找server時會有影響</li></ul><h2 id="Yii-操作-memcache"><a href="#Yii-操作-memcache" class="headerlink" title="Yii 操作 memcache"></a>Yii 操作 memcache</h2><p><code>Yii::app()-&gt;getComponent(&#39;cache&#39;)</code>或<code>Yii::app()-&gt;cache</code>取得CMemCache實體(extends CCache)</p><p><code>CMemCache::getMemCache()</code>取得Memcache實體(原始的那個，可以呼叫原生方法)</p><p>但yii在CCache中有實作get, set等方法，所以透過CMemCache實體呼叫get(), set()也可以存取資料(實際上也是去呼叫原生方法)</p><h2 id="flush-與delete"><a href="#flush-與delete" class="headerlink" title="flush()與delete()"></a>flush()與delete()</h2><p>memcache中可以設定expire讓資料在特定時間”失效”</p><p>flush()方法可以讓整個memcache中的資料都失效</p><p>delete()則是刪除某筆資料</p><p>兩者原理略有不同</p><h2 id="Important-note"><a href="#Important-note" class="headerlink" title="Important note"></a>Important note</h2><ul><li><p>如果使用了connect疑似會造成MemcachePool被清空(?</p></li><li><p>addServer方法的參數有這些，一定要依照格式填寫!!</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool Memcache::addServer ( string $host [, int $port = <span class="number">11211</span> [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]] )</span><br></pre></td></tr></table></figure><ul><li>Yii的memcache預設值在<code>CMemCacheServerConfiguration</code>類別中(同樣放在CMemCache)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $host;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $port=<span class="number">11211</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $persistent=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $weight=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $timeout=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $retryInterval=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $status=<span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>如果config有設就會用config的值取代掉，</p><p>很重要的一點是你存值時的設定都會影響到hash計算，所以取值時也要用一模一樣的設定，才能保證取的到值(如果只有連一台就沒差)，疑似連addServer的順序都會有影響，當然如果存值後增減server也可能會導致hash計算指不到正確的server!!!!!!!</p><h2 id="memcache-getAvaliableServers-程式參考"><a href="#memcache-getAvaliableServers-程式參考" class="headerlink" title="memcache getAvaliableServers 程式參考"></a>memcache getAvaliableServers 程式參考</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAvaliableServers</span><span class="params">($servers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $memcache = <span class="keyword">new</span> Memcache;</span><br><span class="line">    $avaliableServers = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($servers <span class="keyword">as</span> $server) &#123;</span><br><span class="line">        $isMemcacheAvaliable = @$memcache-&gt;connect($server[<span class="string">'host'</span>], $server[<span class="string">'port'</span>]);</span><br><span class="line">        $memcache-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> ($isMemcacheAvaliable) &#123;</span><br><span class="line">            array_push($avaliableServers, $server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $avaliableServers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$avaliableServers = getAvaliableServers($servers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count($avaliableServers) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Memcache Not Avaliable.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stats指令查看到的一些參數說明"><a href="#stats指令查看到的一些參數說明" class="headerlink" title="stats指令查看到的一些參數說明"></a>stats指令查看到的一些參數說明</h2><ul><li>pid: 該程式執行的PID</li><li>uptime: 啟動後的總執行秒數</li><li>time: 當前的timestamp</li><li>pointer_size: 32位元或64位元</li><li>curr_connection: 當前的開放的連接數</li><li>total_connection: 啟動後打開的總連接束</li><li>cmd_get: 執行get命令的總數</li><li>cmd_set: 執行set命令的總數</li><li>cmd_flush: 執行flush命令的總數</li><li>xxx_misses: 執行xxx命令未命中的總數</li><li>xxx_hits: 執行xxx命令命中次數</li><li>cas_badval: 使用擦拭次數(?</li><li>bytes_read: 從網路讀取的總位元組數</li><li>bytes_written: 傳送的總位元組數</li><li>limit_maxbytes: 可儲存的最大位元組數</li><li>accepting_conns: 目前接受的連接數</li><li>threads: 執行緒數</li><li>conn_yields: 連線主動放棄的數量</li><li>bytes: 當前儲存資料佔的大小</li><li>curr_items: 當前儲存的項目數量</li><li>total_items: 啟動以來儲存的項目數量</li><li>evictions: 被LRU算法釋放掉的項目數量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;memcached是一套分散式的快取系統，但server間並不互相同步，而是由client端去做分散存取(hash計算)，存資料時hash算出要存的server，取資料時用相同的hash算法指到要讀的server&lt;/p&gt;
&lt;p&gt;用key-value的方式儲存資料&lt;/p&gt;
&lt;p&gt;memcache有LRU機制(Least Recently Used)，會在內部儲存空間不足時自動讓較少使用到的資料失效(expire)，讓新的資料可以覆蓋到該空間上&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
      <category term="Memcache" scheme="https://blog.comicat.me/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - UrlManager</title>
    <link href="https://blog.comicat.me/2017/10/20/Yii-framework-UrlManager/"/>
    <id>https://blog.comicat.me/2017/10/20/Yii-framework-UrlManager/</id>
    <published>2017-10-20T10:24:35.000Z</published>
    <updated>2022-11-28T09:22:51.201Z</updated>
    
    <content type="html"><![CDATA[<p>UrlManager主要用來解析URL route，有兩種格式可以設定</p><ul><li>get: 用query string指定route(/?r=controllerID/actionID)</li><li>path: 在URL中指定route(/controllerID/actionID)</li></ul><a id="more"></a><p>在config中可以設定，沒有指定的話get是預設格式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"components"</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'urlManager'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'urlFormat'</span> =&gt; <span class="string">'path'</span>,</span><br><span class="line">        <span class="string">'rules'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="comment">// 格式化規則</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="CWebApplication-processRequest"><a href="#CWebApplication-processRequest" class="headerlink" title="CWebApplication::processRequest()"></a>CWebApplication::processRequest()</h2><p><code>$route = $this-&gt;getUrlManager()-&gt;parseUrl($this-&gt;getRequest());</code></p><h2 id="CApplication-getUrlManager"><a href="#CApplication-getUrlManager" class="headerlink" title="CApplication::getUrlManager()"></a>CApplication::getUrlManager()</h2><p><code>return $this-&gt;getComponent(&#39;urlManager&#39;);</code></p><p>在getComponent()，如果在應用程式中urlManager沒有被建立，這時會createComponent，</p><p>這邊插一下createComponent($config)，這邊傳入的config其實是從建立CWebApplication物件時configure()後的__componenetConfig中取出的對應內容(<code>__componentConfig[&#39;urlManager&#39;]</code>)，這個陣列其中就包含了該id對應的class以及我們在config中設定的urlFormat, showScript, rules…等等。</p><p>createComponent()在YiiBase中定義，進去之後會依照class的名稱去import(Yii的import)檔案，new出對應的物件，並且foreach從傳入的config直接<code>$object-&gt;$key=$value;</code>(直接改物件的public參數或是call __set())</p><p>最後回傳物件。</p><p>接下來會有個init()的過程(call CUrlManager::init())，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">parent</span>::init();</span><br><span class="line"><span class="keyword">$this</span>-&gt;processRules();</span><br></pre></td></tr></table></figure><p>CUrlManager的父類別是CApplicationComponent，在這裡的init()有兩件事</p><ul><li>attachBehavoirs (預設behaviors是空陣列)</li><li>set <code>_initialized</code> = true (有個public getIsInitialized()方法可以調用)</li></ul><h2 id="processRules"><a href="#processRules" class="headerlink" title="processRules()"></a>processRules()</h2><ul><li>rules為設定或是urlFormat = ‘get’，直接return</li><li>先檢查cache中是否有已解析的route，有就回傳它</li><li>再來才是foreach解析每條rule</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;rules <span class="keyword">as</span> $pattern =&gt; $route)</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_rules[] = <span class="keyword">$this</span>-&gt;createUrlRule($route,$pattern);</span><br></pre></td></tr></table></figure><p>createUrlRule()中會先判斷使否有指定class，沒有的話會使用預設的CUrlRule(<code>$this-&gt;urlRuleClass</code>)，然後依照傳入的route, pattern回傳CUrlRule實體。(CUrlRule定義在CUrlManager.php中)</p><ul><li>將解析好的route存入cache</li></ul><h2 id="rule"><a href="#rule" class="headerlink" title="rule"></a>rule</h2><p>rules可以直接以<code>&#39;pattern&#39; =&gt; &#39;route&#39;</code>的格式定義，或是<code>&#39;pattern&#39; =&gt; [&#39;route&#39;]</code>陣列中選填一些參數，urlSuffix, caseSensitive, defaultParams, matchValue</p><p>rules中可以使用<code>&lt;ParamName&gt;</code>來包含一個參數，並且可以使用<code>:</code>加入regex，格式是這樣<code>&lt;ParamName:ParamRegex&gt;</code>，且該參數會直接套用到GET定義的屬性中。</p><p>e.g.:</p><ul><li>將該controller指定為該位置的參數，並且要求符合文數字格式([A-Za-z0-9_])</li></ul><p><code>&lt;controller:\w+&gt;</code></p><ul><li>拿之前的計算範例來改，math路徑下要求符合一個數字a，任意四種action，一個數字b。符合該規則的route會對應到相應的四種math/actionID，a,b 會直接被帶進GET對應的參數。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'math/&lt;a:\d+&gt;&lt;action:(add|div|mul|sub)&gt;&lt;b:\d+&gt;'</span> =&gt; <span class="string">'math/&lt;action&gt;'</span></span><br></pre></td></tr></table></figure><h2 id="使用-htaccess隱藏index-php"><a href="#使用-htaccess隱藏index-php" class="headerlink" title="使用.htaccess隱藏index.php"></a>使用.htaccess隱藏index.php</h2><p>一般我們在url路徑中需要包含index.php(尤其是在urlFormat = path時)，但是這樣非常麻煩而且不友善</p><p>所以我們可以在index.php入口的同層路徑中加入.htaccess檔案</p><p>確認httpd.conf有<code>LoadModule rewrite_module modules/mod_rewrite.so</code></p><p>確認httpd.conf須設定AllowOverride ALL，表示允許該檔案的設定可以被覆寫(要開對地方，xampp的話是在<code>&lt;Directory &quot;C:/xampp/htdocs&quot;&gt;</code>的那個設定裡)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 啟用FollowSymLinks</span><br><span class="line">Options +FollowSymLinks</span><br><span class="line">IndexIgnore *&#x2F;*</span><br><span class="line"></span><br><span class="line"># 啟用rewrite功能</span><br><span class="line">RewriteEngine on</span><br><span class="line"></span><br><span class="line"># 請求的檔案 資料夾都不存在</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"></span><br><span class="line"># forward到index.php這隻檔案</span><br><span class="line">RewriteRule . index.php</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://www.yiichina.com/doc/guide/1.1/topics.url" target="_blank" rel="noopener">http://www.yiichina.com/doc/guide/1.1/topics.url</a></li><li><a href="http://blog.xiayf.cn/2014/11/12/read-yii-code-2/" target="_blank" rel="noopener">http://blog.xiayf.cn/2014/11/12/read-yii-code-2/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UrlManager主要用來解析URL route，有兩種格式可以設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get: 用query string指定route(/?r=controllerID/actionID)&lt;/li&gt;
&lt;li&gt;path: 在URL中指定route(/controllerID/actionID)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - CActiveForm Widget(實作篇)</title>
    <link href="https://blog.comicat.me/2017/10/19/Yii-framework-CActiveForm-Widget-%E5%AF%A6%E4%BD%9C%E7%AF%87/"/>
    <id>https://blog.comicat.me/2017/10/19/Yii-framework-CActiveForm-Widget-實作篇/</id>
    <published>2017-10-19T09:50:18.000Z</published>
    <updated>2022-11-28T09:22:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>這邊不會詳述關於CActiveForm(extends CWidget)的背後實作，不過可以大致說它是一個集成了各種表單常用的功能，並且封裝成一個物件的小工具，內部同樣包含了許多CHTML類別的調用</p><p>參考資料: <a href="http://www.yiichina.com/doc/api/1.1/CActiveForm" target="_blank" rel="noopener">http://www.yiichina.com/doc/api/1.1/CActiveForm</a></p><p>這邊我想直接使用CActiveForm造一個簡單的二元數字加減乘除(但要不同頁面)，</p><a id="more"></a><p>先簡述一下mvc架構</p><ul><li><code>MathController extends CController</code>: 這邊要負責導去不同的action，沒給action預設依然會進index</li><li><code>MathForm extends CFormModel</code>: 這邊建立關於傳入參數的資料模型，寫rules()驗證合法的數字格式</li><li>views<ul><li>一個math layout用於整體html架構</li><li>一個index view首頁內容，可以連結到各個action頁面</li><li>一個math view建立CActiveForm Widget，並且可以呈現主要的輸出入結果和錯誤提示</li></ul></li><li><code>MathAction extends CAction</code>(component): 因為每個加減乘除action的run()都一樣，所以就開了一個component來放共同方法</li><li>action另外寫成class並extends MathAction，由MathController actions()統一處理</li></ul><p>controllerID: math</p><p>actionID: add, sub, mul, div</p><h2 id="MathController-extends-CController"><a href="#MathController-extends-CController" class="headerlink" title="MathController extends CController"></a>MathController extends CController</h2><p>指定layouts\math_layout.php為layout輸出檔，然後將加減乘除的各個action導去不同的路徑，</p><p>這裡的application是根據我們的config設定而來的別名，指的是protected資料夾</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;layout = <span class="string">'math_layout'</span>;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'add'</span> =&gt; <span class="string">'application.controllers.math.addAction'</span>,</span><br><span class="line">            <span class="string">'sub'</span> =&gt; <span class="string">'application.controllers.math.subAction'</span>,</span><br><span class="line">            <span class="string">'mul'</span> =&gt; <span class="string">'application.controllers.math.mulAction'</span>,</span><br><span class="line">            <span class="string">'div'</span> =&gt; <span class="string">'application.controllers.math.divAction'</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;layout = <span class="string">'math_layout'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="string">'index'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MathForm-extends-CFormModel"><a href="#MathForm-extends-CFormModel" class="headerlink" title="MathForm extends CFormModel"></a>MathForm extends CFormModel</h2><p>這裡定義a, b來存放輸入的兩個參數，並定義了驗證規則，</p><p>這個驗證規則會統一用在前端跟後端的驗證上(後面會提到)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathForm</span> <span class="keyword">extends</span> <span class="title">CFormModel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [<span class="string">'a, b'</span>, <span class="string">'numerical'</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="math-view"><a href="#math-view" class="headerlink" title="math view"></a>math view</h2><p>在這裡的<code>$this</code>指的是MathController實體，或用<code>Yii::app()</code>也可以拿到</p><ul><li><code>$this-&gt;action-&gt;id;</code>可以取得目前的actionID，實際上是<code>$this-&gt;getAction()-&gt;getId();</code></li><li><code>$this-&gt;id;</code>可以取得目前的controllerID，實際上是<code>$this-&gt;getId();</code></li></ul><p>建立一個widget使用CActiveForm，啟用client驗證，設定要focus的欄位</p><p>建立兩個textField輸入框和一個submit button</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$form = <span class="keyword">$this</span>-&gt;beginWidget(<span class="string">'CActiveForm'</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'id'</span> =&gt; <span class="string">'math-form'</span>,</span><br><span class="line">    <span class="string">'enableClientValidation'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">    <span class="string">'focus'</span> =&gt; <span class="keyword">array</span>($model, <span class="string">'a'</span>),</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">&lt;div class="row submit"&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;textField($model, <span class="string">'a'</span>); <span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $sign;<span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;textField($model, <span class="string">'b'</span>); <span class="meta">?&gt;</span></span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> CHtml::submitButton(<span class="string">'Submit'</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;error($model,<span class="string">'a'</span>); <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $form-&gt;error($model,<span class="string">'b'</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;endWidget(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而網頁中的一些動態功能則是會由CActiveForm去自動使用jQuery語法和yii自行定義的jQuery工具(jquery.yiiactiveform)來達成</p><p>呼叫error()讓它可以在前端驗證錯誤時丟出錯誤訊息，從網頁原始碼中可以看到它帶入了我們之前定義的要驗證numerical，一樣是透過CNumberValidator來生成驗證語法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// because validator's allowEmpty = true</span></span><br><span class="line"><span class="keyword">if</span>(jQuery.trim(value)!=<span class="string">''</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!value.match(/^\s*[-+]?[<span class="number">0</span><span class="number">-9</span>]*\.?[<span class="number">0</span><span class="number">-9</span>]+([eE][-+]?[<span class="number">0</span><span class="number">-9</span>]+)?\s*$/)) &#123;</span><br><span class="line">        messages.push(<span class="string">"A must be a number."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MathAction-extends-CAction"><a href="#MathAction-extends-CAction" class="headerlink" title="MathAction extends CAction"></a>MathAction extends CAction</h2><p>這裡要寫加減乘除共同的run()方法，負責</p><ul><li>new MathForm model</li><li>setAttributes()，把<code>$_POST[&#39;MathForm&#39;]</code>資料塞進model</li><li>validate()後端驗證輸入資料</li><li>透過controller render塞資料給view然後呈現頁面</li><li>這裡的<code>$this</code>是各action實體</li><li>這render的內容會在math layout的<code>$content</code>塞入</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathAction</span> <span class="keyword">extends</span> <span class="title">CAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($a = <span class="number">0</span>, $b = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $show = <span class="string">''</span>;</span><br><span class="line">        $result = <span class="keyword">$this</span>-&gt;calc($a, $b);</span><br><span class="line">        $model = <span class="keyword">new</span> MathForm;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'MathForm'</span>])) &#123;</span><br><span class="line"></span><br><span class="line">            $model-&gt;setAttributes($_POST[<span class="string">'MathForm'</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($model-&gt;validate()) &#123;</span><br><span class="line"></span><br><span class="line">                $a = $model-&gt;a;</span><br><span class="line">                $b = $model-&gt;b;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>($model-&gt;a)) &#123;</span><br><span class="line">                    $a = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>($model-&gt;b)) &#123;</span><br><span class="line">                    $b = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">                $result = <span class="keyword">$this</span>-&gt;calc($a, $b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $sign = <span class="keyword">$this</span>-&gt;getSign();</span><br><span class="line">        $show = <span class="string">"$a $sign $b = $result &lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getController()-&gt;render(<span class="string">'math'</span>, [<span class="string">'model'</span> =&gt; $model, <span class="string">'show'</span> =&gt; $show, <span class="string">'sign'</span> =&gt; $sign]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSign</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $signs = [</span><br><span class="line">            <span class="string">'add'</span> =&gt; <span class="string">'+'</span>,</span><br><span class="line">            <span class="string">'div'</span> =&gt; <span class="string">'/'</span>,</span><br><span class="line">            <span class="string">'mul'</span> =&gt; <span class="string">'*'</span>,</span><br><span class="line">            <span class="string">'sub'</span> =&gt; <span class="string">'-'</span>,</span><br><span class="line">        ];</span><br><span class="line">        $actionID = <span class="keyword">$this</span>-&gt;controller-&gt;action-&gt;id;</span><br><span class="line">        <span class="keyword">return</span> $signs[$actionID];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加減乘除action-extends-MathAction"><a href="#加減乘除action-extends-MathAction" class="headerlink" title="加減乘除action extends MathAction"></a>加減乘除action extends MathAction</h2><p>這裡沒幹麻，主要就是各種計算不同所以要覆寫calc()方法，回傳結果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">addAction</span> <span class="keyword">extends</span> <span class="title">MathAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $result = $a + $b;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2017/10/19/Yii-framework-CActiveForm-Widget-%E5%AF%A6%E4%BD%9C%E7%AF%87/math_flow.PNG" class="" title="math_flow"><img src="/2017/10/19/Yii-framework-CActiveForm-Widget-%E5%AF%A6%E4%BD%9C%E7%AF%87/math_merge.PNG" class="" title="math_merge">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這邊不會詳述關於CActiveForm(extends CWidget)的背後實作，不過可以大致說它是一個集成了各種表單常用的功能，並且封裝成一個物件的小工具，內部同樣包含了許多CHTML類別的調用&lt;/p&gt;
&lt;p&gt;參考資料: &lt;a href=&quot;http://www.yiichina.com/doc/api/1.1/CActiveForm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.yiichina.com/doc/api/1.1/CActiveForm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這邊我想直接使用CActiveForm造一個簡單的二元數字加減乘除(但要不同頁面)，&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Form</title>
    <link href="https://blog.comicat.me/2017/10/17/Yii-framework-Form/"/>
    <id>https://blog.comicat.me/2017/10/17/Yii-framework-Form/</id>
    <published>2017-10-17T03:45:24.000Z</published>
    <updated>2022-11-28T09:22:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>使用Yii來建立一個登入表單</p><p>model建立在<code>protected\models</code>下，config需要設定import</p><p>動作流程大概是這樣:</p><a id="more"></a><ul><li>進入<code>site/login</code></li><li>在actionLogin中create form data model，catch POST，render login page</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$model = <span class="keyword">new</span> LoginForm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'LoginForm'</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// collection users data, use CModel setAttributes()</span></span><br><span class="line">    $model-&gt;attributes = $_POST[<span class="string">'LoginForm'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($model-&gt;validate()) &#123;</span><br><span class="line">        <span class="comment">// default to '/'</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;redirect(Yii::app()-&gt;user-&gt;returnUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;render(<span class="string">'login'</span>, [<span class="string">'model'</span> =&gt; $model]);</span><br></pre></td></tr></table></figure><ul><li>在LoginForm model中處理資料驗證，覆寫rules()</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment">// username and password are required</span></span><br><span class="line">        <span class="comment">// use CRequiredValidator</span></span><br><span class="line">        [<span class="string">'username, password'</span>, <span class="string">'required'</span>],</span><br><span class="line">        <span class="comment">// rememberMe needs to be a boolean</span></span><br><span class="line">        <span class="comment">// use CBooleanValidator</span></span><br><span class="line">        [<span class="string">'rememberMe'</span>, <span class="string">'boolean'</span>],</span><br><span class="line">        <span class="comment">// password needs to be authenticated</span></span><br><span class="line">        <span class="comment">// use method authenticate()</span></span><br><span class="line">        [<span class="string">'password'</span>, <span class="string">'authenticate'</span>],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果驗證都無誤，redirect到user-&gt;returnUrl，預設是’&#39;，可以setReturnUrl()修改</li></ul><p>LoginForm model中有用到authenticate()，這個方法是要自己寫的，</p><p>用來驗證password的Validator</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">($attribute, $params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_identity = <span class="keyword">new</span> UserIdentity(<span class="keyword">$this</span>-&gt;username, <span class="keyword">$this</span>-&gt;password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_identity-&gt;authenticate()) &#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;addError(<span class="string">'password'</span>, <span class="string">'Invalid Username or Password!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊用一個自訂的class UserIdentity extends CUserIdentity，</p><p>繼承自CUserIdentity的authenticate()是需要自行覆寫的，不然預設就是丟一個例外</p><p>CUserIdentity中也有預定義一些errorCode的常數可以用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIdentity</span> <span class="keyword">extends</span> <span class="title">CUserIdentity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strlen(<span class="keyword">$this</span>-&gt;password) &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode = <span class="keyword">self</span>::ERROR_PASSWORD_INVALID;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode = <span class="keyword">self</span>::ERROR_NONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在view中可以使用yii helper<code>CHtml::beginForm()</code>或是widget<code>beginWidget(&#39;CActiveForm&#39;)</code>來建立表單，兩種略有不同</p><p>程式就直接參考<a href="http://www.yiichina.com/doc/guide/1.1/form.view" target="_blank" rel="noopener">form.view</a></p><p>可以看到建出來的input html是用陣列的形式填充輸入資料</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"LoginForm[username]"</span> <span class="attr">id</span>=<span class="string">"LoginForm_username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>所以在上面action中我們才能直接使用<code>$_POST[&#39;LoginForm&#39;]</code>取得整個form data並且填進data model中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Yii來建立一個登入表單&lt;/p&gt;
&lt;p&gt;model建立在&lt;code&gt;protected\models&lt;/code&gt;下，config需要設定import&lt;/p&gt;
&lt;p&gt;動作流程大概是這樣:&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Simple Workflow</title>
    <link href="https://blog.comicat.me/2017/10/16/Yii-framework-Simple-Workflow/"/>
    <id>https://blog.comicat.me/2017/10/16/Yii-framework-Simple-Workflow/</id>
    <published>2017-10-16T09:42:18.000Z</published>
    <updated>2022-11-28T09:22:51.201Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/10/16/Yii-framework-Simple-Workflow/yii_workflow.png" class="" title="yii_workflow"><p>參考上圖，簡化一個最簡單的Yii workflow</p><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><p>整個網站的進入點，主要就是</p><ul><li>require YiiBase核心</li><li><code>$app = Yii::createWebApplication($config)</code>，建立一個<code>CWebApplication</code>物件</li><li><code>$app-&gt;run()</code>啟動它</li></ul><a id="more"></a><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>這裡主要是run()中的processRequest()</p><ul><li><code>$route = $this-&gt;getUrlManager()-&gt;parseUrl($this-&gt;getRequest());</code>，建立CHttpRequest物件(request)，建立CUrlManager物件(urlManager)，並且將request傳入urlManager的parseUrl()去處理，拿到controllerID/actionID</li><li><code>$this-&gt;runController($route);</code>，根據傳入的route去建立及啟動對應的controller和action</li></ul><h2 id="Controller、Filters、Actions"><a href="#Controller、Filters、Actions" class="headerlink" title="Controller、Filters、Actions"></a>Controller、Filters、Actions</h2><p>根據對應的controllerID/actionID分別進入各controller中後</p><ul><li>先根據filters()中的return值來呼叫對應的過濾器做存取權限、參數驗證…等，可使用<code>+</code>,<code>-</code>來設定需要使用filter的action</li><li>filter都通過之後啟動action，會先進入符合actionID的方法，如果沒有會再actions()中找外部的action</li></ul><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>在action中render()要輸出的內容，這時候render會引入layout，並將輸出內容放入$content變數中，包含在layout中echo</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/10/16/Yii-framework-Simple-Workflow/yii_workflow.png&quot; class=&quot;&quot; title=&quot;yii_workflow&quot;&gt;

&lt;p&gt;參考上圖，簡化一個最簡單的Yii workflow&lt;/p&gt;
&lt;h2 id=&quot;index-php&quot;&gt;&lt;a href=&quot;#index-php&quot; class=&quot;headerlink&quot; title=&quot;index.php&quot;&gt;&lt;/a&gt;index.php&lt;/h2&gt;&lt;p&gt;整個網站的進入點，主要就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;require YiiBase核心&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$app = Yii::createWebApplication($config)&lt;/code&gt;，建立一個&lt;code&gt;CWebApplication&lt;/code&gt;物件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$app-&amp;gt;run()&lt;/code&gt;啟動它&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Event</title>
    <link href="https://blog.comicat.me/2017/10/15/Yii-framework-Event/"/>
    <id>https://blog.comicat.me/2017/10/15/Yii-framework-Event/</id>
    <published>2017-10-15T08:39:53.000Z</published>
    <updated>2022-11-28T09:22:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>下列資料供參考</p><ul><li><a href="http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html" target="_blank" rel="noopener">http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html</a></li><li><a href="http://www.php1.cn/article/6396.html" target="_blank" rel="noopener">http://www.php1.cn/article/6396.html</a></li><li><a href="http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1" target="_blank" rel="noopener">http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1</a></li></ul><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>事件處理<br><strong>這裡的$this通常為CComponent的子類實例</strong></p><ul><li>定義事件，raiseEvent: 啟動事件，觸發CList中所有handler</li></ul><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onFuck</span><span class="params">($event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'raiseEvent - onFuck &lt;br&gt;'</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;raiseEvent(<span class="string">'onFuck'</span>, $event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>為事件加上某個event handler</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$handler = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Fuck uuu &lt;br&gt;'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;getEventHandlers(<span class="string">'onFuck'</span>)-&gt;add($handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// detach</span></span><br><span class="line"><span class="comment">// $this-&gt;detachEventHandler('onFuck', $handler);</span></span><br></pre></td></tr></table></figure><ul><li>在某處觸發事件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hasEventHandler用來檢查event的CList(_e['onFuck'])是否有被加上event hanlder</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasEventHandler(<span class="string">'onFuck'</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// raiseEvent</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;onFuck(<span class="keyword">new</span> CEvent(<span class="keyword">$this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p>為事件加上eventHandler有很多寫法</p><p>目前還沒瞭解差異在哪</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;onClick = $handler;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;onClick-&gt;add($handler);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;attachEventHandler(<span class="string">'onClick'</span>, $handler);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;getEventHandlers(<span class="string">'onClick'</span>)-&gt;add($handler);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加在handler list指定位置，一般預設是放在最後</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;getEventHandlers(<span class="string">'onClick'</span>)-&gt;insertAt(<span class="number">0</span>, $handler);</span><br></pre></td></tr></table></figure><p>實驗結果看起來上述所有用法都是一樣的結果</p><p>可以添加多個handler，也都可以detachEventHandler移除特定的handler</p><p>加入重複的hanlder一樣會在CList中累積增加，但detach只會移除一個</p><p>比較有趣的是最簡化的寫法<code>$this-&gt;onClick = $handler;</code>乍看之下重複assign好像會覆蓋，但其實不會，與其他效果相同</p><p>如果在某handler處理完後不想繼續後面的，可以在傳入handler的事件中設定<code>$event-&gt;handled = true;</code></p><p>class CEvent 被放在class CComponent的檔案中，這是一個比較奇怪的點</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下列資料供參考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/JosephLiu/archive/2011/12/12/2285078.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.php1.cn/article/6396.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.php1.cn/article/6396.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://yiibook.com/book/yii1.1_application_development_cookbook/chapter-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Event&quot;&gt;&lt;a href=&quot;#Event&quot; class=&quot;headerlink&quot; title=&quot;Event&quot;&gt;&lt;/a&gt;Event&lt;/h2&gt;&lt;p&gt;事件處理&lt;br&gt;&lt;strong&gt;這裡的$this通常為CComponent的子類實例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義事件，raiseEvent: 啟動事件，觸發CList中所有handler&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - View</title>
    <link href="https://blog.comicat.me/2017/10/13/Yii-framework-View/"/>
    <id>https://blog.comicat.me/2017/10/13/Yii-framework-View/</id>
    <published>2017-10-13T07:57:51.000Z</published>
    <updated>2022-11-28T09:22:51.201Z</updated>
    
    <content type="html"><![CDATA[<p>View單純呈現頁面結果，呼叫<code>CController::render()</code>傳入view id就可以渲染出該頁面。</p><p>render()預設會去存取<code>protected/views/ControllerID</code>資料夾。</p><p>通常網頁中會有些固定不變的元素(HTML主結構)，這時會拆分出來放在<code>protected/views/layouts</code>下，</p><p>而render()時預設會先輸出layouts下的main.php(如果有的話)，這時你要render的內容會被預設放在<code>$content</code>這個變數內，使用<code>&lt;?php echo $content; ?&gt;</code>輸出它</p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CController::render()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($view,$data=null,$return=false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;beforeRender($view))</span><br><span class="line">    &#123;</span><br><span class="line">        $output=<span class="keyword">$this</span>-&gt;renderPartial($view,$data,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span>(($layoutFile=<span class="keyword">$this</span>-&gt;getLayoutFile(<span class="keyword">$this</span>-&gt;layout))!==<span class="keyword">false</span>)</span><br><span class="line">            $output=<span class="keyword">$this</span>-&gt;renderFile($layoutFile,<span class="keyword">array</span>(<span class="string">'content'</span>=&gt;$output),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;afterRender($view,$output);</span><br><span class="line"></span><br><span class="line">        $output=<span class="keyword">$this</span>-&gt;processOutput($output);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($return)</span><br><span class="line">            <span class="keyword">return</span> $output;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">echo</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CWebApplication::layout</code>可以更改預設輸出的layout檔，預設是 = ‘main’</p><p>使用renderPartial()則不會預設輸出layout</p><p>在外部action render，要先取得controller物件</p><p><code>$this-&gt;getController()-&gt;render();</code></p><p>或</p><p><code>$this-&gt;controller-&gt;render();</code></p><p><code>&lt;?php echo CHtml::encode($this-&gt;pageTitle); ?&gt;</code>可以輸出網站的名稱，預設是config中設定的name加上<code>-</code>加上actionID加上controllerID(像是MyWeb - Hello Site)，但是index不會顯示actionID</p><p>render()可以帶入要傳入view變數，</p><p>直接在render()的第二個參數帶入陣列，<code>name</code>就是要在view中存取的變數名</p><p><code>render(&#39;index&#39;, [name =&gt; $name]);</code></p><p>in view: <code>&lt;?php echo $name ?&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;View單純呈現頁面結果，呼叫&lt;code&gt;CController::render()&lt;/code&gt;傳入view id就可以渲染出該頁面。&lt;/p&gt;
&lt;p&gt;render()預設會去存取&lt;code&gt;protected/views/ControllerID&lt;/code&gt;資料夾。&lt;/p&gt;
&lt;p&gt;通常網頁中會有些固定不變的元素(HTML主結構)，這時會拆分出來放在&lt;code&gt;protected/views/layouts&lt;/code&gt;下，&lt;/p&gt;
&lt;p&gt;而render()時預設會先輸出layouts下的main.php(如果有的話)，這時你要render的內容會被預設放在&lt;code&gt;$content&lt;/code&gt;這個變數內，使用&lt;code&gt;&amp;lt;?php echo $content; ?&amp;gt;&lt;/code&gt;輸出它&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Controller</title>
    <link href="https://blog.comicat.me/2017/10/06/Yii-framework-Controller/"/>
    <id>https://blog.comicat.me/2017/10/06/Yii-framework-Controller/</id>
    <published>2017-10-06T03:59:32.000Z</published>
    <updated>2022-11-28T09:22:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>Controller處理使用者發出並經過經過應用呼叫的request</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>Controller繼承自CController，但由於可能會有很多Controller，為了提高共用性，可在<code>protected\components</code>中定義了<code>class Controller extends CController</code>，再由各種情境自行去定義<code>class xxxController extends Controller</code>並存放在<code>protected\controllers</code>下。</p><p>controller執行時會呼叫相對應的action，action會與model溝通並將結果呈現在view上。</p><a id="more"></a><p>預設(沒有指定route)的action是index(actionIndex)， <code>CController::defaultAction = &#39;xxx&#39;</code>可以設定預設action</p><p>名稱中的<code>Controller</code>後綴和<code>action</code>前綴都是必須的寫法規則!</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiteController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Action Index!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Action Hello!!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Route"><a href="#Route" class="headerlink" title="Route"></a>Route</h2><p>使用者可以透過設定不同的route參數來存取特定的controller和action，參數名稱預設是使用<code>r</code>(CUrlManager::routeVar設定)，參數值由controller前綴詞和action的後綴詞加上<code>/</code>所組成，所以我們要存取上方範例程式中的兩個action，預設狀況的URL大概會長的像這樣<br>site對應到SiteController</p><p><code>index.php?r=site/index</code>, <code>index.php?r=site/hello</code></p><p>如果路由長這樣<code>r=a/b/hello</code>，則會自動對應路徑<code>controllers/a</code>下的BController，並呼叫其中的actionHello()</p><p>預設大小寫視為不同，但是可以設定<code>CUrlManager::caseSensitive = false;</code>讓大小寫視為相同。</p><p>另外參考:<br><a href="http://www.cnblogs.com/JosephLiu/archive/2011/12/26/2301771.html" target="_blank" rel="noopener">http://www.cnblogs.com/JosephLiu/archive/2011/12/26/2301771.html</a></p><h2 id="processRequest"><a href="#processRequest" class="headerlink" title="processRequest()"></a>processRequest()</h2><p>前篇有提到，在CWebApplication啟動了應用後呼叫run()，其中包含執行了processRequest()，這時就是在將接到的request依照r參數的不同去建立出不同的controller。</p><p>在這裡會先判斷<code>CWebApplication::catchAllRequest</code>是否有被設定，這個通常是用來導向某固定頁面時使用(像是頁面維護中之類的)，正常狀態會建立CUrlManager、ChttpRequset物件，並且透過CUrlManager中的parseUrl方法，處理httpRequest，拿到需要的參數(r)</p><p>呼叫createController()傳入r參數，開始解析(用\切)，將正確的controller id及action id區分開來，建立對應的controller</p><p>確認建立完成後，runController()，並且執行對應的action</p><h2 id="action參數"><a href="#action參數" class="headerlink" title="action參數"></a>action參數</h2><p>action函數可以直接指定傳入參數，並且會自動從<code>$_GET</code>中綁入(命名需相同)，</p><p>函數中的參數如果沒有給預設值，然後又在request找不到對應的參數時，會出現例外錯誤。</p><p>傳入參數特別宣告為array的話，會自動將傳入的值轉成陣列形式(放在index 0)</p><h2 id="actions"><a href="#actions" class="headerlink" title="actions()"></a>actions()</h2><p>actions()可以用來動態指定要執行的動作，也可以讓宣告的動作被重複利用，</p><ul><li>將需要複用的動作獨立出來成class，繼承<code>CAction</code>，定義其中的run()方法(action要執行的內容)</li><li>在需要的controller中覆寫actions()，並且回傳action name與class action路徑的array-hash表<br>(actions()是預定義在CController中的方法，預設回傳空陣列)</li></ul><p>以實作一個簡易計算功能為例，像是我在<code>controllers\math</code>下定義了兩隻不同的action，一隻做加法一隻做減法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">addAction</span> <span class="keyword">extends</span> <span class="title">CAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $sum = $a + $b;</span><br><span class="line">        <span class="keyword">echo</span> $sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">subAction</span> <span class="keyword">extends</span> <span class="title">CAction</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $diff = $a - $b;</span><br><span class="line">        <span class="keyword">echo</span> $diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時我在不同的controller中只要這樣寫，就可以用<code>控制器名稱/add&amp;a=10&amp;b=5</code>和<code>控制器名稱/sub&amp;a=10&amp;b=5</code>來計算10+5和10-5了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'add'</span> =&gt; <span class="string">'application.controllers.math.addAction'</span>,</span><br><span class="line">        <span class="string">'sub'</span> =&gt; <span class="string">'application.controllers.math.subAction'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>filter可以用來設定動作執行的過濾條件，可以直接在controller中定義一個名稱為filter前綴的方法，也可以另外自己定義一個filter物件(extends CFilter)，</p><p><code>$filterChain</code>是一個<code>CFilterChain</code>物件實體，包含了與該動作相關的filter list</p><ul><li>controller中的filter</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterTest</span><span class="params">($filterChain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Do something filter</span></span><br><span class="line">    $filterChain-&gt;run(); <span class="comment">// 呼叫下一個filter執行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定義filter class (驗證URL qurey中的參數a, b都是數字)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathFilter</span> <span class="keyword">extends</span> <span class="title">CFilter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// preFilter()會在action執行前被呼叫</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">preFilter</span><span class="params">($filterChain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request = Yii::app()-&gt;request; <span class="comment">// 取得request物件</span></span><br><span class="line">        $a = $request-&gt;getQuery(<span class="string">'a'</span>); <span class="comment">// 取出qurey參數值</span></span><br><span class="line">        $b = $request-&gt;getQuery(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回傳true表示繼續執行下個filter</span></span><br><span class="line">        <span class="keyword">if</span> (is_numeric($a) &amp;&amp; is_numeric($b)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回傳false表示停止執行下個filter</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Invalid query params.'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// postFilter()會在action執行後被呼叫</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">postFilter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在controller中使用filter，覆寫從CController繼承來的filters()方法，回傳一個陣列，包含filter name或路徑(array)，會依照回傳的陣列index的順序呼叫執行</p></li><li><p>filter可以使用<code>+</code>(只有), <code>-</code>(除外)來表示執行為特定的action過濾，不寫預設為全部的action都會呼叫過濾</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 對add, sub, mul, div四個action預執行controllers\filters下的MathFilter</span></span><br><span class="line"><span class="comment">// 再對全部的action預執行filterTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">'application.controllers.filters.MathFilter + add, sub, mul, div'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'test'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="accessControl"><a href="#accessControl" class="headerlink" title="accessControl"></a>accessControl</h2><p>在之前文章中我們使用Gii生成的table CRUD controller中，有一個<code>accessRules()</code>，這是給<code>filterAccessControl()</code>(從CController繼承)所使用的，因此我們可以覆寫<code>accessRules()</code>來定義自己的權限控制(預設是空陣列)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterAccessControl</span><span class="params">($filterChain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $filter = <span class="keyword">new</span> CAccessControlFilter;</span><br><span class="line">    $filter-&gt;setRule(<span class="keyword">$this</span>-&gt;accessRules());</span><br><span class="line">    $filter-&gt;filter($filterChain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段是table controller中的accessRules()</p><img src="/2017/10/06/Yii-framework-Controller/yii_accessRules.PNG" class="" title="yii_accessRules"><p>權限是由上而下逐條檢查的，有符合就不會繼續套用下去<br><code>*</code> : 表示所有使用者<br><code>@</code> : 表示以驗證的使用者<br><code>?</code> : 表示匿名使用者</p><p>所以我們</p><ul><li>允許所有使用者都可以執行action index和view</li><li>允許以驗證後的使用者才可以執行action create和update</li><li>只有admin可以執行action admin和delete</li><li>沒有套用到任何權限的使用者不允許任何操作(通常設定這個預防萬一)</li></ul><p>當然不只可以設定actions和users參數，可以參考底下網址。</p><p>另外參考資料:</p><ul><li><a href="http://blog.gxxsite.com/yii-quan-xian-guan-li-accessrulesde-yong-fa/" target="_blank" rel="noopener">accessRules()</a></li><li><a href="http://fanli7.net/a/bianchengyuyan/PHP/20130418/341941.html" target="_blank" rel="noopener">filters</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Controller處理使用者發出並經過經過應用呼叫的request&lt;/p&gt;
&lt;h2 id=&quot;Controller&quot;&gt;&lt;a href=&quot;#Controller&quot; class=&quot;headerlink&quot; title=&quot;Controller&quot;&gt;&lt;/a&gt;Controller&lt;/h2&gt;&lt;p&gt;Controller繼承自CController，但由於可能會有很多Controller，為了提高共用性，可在&lt;code&gt;protected\components&lt;/code&gt;中定義了&lt;code&gt;class Controller extends CController&lt;/code&gt;，再由各種情境自行去定義&lt;code&gt;class xxxController extends Controller&lt;/code&gt;並存放在&lt;code&gt;protected\controllers&lt;/code&gt;下。&lt;/p&gt;
&lt;p&gt;controller執行時會呼叫相對應的action，action會與model溝通並將結果呈現在view上。&lt;/p&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
  <entry>
    <title>Yii framework - Entry Script &amp; Basic Application</title>
    <link href="https://blog.comicat.me/2017/10/03/Yii-framework-Entry-Script-Basic-Application/"/>
    <id>https://blog.comicat.me/2017/10/03/Yii-framework-Entry-Script-Basic-Application/</id>
    <published>2017-10-03T03:41:19.000Z</published>
    <updated>2022-11-28T09:22:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>在Yii建出專案資料夾的最上層有個index.php當作應用程式的進入點。</p><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><p>這裡面大概做了幾件事:</p><ul><li>定義一些常數(設定值) <a href="https://stackoverflow.com/questions/2447791/define-vs-const" target="_blank" rel="noopener">define vs const</a></li><li>require<code>\framework\yii.php</code></li><li><code>Yii::createWebApplication($config)-&gt;run();</code>，傳入設定檔並建立一個WebApplication，然後啟動</li></ul><a id="more"></a><h2 id="framework-yii-php"><a href="#framework-yii-php" class="headerlink" title="framework\yii.php"></a>framework\yii.php</h2><p>這個檔案只做兩件事，</p><ul><li>判斷<code>Class YiiBase</code> 是否存在，不存在就載入<code>YiiBase.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!class_exists(<span class="string">'YiiBase'</span>, <span class="keyword">false</span>))</span><br><span class="line">    <span class="keyword">require</span>(dirname(<span class="keyword">__FILE__</span>).<span class="string">'/YiiBase.php'</span>);</span><br></pre></td></tr></table></figure><ul><li>定義<code>Class Yii extends YiiBase</code></li></ul><h2 id="framework-YiiBase-php"><a href="#framework-YiiBase-php" class="headerlink" title="framework\YiiBase.php"></a>framework\YiiBase.php</h2><ul><li>定義了Yii的一些常數預設值</li><li>定義<code>Class YiiBase</code></li><li>auto load Yii core classes</li><li>require <code>base\interfaces.php</code></li></ul><p>不建議更動及呼叫這個核心檔的東西，使用寫在yii.php的<code>Class Yii</code>比較好。</p><p>createWebApplication()就是在這時候被載入的。</p><ul><li><p>Yii::createWebApplication()</p><p>接收設定檔，並回傳呼叫<code>createApplication(&#39;CWebApplication&#39;, $config)</code>的結果</p></li><li><p>Yii::createApplication()</p><p>接收要啟用的應用及設定檔，並且回傳依據名稱建立出來對應的應用物件，這裡會建立出一個CWebApplication物件。</p></li></ul><p>–</p><h2 id="framework-web-CWebApplication-php"><a href="#framework-web-CWebApplication-php" class="headerlink" title="framework\web\CWebApplication.php"></a>framework\web\CWebApplication.php</h2><ul><li>定義<code>Class CWebApplication extends CApplication</code></li></ul><h2 id="framework-base-CApplication-php"><a href="#framework-base-CApplication-php" class="headerlink" title="framework\base\CApplication.php"></a>framework\base\CApplication.php</h2><ul><li>定義<code>Class CApplication extends CModule</code></li></ul><p>CWebApplication物件使用了這裡的__construct()建立，並且從這裡繼承了run()方法。</p><h2 id="Application-life-cycle"><a href="#Application-life-cycle" class="headerlink" title="Application life cycle"></a>Application life cycle</h2><p>CWebApplication建立(construct)時大概會發生一些事</p><ul><li>呼叫<code>preinit()</code>(從CModule繼承而來)，預先初始化一些模組</li><li>呼叫<code>initSystemHandlers()</code>，初始化啟用yii的例外錯誤處理</li><li>呼叫<code>registerCoreComponents()</code>，註冊核心組件<ul><li><code>coreMessages =&gt; CPhpMessageSource</code> : 提供Yii的核心訊息翻譯，預設是<code>en_us</code></li><li><code>db =&gt; CDbConnection</code> : 提供Database連線，使用時需要設定DSN(Data Source Name)</li><li><code>messages =&gt; CPhpMessageSource</code> : 提供Yii的應用程式訊息翻譯</li><li><code>errorHandler =&gt; CErrorHandler</code> : 處理程式中未處理的PHP例外錯誤處理，依據錯誤類型調用適當的view顯示</li><li><code>securityManager =&gt; CSecurityManager</code> : 提供資安相關功能，ex. hash, crypto…等</li><li><code>CStatePersister =&gt; statePersister</code> : 提供全域的狀態維持功能</li><li><code>urlManager =&gt; CUrlManager</code> : 提供URL相關功能</li><li><code>request =&gt; CHttpRequest</code> : 提供http request相關功能</li><li><code>format =&gt; CFormatter</code> : 提供數據顯示格式化功能</li></ul></li><li>呼叫<code>configure($config)</code>(從CModule繼承而來)，載入剛剛傳進來的config</li><li>呼叫<code>attachBehaviors($this-&gt;behaviors)</code>(從CComponent繼承而來)</li><li>呼叫<code>preloadComponents</code>(從CModule繼承而來)</li><li>呼叫<code>init()</code>(從CModule繼承而來並在CWebApplication中有被覆寫)</li></ul><p>建立後立即呼叫run()</p><ul><li>等待觸發<code>onBeginRequest</code>事件</li><li>呼叫<code>processRequest()</code>，處理request、create controller、run controller</li><li>等待處發<code>onEndRequest</code>事件</li></ul><p>CApplication中定義了<code>abstract public function processRequest();</code>，內容由各子類別自己去實作。</p><p>另外參考:<br><a href="http://www.cnblogs.com/JosephLiu/archive/2011/12/19/2292852.html" target="_blank" rel="noopener">http://www.cnblogs.com/JosephLiu/archive/2011/12/19/2292852.html</a></p><h2 id="CApplication-construct"><a href="#CApplication-construct" class="headerlink" title="CApplication::__construct()"></a>CApplication::__construct()</h2><img src="/2017/10/03/Yii-framework-Entry-Script-Basic-Application/yii_CApplication_construct.PNG" class="" title="yii_CApplication_construct"><p>這裡的$this是指CWebApplication物件</p><ul><li>134行: 設定應用程式物件，這樣在應用環境中使用<code>Yii::app()</code>就可以取得該CWebApplication實例</li><li>137行: require config</li><li>139~145行: 設定basePath</li><li>146~159行: 設定了路徑的別名以利使用</li><li>161行: yii預留的方法，預設是沒有內容的，需要的話可以自行覆寫</li><li>163行: 初始化yii的Exception handler，預設應該是啟用的</li><li>164行: 註冊必須的核心模組，registerCoreComponents()最後其實呼叫到了繼承自CModule的setComponent()，將component的實體存入_components中 (???not sure)</li><li>166行: 將設定值轉成應用程式實體的屬性，configure()方法繼承自CModule，可以看到他其實是這樣設的<code>$this-&gt;$key=$value;</code>，在存取設定不存在的屬性時，會分別用到CModule中的__get()及CComponent中的__set()</li><li>167行: attach application behaviors，大概是個註冊事件集合的概念</li><li>168行: 將configure中從main.php中載入的preload component，存入_components中，完成初始化</li><li>170行: 呼叫init()，這個方法在CWebApplication中有被覆寫。先跑父層的init()，並且呼叫getRequest(‘request’)。getRequest()使用到CModule中的getComponent()，取得對應的request component實體並回傳。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Yii建出專案資料夾的最上層有個index.php當作應用程式的進入點。&lt;/p&gt;
&lt;h2 id=&quot;index-php&quot;&gt;&lt;a href=&quot;#index-php&quot; class=&quot;headerlink&quot; title=&quot;index.php&quot;&gt;&lt;/a&gt;index.php&lt;/h2&gt;&lt;p&gt;這裡面大概做了幾件事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義一些常數(設定值) &lt;a href=&quot;https://stackoverflow.com/questions/2447791/define-vs-const&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;define vs const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;require&lt;code&gt;\framework\yii.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Yii::createWebApplication($config)-&amp;gt;run();&lt;/code&gt;，傳入設定檔並建立一個WebApplication，然後啟動&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="資訊技術" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/"/>
    
      <category term="PHP" scheme="https://blog.comicat.me/categories/%E8%B3%87%E8%A8%8A%E6%8A%80%E8%A1%93/PHP/"/>
    
    
      <category term="PHP" scheme="https://blog.comicat.me/tags/PHP/"/>
    
      <category term="Yii1.x" scheme="https://blog.comicat.me/tags/Yii1-x/"/>
    
  </entry>
  
</feed>
